ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"SEGGER_RTT.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text._GetAvailWriteSpace,"ax",%progbits
  17              		.align	1
  18              		.arch armv7e-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv5-d16
  24              	_GetAvailWriteSpace:
  25              	.LVL0:
  26              	.LFB4:
  27              		.file 1 "Src/SEGGER_RTT.c"
   1:Src/SEGGER_RTT.c **** /*********************************************************************
   2:Src/SEGGER_RTT.c **** *                    SEGGER Microcontroller GmbH                     *
   3:Src/SEGGER_RTT.c **** *                        The Embedded Experts                        *
   4:Src/SEGGER_RTT.c **** **********************************************************************
   5:Src/SEGGER_RTT.c **** *                                                                    *
   6:Src/SEGGER_RTT.c **** *            (c) 1995 - 2019 SEGGER Microcontroller GmbH             *
   7:Src/SEGGER_RTT.c **** *                                                                    *
   8:Src/SEGGER_RTT.c **** *       www.segger.com     Support: support@segger.com               *
   9:Src/SEGGER_RTT.c **** *                                                                    *
  10:Src/SEGGER_RTT.c **** **********************************************************************
  11:Src/SEGGER_RTT.c **** *                                                                    *
  12:Src/SEGGER_RTT.c **** *       SEGGER RTT * Real Time Transfer for embedded targets         *
  13:Src/SEGGER_RTT.c **** *                                                                    *
  14:Src/SEGGER_RTT.c **** **********************************************************************
  15:Src/SEGGER_RTT.c **** *                                                                    *
  16:Src/SEGGER_RTT.c **** * All rights reserved.                                               *
  17:Src/SEGGER_RTT.c **** *                                                                    *
  18:Src/SEGGER_RTT.c **** * SEGGER strongly recommends to not make any changes                 *
  19:Src/SEGGER_RTT.c **** * to or modify the source code of this software in order to stay     *
  20:Src/SEGGER_RTT.c **** * compatible with the RTT protocol and J-Link.                       *
  21:Src/SEGGER_RTT.c **** *                                                                    *
  22:Src/SEGGER_RTT.c **** * Redistribution and use in source and binary forms, with or         *
  23:Src/SEGGER_RTT.c **** * without modification, are permitted provided that the following    *
  24:Src/SEGGER_RTT.c **** * condition is met:                                                  *
  25:Src/SEGGER_RTT.c **** *                                                                    *
  26:Src/SEGGER_RTT.c **** * o Redistributions of source code must retain the above copyright   *
  27:Src/SEGGER_RTT.c **** *   notice, this condition and the following disclaimer.             *
  28:Src/SEGGER_RTT.c **** *                                                                    *
  29:Src/SEGGER_RTT.c **** * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND             *
  30:Src/SEGGER_RTT.c **** * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,        *
  31:Src/SEGGER_RTT.c **** * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF           *
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 2


  32:Src/SEGGER_RTT.c **** * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE           *
  33:Src/SEGGER_RTT.c **** * DISCLAIMED. IN NO EVENT SHALL SEGGER Microcontroller BE LIABLE FOR *
  34:Src/SEGGER_RTT.c **** * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR           *
  35:Src/SEGGER_RTT.c **** * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT  *
  36:Src/SEGGER_RTT.c **** * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;    *
  37:Src/SEGGER_RTT.c **** * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF      *
  38:Src/SEGGER_RTT.c **** * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT          *
  39:Src/SEGGER_RTT.c **** * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE  *
  40:Src/SEGGER_RTT.c **** * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH   *
  41:Src/SEGGER_RTT.c **** * DAMAGE.                                                            *
  42:Src/SEGGER_RTT.c **** *                                                                    *
  43:Src/SEGGER_RTT.c **** **********************************************************************
  44:Src/SEGGER_RTT.c **** ---------------------------END-OF-HEADER------------------------------
  45:Src/SEGGER_RTT.c **** File    : SEGGER_RTT.c
  46:Src/SEGGER_RTT.c **** Purpose : Implementation of SEGGER real-time transfer (RTT) which
  47:Src/SEGGER_RTT.c ****           allows real-time communication on targets which support
  48:Src/SEGGER_RTT.c ****           debugger memory accesses while the CPU is running.
  49:Src/SEGGER_RTT.c **** Revision: $Rev: 17697 $
  50:Src/SEGGER_RTT.c **** 
  51:Src/SEGGER_RTT.c **** Additional information:
  52:Src/SEGGER_RTT.c ****           Type "int" is assumed to be 32-bits in size
  53:Src/SEGGER_RTT.c ****           H->T    Host to target communication
  54:Src/SEGGER_RTT.c ****           T->H    Target to host communication
  55:Src/SEGGER_RTT.c **** 
  56:Src/SEGGER_RTT.c ****           RTT channel 0 is always present and reserved for Terminal usage.
  57:Src/SEGGER_RTT.c ****           Name is fixed to "Terminal"
  58:Src/SEGGER_RTT.c **** 
  59:Src/SEGGER_RTT.c ****           Effective buffer size: SizeOfBuffer - 1
  60:Src/SEGGER_RTT.c **** 
  61:Src/SEGGER_RTT.c ****           WrOff == RdOff:       Buffer is empty
  62:Src/SEGGER_RTT.c ****           WrOff == (RdOff - 1): Buffer is full
  63:Src/SEGGER_RTT.c ****           WrOff >  RdOff:       Free space includes wrap-around
  64:Src/SEGGER_RTT.c ****           WrOff <  RdOff:       Used space includes wrap-around
  65:Src/SEGGER_RTT.c ****           (WrOff == (SizeOfBuffer - 1)) && (RdOff == 0):  
  66:Src/SEGGER_RTT.c ****                                 Buffer full and wrap-around after next byte
  67:Src/SEGGER_RTT.c **** 
  68:Src/SEGGER_RTT.c **** 
  69:Src/SEGGER_RTT.c **** ----------------------------------------------------------------------
  70:Src/SEGGER_RTT.c **** */
  71:Src/SEGGER_RTT.c **** 
  72:Src/SEGGER_RTT.c **** #include "SEGGER_RTT.h"
  73:Src/SEGGER_RTT.c **** 
  74:Src/SEGGER_RTT.c **** #include <string.h>                 // for memcpy
  75:Src/SEGGER_RTT.c **** 
  76:Src/SEGGER_RTT.c **** /*********************************************************************
  77:Src/SEGGER_RTT.c **** *
  78:Src/SEGGER_RTT.c **** *       Configuration, default values
  79:Src/SEGGER_RTT.c **** *
  80:Src/SEGGER_RTT.c **** **********************************************************************
  81:Src/SEGGER_RTT.c **** */
  82:Src/SEGGER_RTT.c **** 
  83:Src/SEGGER_RTT.c **** #ifndef   BUFFER_SIZE_UP
  84:Src/SEGGER_RTT.c ****   #define BUFFER_SIZE_UP                                  1024  // Size of the buffer for terminal 
  85:Src/SEGGER_RTT.c **** #endif
  86:Src/SEGGER_RTT.c **** 
  87:Src/SEGGER_RTT.c **** #ifndef   BUFFER_SIZE_DOWN
  88:Src/SEGGER_RTT.c ****   #define BUFFER_SIZE_DOWN                                16    // Size of the buffer for terminal 
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 3


  89:Src/SEGGER_RTT.c **** #endif
  90:Src/SEGGER_RTT.c **** 
  91:Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MAX_NUM_UP_BUFFERS
  92:Src/SEGGER_RTT.c ****   #define SEGGER_RTT_MAX_NUM_UP_BUFFERS                    2    // Number of up-buffers (T->H) avai
  93:Src/SEGGER_RTT.c **** #endif
  94:Src/SEGGER_RTT.c **** 
  95:Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MAX_NUM_DOWN_BUFFERS
  96:Src/SEGGER_RTT.c ****   #define SEGGER_RTT_MAX_NUM_DOWN_BUFFERS                  2    // Number of down-buffers (H->T) av
  97:Src/SEGGER_RTT.c **** #endif
  98:Src/SEGGER_RTT.c **** 
  99:Src/SEGGER_RTT.c **** #ifndef SEGGER_RTT_BUFFER_SECTION
 100:Src/SEGGER_RTT.c ****   #if defined(SEGGER_RTT_SECTION)
 101:Src/SEGGER_RTT.c ****     #define SEGGER_RTT_BUFFER_SECTION SEGGER_RTT_SECTION
 102:Src/SEGGER_RTT.c ****   #endif
 103:Src/SEGGER_RTT.c **** #endif
 104:Src/SEGGER_RTT.c **** 
 105:Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_ALIGNMENT
 106:Src/SEGGER_RTT.c ****   #define SEGGER_RTT_ALIGNMENT                            0
 107:Src/SEGGER_RTT.c **** #endif
 108:Src/SEGGER_RTT.c **** 
 109:Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_BUFFER_ALIGNMENT
 110:Src/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGNMENT                     0
 111:Src/SEGGER_RTT.c **** #endif
 112:Src/SEGGER_RTT.c **** 
 113:Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MODE_DEFAULT
 114:Src/SEGGER_RTT.c ****   #define SEGGER_RTT_MODE_DEFAULT                         SEGGER_RTT_MODE_NO_BLOCK_SKIP
 115:Src/SEGGER_RTT.c **** #endif
 116:Src/SEGGER_RTT.c **** 
 117:Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_LOCK
 118:Src/SEGGER_RTT.c ****   #define SEGGER_RTT_LOCK()
 119:Src/SEGGER_RTT.c **** #endif
 120:Src/SEGGER_RTT.c **** 
 121:Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_UNLOCK
 122:Src/SEGGER_RTT.c ****   #define SEGGER_RTT_UNLOCK()
 123:Src/SEGGER_RTT.c **** #endif
 124:Src/SEGGER_RTT.c **** 
 125:Src/SEGGER_RTT.c **** #ifndef   STRLEN
 126:Src/SEGGER_RTT.c ****   #define STRLEN(a)                                       strlen((a))
 127:Src/SEGGER_RTT.c **** #endif
 128:Src/SEGGER_RTT.c **** 
 129:Src/SEGGER_RTT.c **** #ifndef   STRCPY
 130:Src/SEGGER_RTT.c ****   #define STRCPY(pDest, pSrc, NumBytes)                   strcpy((pDest), (pSrc))
 131:Src/SEGGER_RTT.c **** #endif
 132:Src/SEGGER_RTT.c **** 
 133:Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MEMCPY_USE_BYTELOOP
 134:Src/SEGGER_RTT.c ****   #define SEGGER_RTT_MEMCPY_USE_BYTELOOP                  0
 135:Src/SEGGER_RTT.c **** #endif
 136:Src/SEGGER_RTT.c **** 
 137:Src/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MEMCPY
 138:Src/SEGGER_RTT.c ****   #ifdef  MEMCPY
 139:Src/SEGGER_RTT.c ****     #define SEGGER_RTT_MEMCPY(pDest, pSrc, NumBytes)      MEMCPY((pDest), (pSrc), (NumBytes))
 140:Src/SEGGER_RTT.c ****   #else
 141:Src/SEGGER_RTT.c ****     #define SEGGER_RTT_MEMCPY(pDest, pSrc, NumBytes)      memcpy((pDest), (pSrc), (NumBytes))
 142:Src/SEGGER_RTT.c ****   #endif
 143:Src/SEGGER_RTT.c **** #endif
 144:Src/SEGGER_RTT.c **** 
 145:Src/SEGGER_RTT.c **** #ifndef   MIN
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 4


 146:Src/SEGGER_RTT.c ****   #define MIN(a, b)         (((a) < (b)) ? (a) : (b))
 147:Src/SEGGER_RTT.c **** #endif
 148:Src/SEGGER_RTT.c **** 
 149:Src/SEGGER_RTT.c **** #ifndef   MAX
 150:Src/SEGGER_RTT.c ****   #define MAX(a, b)         (((a) > (b)) ? (a) : (b))
 151:Src/SEGGER_RTT.c **** #endif
 152:Src/SEGGER_RTT.c **** //
 153:Src/SEGGER_RTT.c **** // For some environments, NULL may not be defined until certain headers are included
 154:Src/SEGGER_RTT.c **** //
 155:Src/SEGGER_RTT.c **** #ifndef NULL
 156:Src/SEGGER_RTT.c ****   #define NULL 0
 157:Src/SEGGER_RTT.c **** #endif
 158:Src/SEGGER_RTT.c **** 
 159:Src/SEGGER_RTT.c **** /*********************************************************************
 160:Src/SEGGER_RTT.c **** *
 161:Src/SEGGER_RTT.c **** *       Defines, fixed
 162:Src/SEGGER_RTT.c **** *
 163:Src/SEGGER_RTT.c **** **********************************************************************
 164:Src/SEGGER_RTT.c **** */
 165:Src/SEGGER_RTT.c **** #if (defined __ICCARM__) || (defined __ICCRX__)
 166:Src/SEGGER_RTT.c ****   #define RTT_PRAGMA(P) _Pragma(#P)
 167:Src/SEGGER_RTT.c **** #endif
 168:Src/SEGGER_RTT.c **** 
 169:Src/SEGGER_RTT.c **** #if SEGGER_RTT_ALIGNMENT || SEGGER_RTT_BUFFER_ALIGNMENT
 170:Src/SEGGER_RTT.c ****   #if (defined __GNUC__)
 171:Src/SEGGER_RTT.c ****     #define SEGGER_RTT_ALIGN(Var, Alignment) Var __attribute__ ((aligned (Alignment)))
 172:Src/SEGGER_RTT.c ****   #elif (defined __ICCARM__) || (defined __ICCRX__)
 173:Src/SEGGER_RTT.c ****     #define PRAGMA(A) _Pragma(#A)
 174:Src/SEGGER_RTT.c **** #define SEGGER_RTT_ALIGN(Var, Alignment) RTT_PRAGMA(data_alignment=Alignment) \
 175:Src/SEGGER_RTT.c ****                                   Var
 176:Src/SEGGER_RTT.c ****   #elif (defined __CC_ARM)
 177:Src/SEGGER_RTT.c ****     #define SEGGER_RTT_ALIGN(Var, Alignment) Var __attribute__ ((aligned (Alignment)))
 178:Src/SEGGER_RTT.c ****   #else
 179:Src/SEGGER_RTT.c ****     #error "Alignment not supported for this compiler."
 180:Src/SEGGER_RTT.c ****   #endif
 181:Src/SEGGER_RTT.c **** #else
 182:Src/SEGGER_RTT.c ****   #define SEGGER_RTT_ALIGN(Var, Alignment) Var
 183:Src/SEGGER_RTT.c **** #endif
 184:Src/SEGGER_RTT.c **** 
 185:Src/SEGGER_RTT.c **** #if defined(SEGGER_RTT_SECTION) || defined (SEGGER_RTT_BUFFER_SECTION)
 186:Src/SEGGER_RTT.c ****   #if (defined __GNUC__)
 187:Src/SEGGER_RTT.c ****     #define SEGGER_RTT_PUT_SECTION(Var, Section) __attribute__ ((section (Section))) Var
 188:Src/SEGGER_RTT.c ****   #elif (defined __ICCARM__) || (defined __ICCRX__)
 189:Src/SEGGER_RTT.c **** #define SEGGER_RTT_PUT_SECTION(Var, Section) RTT_PRAGMA(location=Section) \
 190:Src/SEGGER_RTT.c ****                                         Var
 191:Src/SEGGER_RTT.c ****   #elif (defined __CC_ARM)
 192:Src/SEGGER_RTT.c ****     #define SEGGER_RTT_PUT_SECTION(Var, Section) __attribute__ ((section (Section), zero_init))  Va
 193:Src/SEGGER_RTT.c ****   #else
 194:Src/SEGGER_RTT.c ****     #error "Section placement not supported for this compiler."
 195:Src/SEGGER_RTT.c ****   #endif
 196:Src/SEGGER_RTT.c **** #else
 197:Src/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_SECTION(Var, Section) Var
 198:Src/SEGGER_RTT.c **** #endif
 199:Src/SEGGER_RTT.c **** 
 200:Src/SEGGER_RTT.c **** 
 201:Src/SEGGER_RTT.c **** #if SEGGER_RTT_ALIGNMENT
 202:Src/SEGGER_RTT.c ****   #define SEGGER_RTT_CB_ALIGN(Var)  SEGGER_RTT_ALIGN(Var, SEGGER_RTT_ALIGNMENT)
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 5


 203:Src/SEGGER_RTT.c **** #else
 204:Src/SEGGER_RTT.c ****   #define SEGGER_RTT_CB_ALIGN(Var)  Var
 205:Src/SEGGER_RTT.c **** #endif
 206:Src/SEGGER_RTT.c **** 
 207:Src/SEGGER_RTT.c **** #if SEGGER_RTT_BUFFER_ALIGNMENT
 208:Src/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGN(Var)  SEGGER_RTT_ALIGN(Var, SEGGER_RTT_BUFFER_ALIGNMENT)
 209:Src/SEGGER_RTT.c **** #else
 210:Src/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGN(Var)  Var
 211:Src/SEGGER_RTT.c **** #endif
 212:Src/SEGGER_RTT.c **** 
 213:Src/SEGGER_RTT.c **** 
 214:Src/SEGGER_RTT.c **** #if defined(SEGGER_RTT_SECTION)
 215:Src/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_CB_SECTION(Var) SEGGER_RTT_PUT_SECTION(Var, SEGGER_RTT_SECTION)
 216:Src/SEGGER_RTT.c **** #else
 217:Src/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_CB_SECTION(Var) Var
 218:Src/SEGGER_RTT.c **** #endif
 219:Src/SEGGER_RTT.c **** 
 220:Src/SEGGER_RTT.c **** #if defined(SEGGER_RTT_BUFFER_SECTION)
 221:Src/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_BUFFER_SECTION(Var) SEGGER_RTT_PUT_SECTION(Var, SEGGER_RTT_BUFFER_SECTION)
 222:Src/SEGGER_RTT.c **** #else
 223:Src/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_BUFFER_SECTION(Var) Var
 224:Src/SEGGER_RTT.c **** #endif
 225:Src/SEGGER_RTT.c **** 
 226:Src/SEGGER_RTT.c **** /*********************************************************************
 227:Src/SEGGER_RTT.c **** *
 228:Src/SEGGER_RTT.c **** *       Static const data
 229:Src/SEGGER_RTT.c **** *
 230:Src/SEGGER_RTT.c **** **********************************************************************
 231:Src/SEGGER_RTT.c **** */
 232:Src/SEGGER_RTT.c **** 
 233:Src/SEGGER_RTT.c **** static unsigned char _aTerminalId[16] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B
 234:Src/SEGGER_RTT.c **** 
 235:Src/SEGGER_RTT.c **** /*********************************************************************
 236:Src/SEGGER_RTT.c **** *
 237:Src/SEGGER_RTT.c **** *       Static data
 238:Src/SEGGER_RTT.c **** *
 239:Src/SEGGER_RTT.c **** **********************************************************************
 240:Src/SEGGER_RTT.c **** */
 241:Src/SEGGER_RTT.c **** //
 242:Src/SEGGER_RTT.c **** // RTT Control Block and allocate buffers for channel 0
 243:Src/SEGGER_RTT.c **** //
 244:Src/SEGGER_RTT.c **** SEGGER_RTT_PUT_CB_SECTION(SEGGER_RTT_CB_ALIGN(SEGGER_RTT_CB _SEGGER_RTT));
 245:Src/SEGGER_RTT.c **** 
 246:Src/SEGGER_RTT.c **** SEGGER_RTT_PUT_BUFFER_SECTION(SEGGER_RTT_BUFFER_ALIGN(static char _acUpBuffer  [BUFFER_SIZE_UP]));
 247:Src/SEGGER_RTT.c **** SEGGER_RTT_PUT_BUFFER_SECTION(SEGGER_RTT_BUFFER_ALIGN(static char _acDownBuffer[BUFFER_SIZE_DOWN]))
 248:Src/SEGGER_RTT.c **** 
 249:Src/SEGGER_RTT.c **** static unsigned char _ActiveTerminal;
 250:Src/SEGGER_RTT.c **** 
 251:Src/SEGGER_RTT.c **** /*********************************************************************
 252:Src/SEGGER_RTT.c **** *
 253:Src/SEGGER_RTT.c **** *       Static functions
 254:Src/SEGGER_RTT.c **** *
 255:Src/SEGGER_RTT.c **** **********************************************************************
 256:Src/SEGGER_RTT.c **** */
 257:Src/SEGGER_RTT.c **** 
 258:Src/SEGGER_RTT.c **** /*********************************************************************
 259:Src/SEGGER_RTT.c **** *
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 6


 260:Src/SEGGER_RTT.c **** *       _DoInit()
 261:Src/SEGGER_RTT.c **** *
 262:Src/SEGGER_RTT.c **** *  Function description
 263:Src/SEGGER_RTT.c **** *    Initializes the control block an buffers.
 264:Src/SEGGER_RTT.c **** *    May only be called via INIT() to avoid overriding settings.
 265:Src/SEGGER_RTT.c **** *
 266:Src/SEGGER_RTT.c **** */
 267:Src/SEGGER_RTT.c **** #define INIT()  do {                                            \
 268:Src/SEGGER_RTT.c ****                   if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
 269:Src/SEGGER_RTT.c ****                 } while (0)
 270:Src/SEGGER_RTT.c **** static void _DoInit(void) {
 271:Src/SEGGER_RTT.c ****   SEGGER_RTT_CB* p;
 272:Src/SEGGER_RTT.c ****   //
 273:Src/SEGGER_RTT.c ****   // Initialize control block
 274:Src/SEGGER_RTT.c ****   //
 275:Src/SEGGER_RTT.c ****   p = &_SEGGER_RTT;
 276:Src/SEGGER_RTT.c ****   p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 277:Src/SEGGER_RTT.c ****   p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 278:Src/SEGGER_RTT.c ****   //
 279:Src/SEGGER_RTT.c ****   // Initialize up buffer 0
 280:Src/SEGGER_RTT.c ****   //
 281:Src/SEGGER_RTT.c ****   p->aUp[0].sName         = "Terminal";
 282:Src/SEGGER_RTT.c ****   p->aUp[0].pBuffer       = _acUpBuffer;
 283:Src/SEGGER_RTT.c ****   p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 284:Src/SEGGER_RTT.c ****   p->aUp[0].RdOff         = 0u;
 285:Src/SEGGER_RTT.c ****   p->aUp[0].WrOff         = 0u;
 286:Src/SEGGER_RTT.c ****   p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 287:Src/SEGGER_RTT.c ****   //
 288:Src/SEGGER_RTT.c ****   // Initialize down buffer 0
 289:Src/SEGGER_RTT.c ****   //
 290:Src/SEGGER_RTT.c ****   p->aDown[0].sName         = "Terminal";
 291:Src/SEGGER_RTT.c ****   p->aDown[0].pBuffer       = _acDownBuffer;
 292:Src/SEGGER_RTT.c ****   p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 293:Src/SEGGER_RTT.c ****   p->aDown[0].RdOff         = 0u;
 294:Src/SEGGER_RTT.c ****   p->aDown[0].WrOff         = 0u;
 295:Src/SEGGER_RTT.c ****   p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 296:Src/SEGGER_RTT.c ****   //
 297:Src/SEGGER_RTT.c ****   // Finish initialization of the control block.
 298:Src/SEGGER_RTT.c ****   // Copy Id string in three steps to make sure "SEGGER RTT" is not found
 299:Src/SEGGER_RTT.c ****   // in initializer memory (usually flash) by J-Link
 300:Src/SEGGER_RTT.c ****   //
 301:Src/SEGGER_RTT.c ****   STRCPY(&p->acID[7], "RTT", 9);
 302:Src/SEGGER_RTT.c ****   STRCPY(&p->acID[0], "SEGGER", 7);
 303:Src/SEGGER_RTT.c ****   p->acID[6] = ' ';
 304:Src/SEGGER_RTT.c **** }
 305:Src/SEGGER_RTT.c **** 
 306:Src/SEGGER_RTT.c **** /*********************************************************************
 307:Src/SEGGER_RTT.c **** *
 308:Src/SEGGER_RTT.c **** *       _WriteBlocking()
 309:Src/SEGGER_RTT.c **** *
 310:Src/SEGGER_RTT.c **** *  Function description
 311:Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT ring buffer
 312:Src/SEGGER_RTT.c **** *    and updates the associated write pointer which is periodically
 313:Src/SEGGER_RTT.c **** *    read by the host.
 314:Src/SEGGER_RTT.c **** *    The caller is responsible for managing the write chunk sizes as
 315:Src/SEGGER_RTT.c **** *    _WriteBlocking() will block until all data has been posted successfully.
 316:Src/SEGGER_RTT.c **** *
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 7


 317:Src/SEGGER_RTT.c **** *  Parameters
 318:Src/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
 319:Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 320:Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 321:Src/SEGGER_RTT.c **** *
 322:Src/SEGGER_RTT.c **** *  Return value
 323:Src/SEGGER_RTT.c **** *    >= 0 - Number of bytes written into buffer.
 324:Src/SEGGER_RTT.c **** */
 325:Src/SEGGER_RTT.c **** static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes)
 326:Src/SEGGER_RTT.c ****   unsigned NumBytesToWrite;
 327:Src/SEGGER_RTT.c ****   unsigned NumBytesWritten;
 328:Src/SEGGER_RTT.c ****   unsigned RdOff;
 329:Src/SEGGER_RTT.c ****   unsigned WrOff;
 330:Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 331:Src/SEGGER_RTT.c ****   char*    pDst;
 332:Src/SEGGER_RTT.c **** #endif
 333:Src/SEGGER_RTT.c ****   //
 334:Src/SEGGER_RTT.c ****   // Write data to buffer and handle wrap-around if necessary
 335:Src/SEGGER_RTT.c ****   //
 336:Src/SEGGER_RTT.c ****   NumBytesWritten = 0u;
 337:Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 338:Src/SEGGER_RTT.c ****   do {
 339:Src/SEGGER_RTT.c ****     RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the me
 340:Src/SEGGER_RTT.c ****     if (RdOff > WrOff) {
 341:Src/SEGGER_RTT.c ****       NumBytesToWrite = RdOff - WrOff - 1u;
 342:Src/SEGGER_RTT.c ****     } else {
 343:Src/SEGGER_RTT.c ****       NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 344:Src/SEGGER_RTT.c ****     }
 345:Src/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes 
 346:Src/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 347:Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 348:Src/SEGGER_RTT.c ****     pDst = pRing->pBuffer + WrOff;
 349:Src/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 350:Src/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 351:Src/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 352:Src/SEGGER_RTT.c ****     while (NumBytesToWrite--) {
 353:Src/SEGGER_RTT.c ****       *pDst++ = *pBuffer++;
 354:Src/SEGGER_RTT.c ****     };
 355:Src/SEGGER_RTT.c **** #else
 356:Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 357:Src/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 358:Src/SEGGER_RTT.c ****     pBuffer         += NumBytesToWrite;
 359:Src/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 360:Src/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 361:Src/SEGGER_RTT.c **** #endif
 362:Src/SEGGER_RTT.c ****     if (WrOff == pRing->SizeOfBuffer) {
 363:Src/SEGGER_RTT.c ****       WrOff = 0u;
 364:Src/SEGGER_RTT.c ****     }
 365:Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 366:Src/SEGGER_RTT.c ****   } while (NumBytes);
 367:Src/SEGGER_RTT.c ****   //
 368:Src/SEGGER_RTT.c ****   return NumBytesWritten;
 369:Src/SEGGER_RTT.c **** }
 370:Src/SEGGER_RTT.c **** 
 371:Src/SEGGER_RTT.c **** /*********************************************************************
 372:Src/SEGGER_RTT.c **** *
 373:Src/SEGGER_RTT.c **** *       _WriteNoCheck()
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 8


 374:Src/SEGGER_RTT.c **** *
 375:Src/SEGGER_RTT.c **** *  Function description
 376:Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT ring buffer
 377:Src/SEGGER_RTT.c **** *    and updates the associated write pointer which is periodically
 378:Src/SEGGER_RTT.c **** *    read by the host.
 379:Src/SEGGER_RTT.c **** *    It is callers responsibility to make sure data actually fits in buffer.
 380:Src/SEGGER_RTT.c **** *
 381:Src/SEGGER_RTT.c **** *  Parameters
 382:Src/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
 383:Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 384:Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 385:Src/SEGGER_RTT.c **** *
 386:Src/SEGGER_RTT.c **** *  Notes
 387:Src/SEGGER_RTT.c **** *    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
 388:Src/SEGGER_RTT.c **** */
 389:Src/SEGGER_RTT.c **** static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 390:Src/SEGGER_RTT.c ****   unsigned NumBytesAtOnce;
 391:Src/SEGGER_RTT.c ****   unsigned WrOff;
 392:Src/SEGGER_RTT.c ****   unsigned Rem;
 393:Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 394:Src/SEGGER_RTT.c ****   char*    pDst;
 395:Src/SEGGER_RTT.c **** #endif
 396:Src/SEGGER_RTT.c **** 
 397:Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 398:Src/SEGGER_RTT.c ****   Rem = pRing->SizeOfBuffer - WrOff;
 399:Src/SEGGER_RTT.c ****   if (Rem > NumBytes) {
 400:Src/SEGGER_RTT.c ****     //
 401:Src/SEGGER_RTT.c ****     // All data fits before wrap around
 402:Src/SEGGER_RTT.c ****     //
 403:Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 404:Src/SEGGER_RTT.c ****     pDst = pRing->pBuffer + WrOff;
 405:Src/SEGGER_RTT.c ****     WrOff += NumBytes;
 406:Src/SEGGER_RTT.c ****     while (NumBytes--) {
 407:Src/SEGGER_RTT.c ****       *pDst++ = *pData++;
 408:Src/SEGGER_RTT.c ****     };
 409:Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 410:Src/SEGGER_RTT.c **** #else
 411:Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 412:Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff + NumBytes;
 413:Src/SEGGER_RTT.c **** #endif
 414:Src/SEGGER_RTT.c ****   } else {
 415:Src/SEGGER_RTT.c ****     //
 416:Src/SEGGER_RTT.c ****     // We reach the end of the buffer, so need to wrap around
 417:Src/SEGGER_RTT.c ****     //
 418:Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 419:Src/SEGGER_RTT.c ****     pDst = pRing->pBuffer + WrOff;
 420:Src/SEGGER_RTT.c ****     NumBytesAtOnce = Rem;
 421:Src/SEGGER_RTT.c ****     while (NumBytesAtOnce--) {
 422:Src/SEGGER_RTT.c ****       *pDst++ = *pData++;
 423:Src/SEGGER_RTT.c ****     };
 424:Src/SEGGER_RTT.c ****     pDst = pRing->pBuffer;
 425:Src/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 426:Src/SEGGER_RTT.c ****     while (NumBytesAtOnce--) {
 427:Src/SEGGER_RTT.c ****       *pDst++ = *pData++;
 428:Src/SEGGER_RTT.c ****     };
 429:Src/SEGGER_RTT.c ****     pRing->WrOff = NumBytes - Rem;
 430:Src/SEGGER_RTT.c **** #else
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 9


 431:Src/SEGGER_RTT.c ****     NumBytesAtOnce = Rem;
 432:Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 433:Src/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 434:Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 435:Src/SEGGER_RTT.c ****     pRing->WrOff = NumBytesAtOnce;
 436:Src/SEGGER_RTT.c **** #endif
 437:Src/SEGGER_RTT.c ****   }
 438:Src/SEGGER_RTT.c **** }
 439:Src/SEGGER_RTT.c **** 
 440:Src/SEGGER_RTT.c **** /*********************************************************************
 441:Src/SEGGER_RTT.c **** *
 442:Src/SEGGER_RTT.c **** *       _PostTerminalSwitch()
 443:Src/SEGGER_RTT.c **** *
 444:Src/SEGGER_RTT.c **** *  Function description
 445:Src/SEGGER_RTT.c **** *    Switch terminal to the given terminal ID.  It is the caller's
 446:Src/SEGGER_RTT.c **** *    responsibility to ensure the terminal ID is correct and there is
 447:Src/SEGGER_RTT.c **** *    enough space in the buffer for this to complete successfully.
 448:Src/SEGGER_RTT.c **** *
 449:Src/SEGGER_RTT.c **** *  Parameters
 450:Src/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
 451:Src/SEGGER_RTT.c **** *    TerminalId   Terminal ID to switch to.
 452:Src/SEGGER_RTT.c **** */
 453:Src/SEGGER_RTT.c **** static void _PostTerminalSwitch(SEGGER_RTT_BUFFER_UP* pRing, unsigned char TerminalId) {
 454:Src/SEGGER_RTT.c ****   unsigned char ac[2];
 455:Src/SEGGER_RTT.c **** 
 456:Src/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 457:Src/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 458:Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 459:Src/SEGGER_RTT.c **** }
 460:Src/SEGGER_RTT.c **** 
 461:Src/SEGGER_RTT.c **** /*********************************************************************
 462:Src/SEGGER_RTT.c **** *
 463:Src/SEGGER_RTT.c **** *       _GetAvailWriteSpace()
 464:Src/SEGGER_RTT.c **** *
 465:Src/SEGGER_RTT.c **** *  Function description
 466:Src/SEGGER_RTT.c **** *    Returns the number of bytes that can be written to the ring
 467:Src/SEGGER_RTT.c **** *    buffer without blocking.
 468:Src/SEGGER_RTT.c **** *
 469:Src/SEGGER_RTT.c **** *  Parameters
 470:Src/SEGGER_RTT.c **** *    pRing        Ring buffer to check.
 471:Src/SEGGER_RTT.c **** *
 472:Src/SEGGER_RTT.c **** *  Return value
 473:Src/SEGGER_RTT.c **** *    Number of bytes that are free in the buffer.
 474:Src/SEGGER_RTT.c **** */
 475:Src/SEGGER_RTT.c **** static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
  28              		.loc 1 475 66 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
 476:Src/SEGGER_RTT.c ****   unsigned RdOff;
  33              		.loc 1 476 3 view .LVU1
 477:Src/SEGGER_RTT.c ****   unsigned WrOff;
  34              		.loc 1 477 3 view .LVU2
 478:Src/SEGGER_RTT.c ****   unsigned r;
  35              		.loc 1 478 3 view .LVU3
 479:Src/SEGGER_RTT.c ****   //
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 10


 480:Src/SEGGER_RTT.c ****   // Avoid warnings regarding volatile access order.  It's not a problem
 481:Src/SEGGER_RTT.c ****   // in this case, but dampen compiler enthusiasm.
 482:Src/SEGGER_RTT.c ****   //
 483:Src/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
  36              		.loc 1 483 3 view .LVU4
  37              		.loc 1 483 9 is_stmt 0 view .LVU5
  38 0000 0369     		ldr	r3, [r0, #16]
  39              	.LVL1:
 484:Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
  40              		.loc 1 484 3 is_stmt 1 view .LVU6
  41              		.loc 1 484 9 is_stmt 0 view .LVU7
  42 0002 C268     		ldr	r2, [r0, #12]
  43              	.LVL2:
 485:Src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
  44              		.loc 1 485 3 is_stmt 1 view .LVU8
  45              		.loc 1 485 6 is_stmt 0 view .LVU9
  46 0004 9342     		cmp	r3, r2
  47 0006 04D8     		bhi	.L2
 486:Src/SEGGER_RTT.c ****     r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
  48              		.loc 1 486 5 is_stmt 1 view .LVU10
  49              		.loc 1 486 14 is_stmt 0 view .LVU11
  50 0008 8068     		ldr	r0, [r0, #8]
  51              	.LVL3:
  52              		.loc 1 486 34 view .LVU12
  53 000a 801A     		subs	r0, r0, r2
  54              		.loc 1 486 42 view .LVU13
  55 000c 0344     		add	r3, r3, r0
  56              	.LVL4:
  57              		.loc 1 486 7 view .LVU14
  58 000e 581E     		subs	r0, r3, #1
  59              	.LVL5:
  60              		.loc 1 486 7 view .LVU15
  61 0010 7047     		bx	lr
  62              	.LVL6:
  63              	.L2:
 487:Src/SEGGER_RTT.c ****   } else {
 488:Src/SEGGER_RTT.c ****     r = RdOff - WrOff - 1u;
  64              		.loc 1 488 5 is_stmt 1 view .LVU16
  65              		.loc 1 488 15 is_stmt 0 view .LVU17
  66 0012 9B1A     		subs	r3, r3, r2
  67              	.LVL7:
  68              		.loc 1 488 7 view .LVU18
  69 0014 581E     		subs	r0, r3, #1
  70              	.LVL8:
 489:Src/SEGGER_RTT.c ****   }
 490:Src/SEGGER_RTT.c ****   return r;
  71              		.loc 1 490 3 is_stmt 1 view .LVU19
 491:Src/SEGGER_RTT.c **** }
  72              		.loc 1 491 1 is_stmt 0 view .LVU20
  73 0016 7047     		bx	lr
  74              		.cfi_endproc
  75              	.LFE4:
  77              		.section	.text._WriteNoCheck,"ax",%progbits
  78              		.align	1
  79              		.syntax unified
  80              		.thumb
  81              		.thumb_func
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 11


  82              		.fpu fpv5-d16
  84              	_WriteNoCheck:
  85              	.LVL9:
  86              	.LFB2:
 389:Src/SEGGER_RTT.c ****   unsigned NumBytesAtOnce;
  87              		.loc 1 389 94 is_stmt 1 view -0
  88              		.cfi_startproc
  89              		@ args = 0, pretend = 0, frame = 0
  90              		@ frame_needed = 0, uses_anonymous_args = 0
 389:Src/SEGGER_RTT.c ****   unsigned NumBytesAtOnce;
  91              		.loc 1 389 94 is_stmt 0 view .LVU22
  92 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
  93              	.LCFI0:
  94              		.cfi_def_cfa_offset 32
  95              		.cfi_offset 3, -32
  96              		.cfi_offset 4, -28
  97              		.cfi_offset 5, -24
  98              		.cfi_offset 6, -20
  99              		.cfi_offset 7, -16
 100              		.cfi_offset 8, -12
 101              		.cfi_offset 9, -8
 102              		.cfi_offset 14, -4
 103 0004 0546     		mov	r5, r0
 104 0006 8846     		mov	r8, r1
 105 0008 1646     		mov	r6, r2
 390:Src/SEGGER_RTT.c ****   unsigned WrOff;
 106              		.loc 1 390 3 is_stmt 1 view .LVU23
 391:Src/SEGGER_RTT.c ****   unsigned Rem;
 107              		.loc 1 391 3 view .LVU24
 392:Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 108              		.loc 1 392 3 view .LVU25
 397:Src/SEGGER_RTT.c ****   Rem = pRing->SizeOfBuffer - WrOff;
 109              		.loc 1 397 3 view .LVU26
 397:Src/SEGGER_RTT.c ****   Rem = pRing->SizeOfBuffer - WrOff;
 110              		.loc 1 397 9 is_stmt 0 view .LVU27
 111 000a C468     		ldr	r4, [r0, #12]
 112              	.LVL10:
 398:Src/SEGGER_RTT.c ****   if (Rem > NumBytes) {
 113              		.loc 1 398 3 is_stmt 1 view .LVU28
 398:Src/SEGGER_RTT.c ****   if (Rem > NumBytes) {
 114              		.loc 1 398 14 is_stmt 0 view .LVU29
 115 000c D0F80890 		ldr	r9, [r0, #8]
 398:Src/SEGGER_RTT.c ****   if (Rem > NumBytes) {
 116              		.loc 1 398 7 view .LVU30
 117 0010 A9EB0407 		sub	r7, r9, r4
 118              	.LVL11:
 399:Src/SEGGER_RTT.c ****     //
 119              		.loc 1 399 3 is_stmt 1 view .LVU31
 399:Src/SEGGER_RTT.c ****     //
 120              		.loc 1 399 6 is_stmt 0 view .LVU32
 121 0014 9742     		cmp	r7, r2
 122 0016 07D9     		bls	.L5
 411:Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff + NumBytes;
 123              		.loc 1 411 5 is_stmt 1 view .LVU33
 124 0018 4068     		ldr	r0, [r0, #4]
 125              	.LVL12:
 411:Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff + NumBytes;
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 12


 126              		.loc 1 411 5 is_stmt 0 view .LVU34
 127 001a 2044     		add	r0, r0, r4
 128 001c FFF7FEFF 		bl	memcpy
 129              	.LVL13:
 412:Src/SEGGER_RTT.c **** #endif
 130              		.loc 1 412 5 is_stmt 1 view .LVU35
 412:Src/SEGGER_RTT.c **** #endif
 131              		.loc 1 412 26 is_stmt 0 view .LVU36
 132 0020 3444     		add	r4, r4, r6
 133              	.LVL14:
 412:Src/SEGGER_RTT.c **** #endif
 134              		.loc 1 412 18 view .LVU37
 135 0022 EC60     		str	r4, [r5, #12]
 136              	.L4:
 438:Src/SEGGER_RTT.c **** 
 137              		.loc 1 438 1 view .LVU38
 138 0024 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 139              	.LVL15:
 140              	.L5:
 431:Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 141              		.loc 1 431 5 is_stmt 1 view .LVU39
 432:Src/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 142              		.loc 1 432 5 view .LVU40
 143 0028 4068     		ldr	r0, [r0, #4]
 144              	.LVL16:
 432:Src/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 145              		.loc 1 432 5 is_stmt 0 view .LVU41
 146 002a 3A46     		mov	r2, r7
 147              	.LVL17:
 432:Src/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 148              		.loc 1 432 5 view .LVU42
 149 002c 2044     		add	r0, r0, r4
 150 002e FFF7FEFF 		bl	memcpy
 151              	.LVL18:
 433:Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 152              		.loc 1 433 5 is_stmt 1 view .LVU43
 433:Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 153              		.loc 1 433 20 is_stmt 0 view .LVU44
 154 0032 A4EB0904 		sub	r4, r4, r9
 155              	.LVL19:
 433:Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 156              		.loc 1 433 20 view .LVU45
 157 0036 3444     		add	r4, r4, r6
 158              	.LVL20:
 434:Src/SEGGER_RTT.c ****     pRing->WrOff = NumBytesAtOnce;
 159              		.loc 1 434 5 is_stmt 1 view .LVU46
 160 0038 2246     		mov	r2, r4
 161 003a 08EB0701 		add	r1, r8, r7
 162 003e 6868     		ldr	r0, [r5, #4]
 163 0040 FFF7FEFF 		bl	memcpy
 164              	.LVL21:
 435:Src/SEGGER_RTT.c **** #endif
 165              		.loc 1 435 5 view .LVU47
 435:Src/SEGGER_RTT.c **** #endif
 166              		.loc 1 435 18 is_stmt 0 view .LVU48
 167 0044 EC60     		str	r4, [r5, #12]
 438:Src/SEGGER_RTT.c **** 
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 13


 168              		.loc 1 438 1 view .LVU49
 169 0046 EDE7     		b	.L4
 170              		.cfi_endproc
 171              	.LFE2:
 173              		.section	.text._WriteBlocking,"ax",%progbits
 174              		.align	1
 175              		.syntax unified
 176              		.thumb
 177              		.thumb_func
 178              		.fpu fpv5-d16
 180              	_WriteBlocking:
 181              	.LVL22:
 182              	.LFB1:
 325:Src/SEGGER_RTT.c ****   unsigned NumBytesToWrite;
 183              		.loc 1 325 101 is_stmt 1 view -0
 184              		.cfi_startproc
 185              		@ args = 0, pretend = 0, frame = 0
 186              		@ frame_needed = 0, uses_anonymous_args = 0
 325:Src/SEGGER_RTT.c ****   unsigned NumBytesToWrite;
 187              		.loc 1 325 101 is_stmt 0 view .LVU51
 188 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 189              	.LCFI1:
 190              		.cfi_def_cfa_offset 32
 191              		.cfi_offset 3, -32
 192              		.cfi_offset 4, -28
 193              		.cfi_offset 5, -24
 194              		.cfi_offset 6, -20
 195              		.cfi_offset 7, -16
 196              		.cfi_offset 8, -12
 197              		.cfi_offset 9, -8
 198              		.cfi_offset 14, -4
 199 0004 0646     		mov	r6, r0
 200 0006 8846     		mov	r8, r1
 201 0008 1746     		mov	r7, r2
 326:Src/SEGGER_RTT.c ****   unsigned NumBytesWritten;
 202              		.loc 1 326 3 is_stmt 1 view .LVU52
 327:Src/SEGGER_RTT.c ****   unsigned RdOff;
 203              		.loc 1 327 3 view .LVU53
 328:Src/SEGGER_RTT.c ****   unsigned WrOff;
 204              		.loc 1 328 3 view .LVU54
 329:Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 205              		.loc 1 329 3 view .LVU55
 336:Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 206              		.loc 1 336 3 view .LVU56
 207              	.LVL23:
 337:Src/SEGGER_RTT.c ****   do {
 208              		.loc 1 337 3 view .LVU57
 337:Src/SEGGER_RTT.c ****   do {
 209              		.loc 1 337 9 is_stmt 0 view .LVU58
 210 000a C568     		ldr	r5, [r0, #12]
 211              	.LVL24:
 336:Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 212              		.loc 1 336 19 view .LVU59
 213 000c 4FF00009 		mov	r9, #0
 214 0010 1AE0     		b	.L12
 215              	.LVL25:
 216              	.L9:
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 14


 343:Src/SEGGER_RTT.c ****     }
 217              		.loc 1 343 7 is_stmt 1 view .LVU60
 343:Src/SEGGER_RTT.c ****     }
 218              		.loc 1 343 30 is_stmt 0 view .LVU61
 219 0012 B268     		ldr	r2, [r6, #8]
 343:Src/SEGGER_RTT.c ****     }
 220              		.loc 1 343 62 view .LVU62
 221 0014 641B     		subs	r4, r4, r5
 222              	.LVL26:
 343:Src/SEGGER_RTT.c ****     }
 223              		.loc 1 343 45 view .LVU63
 224 0016 1444     		add	r4, r4, r2
 343:Src/SEGGER_RTT.c ****     }
 225              		.loc 1 343 23 view .LVU64
 226 0018 621E     		subs	r2, r4, #1
 227              	.LVL27:
 228              	.L10:
 345:Src/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 229              		.loc 1 345 5 is_stmt 1 view .LVU65
 345:Src/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 230              		.loc 1 345 23 is_stmt 0 view .LVU66
 231 001a B368     		ldr	r3, [r6, #8]
 232 001c 5C1B     		subs	r4, r3, r5
 345:Src/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 233              		.loc 1 345 21 view .LVU67
 234 001e 9442     		cmp	r4, r2
 235 0020 28BF     		it	cs
 236 0022 1446     		movcs	r4, r2
 237              	.LVL28:
 346:Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 238              		.loc 1 346 5 is_stmt 1 view .LVU68
 346:Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 239              		.loc 1 346 21 is_stmt 0 view .LVU69
 240 0024 BC42     		cmp	r4, r7
 241 0026 28BF     		it	cs
 242 0028 3C46     		movcs	r4, r7
 243              	.LVL29:
 356:Src/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 244              		.loc 1 356 5 is_stmt 1 view .LVU70
 245 002a 7068     		ldr	r0, [r6, #4]
 246 002c 2246     		mov	r2, r4
 247 002e 4146     		mov	r1, r8
 248 0030 2844     		add	r0, r0, r5
 249 0032 FFF7FEFF 		bl	memcpy
 250              	.LVL30:
 357:Src/SEGGER_RTT.c ****     pBuffer         += NumBytesToWrite;
 251              		.loc 1 357 5 view .LVU71
 357:Src/SEGGER_RTT.c ****     pBuffer         += NumBytesToWrite;
 252              		.loc 1 357 21 is_stmt 0 view .LVU72
 253 0036 A144     		add	r9, r9, r4
 254              	.LVL31:
 358:Src/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 255              		.loc 1 358 5 is_stmt 1 view .LVU73
 358:Src/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 256              		.loc 1 358 21 is_stmt 0 view .LVU74
 257 0038 A044     		add	r8, r8, r4
 258              	.LVL32:
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 15


 359:Src/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 259              		.loc 1 359 5 is_stmt 1 view .LVU75
 359:Src/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 260              		.loc 1 359 21 is_stmt 0 view .LVU76
 261 003a 3F1B     		subs	r7, r7, r4
 262              	.LVL33:
 360:Src/SEGGER_RTT.c **** #endif
 263              		.loc 1 360 5 is_stmt 1 view .LVU77
 360:Src/SEGGER_RTT.c **** #endif
 264              		.loc 1 360 21 is_stmt 0 view .LVU78
 265 003c 2544     		add	r5, r5, r4
 266              	.LVL34:
 362:Src/SEGGER_RTT.c ****       WrOff = 0u;
 267              		.loc 1 362 5 is_stmt 1 view .LVU79
 362:Src/SEGGER_RTT.c ****       WrOff = 0u;
 268              		.loc 1 362 23 is_stmt 0 view .LVU80
 269 003e B368     		ldr	r3, [r6, #8]
 362:Src/SEGGER_RTT.c ****       WrOff = 0u;
 270              		.loc 1 362 8 view .LVU81
 271 0040 AB42     		cmp	r3, r5
 272 0042 07D0     		beq	.L15
 273              	.LVL35:
 274              	.L11:
 365:Src/SEGGER_RTT.c ****   } while (NumBytes);
 275              		.loc 1 365 5 is_stmt 1 view .LVU82
 365:Src/SEGGER_RTT.c ****   } while (NumBytes);
 276              		.loc 1 365 18 is_stmt 0 view .LVU83
 277 0044 F560     		str	r5, [r6, #12]
 366:Src/SEGGER_RTT.c ****   //
 278              		.loc 1 366 3 view .LVU84
 279 0046 3FB1     		cbz	r7, .L16
 280              	.LVL36:
 281              	.L12:
 338:Src/SEGGER_RTT.c ****     RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the me
 282              		.loc 1 338 3 is_stmt 1 view .LVU85
 339:Src/SEGGER_RTT.c ****     if (RdOff > WrOff) {
 283              		.loc 1 339 5 view .LVU86
 339:Src/SEGGER_RTT.c ****     if (RdOff > WrOff) {
 284              		.loc 1 339 11 is_stmt 0 view .LVU87
 285 0048 3469     		ldr	r4, [r6, #16]
 286              	.LVL37:
 340:Src/SEGGER_RTT.c ****       NumBytesToWrite = RdOff - WrOff - 1u;
 287              		.loc 1 340 5 is_stmt 1 view .LVU88
 340:Src/SEGGER_RTT.c ****       NumBytesToWrite = RdOff - WrOff - 1u;
 288              		.loc 1 340 8 is_stmt 0 view .LVU89
 289 004a A542     		cmp	r5, r4
 290 004c E1D2     		bcs	.L9
 341:Src/SEGGER_RTT.c ****     } else {
 291              		.loc 1 341 7 is_stmt 1 view .LVU90
 341:Src/SEGGER_RTT.c ****     } else {
 292              		.loc 1 341 31 is_stmt 0 view .LVU91
 293 004e 641B     		subs	r4, r4, r5
 294              	.LVL38:
 341:Src/SEGGER_RTT.c ****     } else {
 295              		.loc 1 341 23 view .LVU92
 296 0050 621E     		subs	r2, r4, #1
 297              	.LVL39:
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 16


 341:Src/SEGGER_RTT.c ****     } else {
 298              		.loc 1 341 23 view .LVU93
 299 0052 E2E7     		b	.L10
 300              	.LVL40:
 301              	.L15:
 363:Src/SEGGER_RTT.c ****     }
 302              		.loc 1 363 13 view .LVU94
 303 0054 0025     		movs	r5, #0
 304              	.LVL41:
 363:Src/SEGGER_RTT.c ****     }
 305              		.loc 1 363 13 view .LVU95
 306 0056 F5E7     		b	.L11
 307              	.LVL42:
 308              	.L16:
 368:Src/SEGGER_RTT.c **** }
 309              		.loc 1 368 3 is_stmt 1 view .LVU96
 369:Src/SEGGER_RTT.c **** 
 310              		.loc 1 369 1 is_stmt 0 view .LVU97
 311 0058 4846     		mov	r0, r9
 312 005a BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 369:Src/SEGGER_RTT.c **** 
 313              		.loc 1 369 1 view .LVU98
 314              		.cfi_endproc
 315              	.LFE1:
 317              		.section	.text._PostTerminalSwitch,"ax",%progbits
 318              		.align	1
 319              		.syntax unified
 320              		.thumb
 321              		.thumb_func
 322              		.fpu fpv5-d16
 324              	_PostTerminalSwitch:
 325              	.LVL43:
 326              	.LFB3:
 453:Src/SEGGER_RTT.c ****   unsigned char ac[2];
 327              		.loc 1 453 88 is_stmt 1 view -0
 328              		.cfi_startproc
 329              		@ args = 0, pretend = 0, frame = 8
 330              		@ frame_needed = 0, uses_anonymous_args = 0
 453:Src/SEGGER_RTT.c ****   unsigned char ac[2];
 331              		.loc 1 453 88 is_stmt 0 view .LVU100
 332 0000 00B5     		push	{lr}
 333              	.LCFI2:
 334              		.cfi_def_cfa_offset 4
 335              		.cfi_offset 14, -4
 336 0002 83B0     		sub	sp, sp, #12
 337              	.LCFI3:
 338              		.cfi_def_cfa_offset 16
 454:Src/SEGGER_RTT.c **** 
 339              		.loc 1 454 3 is_stmt 1 view .LVU101
 456:Src/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 340              		.loc 1 456 3 view .LVU102
 456:Src/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 341              		.loc 1 456 9 is_stmt 0 view .LVU103
 342 0004 FF23     		movs	r3, #255
 343 0006 8DF80430 		strb	r3, [sp, #4]
 457:Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 344              		.loc 1 457 3 is_stmt 1 view .LVU104
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 17


 457:Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 345              		.loc 1 457 23 is_stmt 0 view .LVU105
 346 000a 054B     		ldr	r3, .L19
 347 000c 5B5C     		ldrb	r3, [r3, r1]	@ zero_extendqisi2
 457:Src/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 348              		.loc 1 457 9 view .LVU106
 349 000e 8DF80530 		strb	r3, [sp, #5]
 458:Src/SEGGER_RTT.c **** }
 350              		.loc 1 458 3 is_stmt 1 view .LVU107
 351 0012 0222     		movs	r2, #2
 352 0014 01A9     		add	r1, sp, #4
 353              	.LVL44:
 458:Src/SEGGER_RTT.c **** }
 354              		.loc 1 458 3 is_stmt 0 view .LVU108
 355 0016 FFF7FEFF 		bl	_WriteBlocking
 356              	.LVL45:
 459:Src/SEGGER_RTT.c **** 
 357              		.loc 1 459 1 view .LVU109
 358 001a 03B0     		add	sp, sp, #12
 359              	.LCFI4:
 360              		.cfi_def_cfa_offset 4
 361              		@ sp needed
 362 001c 5DF804FB 		ldr	pc, [sp], #4
 363              	.L20:
 364              		.align	2
 365              	.L19:
 366 0020 00000000 		.word	.LANCHOR0
 367              		.cfi_endproc
 368              	.LFE3:
 370              		.section	.text._DoInit,"ax",%progbits
 371              		.align	1
 372              		.syntax unified
 373              		.thumb
 374              		.thumb_func
 375              		.fpu fpv5-d16
 377              	_DoInit:
 378              	.LFB0:
 270:Src/SEGGER_RTT.c ****   SEGGER_RTT_CB* p;
 379              		.loc 1 270 27 is_stmt 1 view -0
 380              		.cfi_startproc
 381              		@ args = 0, pretend = 0, frame = 0
 382              		@ frame_needed = 0, uses_anonymous_args = 0
 383              		@ link register save eliminated.
 271:Src/SEGGER_RTT.c ****   //
 384              		.loc 1 271 3 view .LVU111
 275:Src/SEGGER_RTT.c ****   p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 385              		.loc 1 275 3 view .LVU112
 386              	.LVL46:
 276:Src/SEGGER_RTT.c ****   p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 387              		.loc 1 276 3 view .LVU113
 276:Src/SEGGER_RTT.c ****   p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 388              		.loc 1 276 25 is_stmt 0 view .LVU114
 389 0000 114B     		ldr	r3, .L22
 390 0002 0322     		movs	r2, #3
 391 0004 1A61     		str	r2, [r3, #16]
 277:Src/SEGGER_RTT.c ****   //
 392              		.loc 1 277 3 is_stmt 1 view .LVU115
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 18


 277:Src/SEGGER_RTT.c ****   //
 393              		.loc 1 277 25 is_stmt 0 view .LVU116
 394 0006 5A61     		str	r2, [r3, #20]
 281:Src/SEGGER_RTT.c ****   p->aUp[0].pBuffer       = _acUpBuffer;
 395              		.loc 1 281 3 is_stmt 1 view .LVU117
 281:Src/SEGGER_RTT.c ****   p->aUp[0].pBuffer       = _acUpBuffer;
 396              		.loc 1 281 27 is_stmt 0 view .LVU118
 397 0008 1049     		ldr	r1, .L22+4
 398 000a 9961     		str	r1, [r3, #24]
 282:Src/SEGGER_RTT.c ****   p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 399              		.loc 1 282 3 is_stmt 1 view .LVU119
 282:Src/SEGGER_RTT.c ****   p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 400              		.loc 1 282 27 is_stmt 0 view .LVU120
 401 000c 104A     		ldr	r2, .L22+8
 402 000e DA61     		str	r2, [r3, #28]
 283:Src/SEGGER_RTT.c ****   p->aUp[0].RdOff         = 0u;
 403              		.loc 1 283 3 is_stmt 1 view .LVU121
 283:Src/SEGGER_RTT.c ****   p->aUp[0].RdOff         = 0u;
 404              		.loc 1 283 27 is_stmt 0 view .LVU122
 405 0010 4FF48062 		mov	r2, #1024
 406 0014 1A62     		str	r2, [r3, #32]
 284:Src/SEGGER_RTT.c ****   p->aUp[0].WrOff         = 0u;
 407              		.loc 1 284 3 is_stmt 1 view .LVU123
 284:Src/SEGGER_RTT.c ****   p->aUp[0].WrOff         = 0u;
 408              		.loc 1 284 27 is_stmt 0 view .LVU124
 409 0016 0022     		movs	r2, #0
 410 0018 9A62     		str	r2, [r3, #40]
 285:Src/SEGGER_RTT.c ****   p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 411              		.loc 1 285 3 is_stmt 1 view .LVU125
 285:Src/SEGGER_RTT.c ****   p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 412              		.loc 1 285 27 is_stmt 0 view .LVU126
 413 001a 5A62     		str	r2, [r3, #36]
 286:Src/SEGGER_RTT.c ****   //
 414              		.loc 1 286 3 is_stmt 1 view .LVU127
 286:Src/SEGGER_RTT.c ****   //
 415              		.loc 1 286 27 is_stmt 0 view .LVU128
 416 001c DA62     		str	r2, [r3, #44]
 290:Src/SEGGER_RTT.c ****   p->aDown[0].pBuffer       = _acDownBuffer;
 417              		.loc 1 290 3 is_stmt 1 view .LVU129
 290:Src/SEGGER_RTT.c ****   p->aDown[0].pBuffer       = _acDownBuffer;
 418              		.loc 1 290 29 is_stmt 0 view .LVU130
 419 001e 1966     		str	r1, [r3, #96]
 291:Src/SEGGER_RTT.c ****   p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 420              		.loc 1 291 3 is_stmt 1 view .LVU131
 291:Src/SEGGER_RTT.c ****   p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 421              		.loc 1 291 29 is_stmt 0 view .LVU132
 422 0020 0C49     		ldr	r1, .L22+12
 423 0022 5966     		str	r1, [r3, #100]
 292:Src/SEGGER_RTT.c ****   p->aDown[0].RdOff         = 0u;
 424              		.loc 1 292 3 is_stmt 1 view .LVU133
 292:Src/SEGGER_RTT.c ****   p->aDown[0].RdOff         = 0u;
 425              		.loc 1 292 29 is_stmt 0 view .LVU134
 426 0024 1021     		movs	r1, #16
 427 0026 9966     		str	r1, [r3, #104]
 293:Src/SEGGER_RTT.c ****   p->aDown[0].WrOff         = 0u;
 428              		.loc 1 293 3 is_stmt 1 view .LVU135
 293:Src/SEGGER_RTT.c ****   p->aDown[0].WrOff         = 0u;
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 19


 429              		.loc 1 293 29 is_stmt 0 view .LVU136
 430 0028 1A67     		str	r2, [r3, #112]
 294:Src/SEGGER_RTT.c ****   p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 431              		.loc 1 294 3 is_stmt 1 view .LVU137
 294:Src/SEGGER_RTT.c ****   p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 432              		.loc 1 294 29 is_stmt 0 view .LVU138
 433 002a DA66     		str	r2, [r3, #108]
 295:Src/SEGGER_RTT.c ****   //
 434              		.loc 1 295 3 is_stmt 1 view .LVU139
 295:Src/SEGGER_RTT.c ****   //
 435              		.loc 1 295 29 is_stmt 0 view .LVU140
 436 002c 5A67     		str	r2, [r3, #116]
 301:Src/SEGGER_RTT.c ****   STRCPY(&p->acID[0], "SEGGER", 7);
 437              		.loc 1 301 3 is_stmt 1 view .LVU141
 438 002e 0A4A     		ldr	r2, .L22+16
 439 0030 1068     		ldr	r0, [r2]
 440 0032 C3F80700 		str	r0, [r3, #7]	@ unaligned
 302:Src/SEGGER_RTT.c ****   p->acID[6] = ' ';
 441              		.loc 1 302 3 view .LVU142
 442 0036 094A     		ldr	r2, .L22+20
 443 0038 92E80300 		ldm	r2, {r0, r1}
 444 003c 1860     		str	r0, [r3]
 445 003e 9980     		strh	r1, [r3, #4]	@ movhi
 303:Src/SEGGER_RTT.c **** }
 446              		.loc 1 303 3 view .LVU143
 303:Src/SEGGER_RTT.c **** }
 447              		.loc 1 303 14 is_stmt 0 view .LVU144
 448 0040 2022     		movs	r2, #32
 449 0042 9A71     		strb	r2, [r3, #6]
 304:Src/SEGGER_RTT.c **** 
 450              		.loc 1 304 1 view .LVU145
 451 0044 7047     		bx	lr
 452              	.L23:
 453 0046 00BF     		.align	2
 454              	.L22:
 455 0048 00000000 		.word	_SEGGER_RTT
 456 004c 00000000 		.word	.LC0
 457 0050 00000000 		.word	.LANCHOR1
 458 0054 00000000 		.word	.LANCHOR2
 459 0058 0C000000 		.word	.LC1
 460 005c 10000000 		.word	.LC2
 461              		.cfi_endproc
 462              	.LFE0:
 464              		.section	.text.SEGGER_RTT_ReadUpBufferNoLock,"ax",%progbits
 465              		.align	1
 466              		.global	SEGGER_RTT_ReadUpBufferNoLock
 467              		.syntax unified
 468              		.thumb
 469              		.thumb_func
 470              		.fpu fpv5-d16
 472              	SEGGER_RTT_ReadUpBufferNoLock:
 473              	.LVL47:
 474              	.LFB5:
 492:Src/SEGGER_RTT.c **** 
 493:Src/SEGGER_RTT.c **** /*********************************************************************
 494:Src/SEGGER_RTT.c **** *
 495:Src/SEGGER_RTT.c **** *       Public code
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 20


 496:Src/SEGGER_RTT.c **** *
 497:Src/SEGGER_RTT.c **** **********************************************************************
 498:Src/SEGGER_RTT.c **** */
 499:Src/SEGGER_RTT.c **** /*********************************************************************
 500:Src/SEGGER_RTT.c **** *
 501:Src/SEGGER_RTT.c **** *       SEGGER_RTT_ReadUpBufferNoLock()
 502:Src/SEGGER_RTT.c **** *
 503:Src/SEGGER_RTT.c **** *  Function description
 504:Src/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 505:Src/SEGGER_RTT.c **** *    which have been previously stored by the application.
 506:Src/SEGGER_RTT.c **** *    Do not lock against interrupts and multiple access.
 507:Src/SEGGER_RTT.c **** *    Used to do the same operation that J-Link does, to transfer 
 508:Src/SEGGER_RTT.c **** *    RTT data via other channels, such as TCP/IP or UART.
 509:Src/SEGGER_RTT.c **** *
 510:Src/SEGGER_RTT.c **** *  Parameters
 511:Src/SEGGER_RTT.c **** *    BufferIndex  Index of Up-buffer to be used.
 512:Src/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-up-
 513:Src/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 514:Src/SEGGER_RTT.c **** *
 515:Src/SEGGER_RTT.c **** *  Return value
 516:Src/SEGGER_RTT.c **** *    Number of bytes that have been read.
 517:Src/SEGGER_RTT.c **** *
 518:Src/SEGGER_RTT.c **** *  Additional information
 519:Src/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
 520:Src/SEGGER_RTT.c **** */
 521:Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 475              		.loc 1 521 96 is_stmt 1 view -0
 476              		.cfi_startproc
 477              		@ args = 0, pretend = 0, frame = 0
 478              		@ frame_needed = 0, uses_anonymous_args = 0
 479              		.loc 1 521 96 is_stmt 0 view .LVU147
 480 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 481              	.LCFI5:
 482              		.cfi_def_cfa_offset 32
 483              		.cfi_offset 4, -32
 484              		.cfi_offset 5, -28
 485              		.cfi_offset 6, -24
 486              		.cfi_offset 7, -20
 487              		.cfi_offset 8, -16
 488              		.cfi_offset 9, -12
 489              		.cfi_offset 10, -8
 490              		.cfi_offset 14, -4
 491 0004 0546     		mov	r5, r0
 492 0006 8846     		mov	r8, r1
 493 0008 9146     		mov	r9, r2
 522:Src/SEGGER_RTT.c ****   unsigned                NumBytesRem;
 494              		.loc 1 522 3 is_stmt 1 view .LVU148
 523:Src/SEGGER_RTT.c ****   unsigned                NumBytesRead;
 495              		.loc 1 523 3 view .LVU149
 524:Src/SEGGER_RTT.c ****   unsigned                RdOff;
 496              		.loc 1 524 3 view .LVU150
 525:Src/SEGGER_RTT.c ****   unsigned                WrOff;
 497              		.loc 1 525 3 view .LVU151
 526:Src/SEGGER_RTT.c ****   unsigned char*          pBuffer;
 498              		.loc 1 526 3 view .LVU152
 527:Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP*   pRing;
 499              		.loc 1 527 3 view .LVU153
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 21


 528:Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 529:Src/SEGGER_RTT.c ****   const char*             pSrc;
 530:Src/SEGGER_RTT.c **** #endif
 531:Src/SEGGER_RTT.c ****   //
 532:Src/SEGGER_RTT.c ****   INIT();
 500              		.loc 1 532 3 view .LVU154
 501              		.loc 1 532 3 view .LVU155
 502 000a 264B     		ldr	r3, .L35
 503 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 504 000e C3B1     		cbz	r3, .L32
 505              	.LVL48:
 506              	.L25:
 533:Src/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aUp[BufferIndex];
 507              		.loc 1 533 3 view .LVU156
 534:Src/SEGGER_RTT.c ****   pBuffer = (unsigned char*)pData;
 508              		.loc 1 534 3 view .LVU157
 535:Src/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 509              		.loc 1 535 3 view .LVU158
 510              		.loc 1 535 9 is_stmt 0 view .LVU159
 511 0010 6A00     		lsls	r2, r5, #1
 512 0012 2A44     		add	r2, r2, r5
 513 0014 D100     		lsls	r1, r2, #3
 514 0016 234B     		ldr	r3, .L35
 515 0018 0B44     		add	r3, r3, r1
 516 001a 9F6A     		ldr	r7, [r3, #40]
 517              	.LVL49:
 536:Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 518              		.loc 1 536 3 is_stmt 1 view .LVU160
 519              		.loc 1 536 9 is_stmt 0 view .LVU161
 520 001c 5C6A     		ldr	r4, [r3, #36]
 521              	.LVL50:
 537:Src/SEGGER_RTT.c ****   NumBytesRead = 0u;
 522              		.loc 1 537 3 is_stmt 1 view .LVU162
 538:Src/SEGGER_RTT.c ****   //
 539:Src/SEGGER_RTT.c ****   // Read from current read position to wrap-around of buffer, first
 540:Src/SEGGER_RTT.c ****   //
 541:Src/SEGGER_RTT.c ****   if (RdOff > WrOff) {
 523              		.loc 1 541 3 view .LVU163
 524              		.loc 1 541 6 is_stmt 0 view .LVU164
 525 001e A742     		cmp	r7, r4
 526 0020 12D8     		bhi	.L33
 537:Src/SEGGER_RTT.c ****   NumBytesRead = 0u;
 527              		.loc 1 537 16 view .LVU165
 528 0022 0026     		movs	r6, #0
 529              	.LVL51:
 530              	.L26:
 542:Src/SEGGER_RTT.c ****     NumBytesRem = pRing->SizeOfBuffer - RdOff;
 543:Src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 544:Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 545:Src/SEGGER_RTT.c ****     pSrc = pRing->pBuffer + RdOff;
 546:Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 547:Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 548:Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 549:Src/SEGGER_RTT.c ****     while (NumBytesRem--) {
 550:Src/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 551:Src/SEGGER_RTT.c ****     };
 552:Src/SEGGER_RTT.c **** #else
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 22


 553:Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 554:Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 555:Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 556:Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 557:Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 558:Src/SEGGER_RTT.c **** #endif
 559:Src/SEGGER_RTT.c ****     //
 560:Src/SEGGER_RTT.c ****     // Handle wrap-around of buffer
 561:Src/SEGGER_RTT.c ****     //
 562:Src/SEGGER_RTT.c ****     if (RdOff == pRing->SizeOfBuffer) {
 563:Src/SEGGER_RTT.c ****       RdOff = 0u;
 564:Src/SEGGER_RTT.c ****     }
 565:Src/SEGGER_RTT.c ****   }
 566:Src/SEGGER_RTT.c ****   //
 567:Src/SEGGER_RTT.c ****   // Read remaining items of buffer
 568:Src/SEGGER_RTT.c ****   //
 569:Src/SEGGER_RTT.c ****   NumBytesRem = WrOff - RdOff;
 531              		.loc 1 569 3 is_stmt 1 view .LVU166
 532              		.loc 1 569 15 is_stmt 0 view .LVU167
 533 0024 E41B     		subs	r4, r4, r7
 534              	.LVL52:
 570:Src/SEGGER_RTT.c ****   NumBytesRem = MIN(NumBytesRem, BufferSize);
 535              		.loc 1 570 3 is_stmt 1 view .LVU168
 536              		.loc 1 570 15 is_stmt 0 view .LVU169
 537 0026 4C45     		cmp	r4, r9
 538 0028 28BF     		it	cs
 539 002a 4C46     		movcs	r4, r9
 540              	.LVL53:
 571:Src/SEGGER_RTT.c ****   if (NumBytesRem > 0u) {
 541              		.loc 1 571 3 is_stmt 1 view .LVU170
 542              		.loc 1 571 6 is_stmt 0 view .LVU171
 543 002c 54BB     		cbnz	r4, .L34
 544              	.LVL54:
 545              	.L27:
 572:Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 573:Src/SEGGER_RTT.c ****     pSrc = pRing->pBuffer + RdOff;
 574:Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 575:Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 576:Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 577:Src/SEGGER_RTT.c ****     while (NumBytesRem--) {
 578:Src/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 579:Src/SEGGER_RTT.c ****     };
 580:Src/SEGGER_RTT.c **** #else
 581:Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 582:Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 583:Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 584:Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 585:Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 586:Src/SEGGER_RTT.c **** #endif
 587:Src/SEGGER_RTT.c ****   }
 588:Src/SEGGER_RTT.c ****   //
 589:Src/SEGGER_RTT.c ****   // Update read offset of buffer
 590:Src/SEGGER_RTT.c ****   //
 591:Src/SEGGER_RTT.c ****   if (NumBytesRead) {
 546              		.loc 1 591 3 is_stmt 1 view .LVU172
 547              		.loc 1 591 6 is_stmt 0 view .LVU173
 548 002e 2EB1     		cbz	r6, .L24
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 23


 592:Src/SEGGER_RTT.c ****     pRing->RdOff = RdOff;
 549              		.loc 1 592 5 is_stmt 1 view .LVU174
 550              		.loc 1 592 18 is_stmt 0 view .LVU175
 551 0030 05EB4500 		add	r0, r5, r5, lsl #1
 552 0034 C200     		lsls	r2, r0, #3
 553 0036 1B4B     		ldr	r3, .L35
 554 0038 1344     		add	r3, r3, r2
 555 003a 9F62     		str	r7, [r3, #40]
 593:Src/SEGGER_RTT.c ****   }
 594:Src/SEGGER_RTT.c ****   //
 595:Src/SEGGER_RTT.c ****   return NumBytesRead;
 556              		.loc 1 595 3 is_stmt 1 view .LVU176
 557              	.L24:
 596:Src/SEGGER_RTT.c **** }
 558              		.loc 1 596 1 is_stmt 0 view .LVU177
 559 003c 3046     		mov	r0, r6
 560 003e BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 561              	.LVL55:
 562              	.L32:
 532:Src/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aUp[BufferIndex];
 563              		.loc 1 532 3 is_stmt 1 discriminator 1 view .LVU178
 564 0042 FFF7FEFF 		bl	_DoInit
 565              	.LVL56:
 532:Src/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aUp[BufferIndex];
 566              		.loc 1 532 3 is_stmt 0 discriminator 1 view .LVU179
 567 0046 E3E7     		b	.L25
 568              	.LVL57:
 569              	.L33:
 542:Src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 570              		.loc 1 542 5 is_stmt 1 view .LVU180
 542:Src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 571              		.loc 1 542 24 is_stmt 0 view .LVU181
 572 0048 164A     		ldr	r2, .L35
 573 004a 8A46     		mov	r10, r1
 574 004c 9244     		add	r10, r10, r2
 575 004e DAF82060 		ldr	r6, [r10, #32]
 542:Src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 576              		.loc 1 542 17 view .LVU182
 577 0052 F61B     		subs	r6, r6, r7
 578              	.LVL58:
 543:Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 579              		.loc 1 543 5 is_stmt 1 view .LVU183
 543:Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 580              		.loc 1 543 17 is_stmt 0 view .LVU184
 581 0054 4E45     		cmp	r6, r9
 582 0056 28BF     		it	cs
 583 0058 4E46     		movcs	r6, r9
 584              	.LVL59:
 553:Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 585              		.loc 1 553 5 is_stmt 1 view .LVU185
 586 005a 6B1C     		adds	r3, r5, #1
 587 005c 03EB4303 		add	r3, r3, r3, lsl #1
 588 0060 D900     		lsls	r1, r3, #3
 589 0062 0A44     		add	r2, r2, r1
 590 0064 5168     		ldr	r1, [r2, #4]
 591 0066 3246     		mov	r2, r6
 592 0068 3944     		add	r1, r1, r7
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 24


 593 006a 4046     		mov	r0, r8
 594 006c FFF7FEFF 		bl	memcpy
 595              	.LVL60:
 554:Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 596              		.loc 1 554 5 view .LVU186
 555:Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 597              		.loc 1 555 5 view .LVU187
 555:Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 598              		.loc 1 555 18 is_stmt 0 view .LVU188
 599 0070 B044     		add	r8, r8, r6
 600              	.LVL61:
 556:Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 601              		.loc 1 556 5 is_stmt 1 view .LVU189
 556:Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 602              		.loc 1 556 18 is_stmt 0 view .LVU190
 603 0072 A9EB0609 		sub	r9, r9, r6
 604              	.LVL62:
 557:Src/SEGGER_RTT.c **** #endif
 605              		.loc 1 557 5 is_stmt 1 view .LVU191
 557:Src/SEGGER_RTT.c **** #endif
 606              		.loc 1 557 18 is_stmt 0 view .LVU192
 607 0076 3744     		add	r7, r7, r6
 608              	.LVL63:
 562:Src/SEGGER_RTT.c ****       RdOff = 0u;
 609              		.loc 1 562 5 is_stmt 1 view .LVU193
 562:Src/SEGGER_RTT.c ****       RdOff = 0u;
 610              		.loc 1 562 23 is_stmt 0 view .LVU194
 611 0078 DAF82030 		ldr	r3, [r10, #32]
 562:Src/SEGGER_RTT.c ****       RdOff = 0u;
 612              		.loc 1 562 8 view .LVU195
 613 007c BB42     		cmp	r3, r7
 614 007e D1D1     		bne	.L26
 563:Src/SEGGER_RTT.c ****     }
 615              		.loc 1 563 13 view .LVU196
 616 0080 0027     		movs	r7, #0
 617              	.LVL64:
 563:Src/SEGGER_RTT.c ****     }
 618              		.loc 1 563 13 view .LVU197
 619 0082 CFE7     		b	.L26
 620              	.LVL65:
 621              	.L34:
 581:Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 622              		.loc 1 581 5 is_stmt 1 view .LVU198
 623 0084 6B1C     		adds	r3, r5, #1
 624 0086 03EB4303 		add	r3, r3, r3, lsl #1
 625 008a DA00     		lsls	r2, r3, #3
 626 008c 054B     		ldr	r3, .L35
 627 008e 1344     		add	r3, r3, r2
 628 0090 5968     		ldr	r1, [r3, #4]
 629 0092 2246     		mov	r2, r4
 630 0094 3944     		add	r1, r1, r7
 631 0096 4046     		mov	r0, r8
 632 0098 FFF7FEFF 		bl	memcpy
 633              	.LVL66:
 582:Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 634              		.loc 1 582 5 view .LVU199
 582:Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 25


 635              		.loc 1 582 18 is_stmt 0 view .LVU200
 636 009c 2644     		add	r6, r6, r4
 637              	.LVL67:
 583:Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 638              		.loc 1 583 5 is_stmt 1 view .LVU201
 584:Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 639              		.loc 1 584 5 view .LVU202
 585:Src/SEGGER_RTT.c **** #endif
 640              		.loc 1 585 5 view .LVU203
 585:Src/SEGGER_RTT.c **** #endif
 641              		.loc 1 585 18 is_stmt 0 view .LVU204
 642 009e 2744     		add	r7, r7, r4
 643              	.LVL68:
 585:Src/SEGGER_RTT.c **** #endif
 644              		.loc 1 585 18 view .LVU205
 645 00a0 C5E7     		b	.L27
 646              	.L36:
 647 00a2 00BF     		.align	2
 648              	.L35:
 649 00a4 00000000 		.word	_SEGGER_RTT
 650              		.cfi_endproc
 651              	.LFE5:
 653              		.section	.text.SEGGER_RTT_ReadNoLock,"ax",%progbits
 654              		.align	1
 655              		.global	SEGGER_RTT_ReadNoLock
 656              		.syntax unified
 657              		.thumb
 658              		.thumb_func
 659              		.fpu fpv5-d16
 661              	SEGGER_RTT_ReadNoLock:
 662              	.LVL69:
 663              	.LFB6:
 597:Src/SEGGER_RTT.c **** 
 598:Src/SEGGER_RTT.c **** /*********************************************************************
 599:Src/SEGGER_RTT.c **** *
 600:Src/SEGGER_RTT.c **** *       SEGGER_RTT_ReadNoLock()
 601:Src/SEGGER_RTT.c **** *
 602:Src/SEGGER_RTT.c **** *  Function description
 603:Src/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 604:Src/SEGGER_RTT.c **** *    which have been previously stored by the host.
 605:Src/SEGGER_RTT.c **** *    Do not lock against interrupts and multiple access.
 606:Src/SEGGER_RTT.c **** *
 607:Src/SEGGER_RTT.c **** *  Parameters
 608:Src/SEGGER_RTT.c **** *    BufferIndex  Index of Down-buffer to be used (e.g. 0 for "Terminal").
 609:Src/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-dow
 610:Src/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 611:Src/SEGGER_RTT.c **** *
 612:Src/SEGGER_RTT.c **** *  Return value
 613:Src/SEGGER_RTT.c **** *    Number of bytes that have been read.
 614:Src/SEGGER_RTT.c **** */
 615:Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 664              		.loc 1 615 88 is_stmt 1 view -0
 665              		.cfi_startproc
 666              		@ args = 0, pretend = 0, frame = 0
 667              		@ frame_needed = 0, uses_anonymous_args = 0
 668              		.loc 1 615 88 is_stmt 0 view .LVU207
 669 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 26


 670              	.LCFI6:
 671              		.cfi_def_cfa_offset 32
 672              		.cfi_offset 4, -32
 673              		.cfi_offset 5, -28
 674              		.cfi_offset 6, -24
 675              		.cfi_offset 7, -20
 676              		.cfi_offset 8, -16
 677              		.cfi_offset 9, -12
 678              		.cfi_offset 10, -8
 679              		.cfi_offset 14, -4
 680 0004 0546     		mov	r5, r0
 681 0006 8846     		mov	r8, r1
 682 0008 9146     		mov	r9, r2
 616:Src/SEGGER_RTT.c ****   unsigned                NumBytesRem;
 683              		.loc 1 616 3 is_stmt 1 view .LVU208
 617:Src/SEGGER_RTT.c ****   unsigned                NumBytesRead;
 684              		.loc 1 617 3 view .LVU209
 618:Src/SEGGER_RTT.c ****   unsigned                RdOff;
 685              		.loc 1 618 3 view .LVU210
 619:Src/SEGGER_RTT.c ****   unsigned                WrOff;
 686              		.loc 1 619 3 view .LVU211
 620:Src/SEGGER_RTT.c ****   unsigned char*          pBuffer;
 687              		.loc 1 620 3 view .LVU212
 621:Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
 688              		.loc 1 621 3 view .LVU213
 622:Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 623:Src/SEGGER_RTT.c ****   const char*             pSrc;
 624:Src/SEGGER_RTT.c **** #endif
 625:Src/SEGGER_RTT.c ****   //
 626:Src/SEGGER_RTT.c ****   INIT();
 689              		.loc 1 626 3 view .LVU214
 690              		.loc 1 626 3 view .LVU215
 691 000a 234B     		ldr	r3, .L48
 692 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 693 000e C3B1     		cbz	r3, .L45
 694              	.LVL70:
 695              	.L38:
 627:Src/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aDown[BufferIndex];
 696              		.loc 1 627 3 view .LVU216
 628:Src/SEGGER_RTT.c ****   pBuffer = (unsigned char*)pData;
 697              		.loc 1 628 3 view .LVU217
 629:Src/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 698              		.loc 1 629 3 view .LVU218
 699              		.loc 1 629 9 is_stmt 0 view .LVU219
 700 0010 6A00     		lsls	r2, r5, #1
 701 0012 2A44     		add	r2, r2, r5
 702 0014 D100     		lsls	r1, r2, #3
 703 0016 204B     		ldr	r3, .L48
 704 0018 0B44     		add	r3, r3, r1
 705 001a 1F6F     		ldr	r7, [r3, #112]
 706              	.LVL71:
 630:Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 707              		.loc 1 630 3 is_stmt 1 view .LVU220
 708              		.loc 1 630 9 is_stmt 0 view .LVU221
 709 001c DC6E     		ldr	r4, [r3, #108]
 710              	.LVL72:
 631:Src/SEGGER_RTT.c ****   NumBytesRead = 0u;
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 27


 711              		.loc 1 631 3 is_stmt 1 view .LVU222
 632:Src/SEGGER_RTT.c ****   //
 633:Src/SEGGER_RTT.c ****   // Read from current read position to wrap-around of buffer, first
 634:Src/SEGGER_RTT.c ****   //
 635:Src/SEGGER_RTT.c ****   if (RdOff > WrOff) {
 712              		.loc 1 635 3 view .LVU223
 713              		.loc 1 635 6 is_stmt 0 view .LVU224
 714 001e A742     		cmp	r7, r4
 715 0020 12D8     		bhi	.L46
 631:Src/SEGGER_RTT.c ****   NumBytesRead = 0u;
 716              		.loc 1 631 16 view .LVU225
 717 0022 0026     		movs	r6, #0
 718              	.LVL73:
 719              	.L39:
 636:Src/SEGGER_RTT.c ****     NumBytesRem = pRing->SizeOfBuffer - RdOff;
 637:Src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 638:Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 639:Src/SEGGER_RTT.c ****     pSrc = pRing->pBuffer + RdOff;
 640:Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 641:Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 642:Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 643:Src/SEGGER_RTT.c ****     while (NumBytesRem--) {
 644:Src/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 645:Src/SEGGER_RTT.c ****     };
 646:Src/SEGGER_RTT.c **** #else
 647:Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 648:Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 649:Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 650:Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 651:Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 652:Src/SEGGER_RTT.c **** #endif
 653:Src/SEGGER_RTT.c ****     //
 654:Src/SEGGER_RTT.c ****     // Handle wrap-around of buffer
 655:Src/SEGGER_RTT.c ****     //
 656:Src/SEGGER_RTT.c ****     if (RdOff == pRing->SizeOfBuffer) {
 657:Src/SEGGER_RTT.c ****       RdOff = 0u;
 658:Src/SEGGER_RTT.c ****     }
 659:Src/SEGGER_RTT.c ****   }
 660:Src/SEGGER_RTT.c ****   //
 661:Src/SEGGER_RTT.c ****   // Read remaining items of buffer
 662:Src/SEGGER_RTT.c ****   //
 663:Src/SEGGER_RTT.c ****   NumBytesRem = WrOff - RdOff;
 720              		.loc 1 663 3 is_stmt 1 view .LVU226
 721              		.loc 1 663 15 is_stmt 0 view .LVU227
 722 0024 E41B     		subs	r4, r4, r7
 723              	.LVL74:
 664:Src/SEGGER_RTT.c ****   NumBytesRem = MIN(NumBytesRem, BufferSize);
 724              		.loc 1 664 3 is_stmt 1 view .LVU228
 725              		.loc 1 664 15 is_stmt 0 view .LVU229
 726 0026 4C45     		cmp	r4, r9
 727 0028 28BF     		it	cs
 728 002a 4C46     		movcs	r4, r9
 729              	.LVL75:
 665:Src/SEGGER_RTT.c ****   if (NumBytesRem > 0u) {
 730              		.loc 1 665 3 is_stmt 1 view .LVU230
 731              		.loc 1 665 6 is_stmt 0 view .LVU231
 732 002c 34BB     		cbnz	r4, .L47
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 28


 733              	.LVL76:
 734              	.L40:
 666:Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 667:Src/SEGGER_RTT.c ****     pSrc = pRing->pBuffer + RdOff;
 668:Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 669:Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 670:Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 671:Src/SEGGER_RTT.c ****     while (NumBytesRem--) {
 672:Src/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 673:Src/SEGGER_RTT.c ****     };
 674:Src/SEGGER_RTT.c **** #else
 675:Src/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 676:Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 677:Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 678:Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 679:Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 680:Src/SEGGER_RTT.c **** #endif
 681:Src/SEGGER_RTT.c ****   }
 682:Src/SEGGER_RTT.c ****   if (NumBytesRead) {
 735              		.loc 1 682 3 is_stmt 1 view .LVU232
 736              		.loc 1 682 6 is_stmt 0 view .LVU233
 737 002e 2EB1     		cbz	r6, .L37
 683:Src/SEGGER_RTT.c ****     pRing->RdOff = RdOff;
 738              		.loc 1 683 5 is_stmt 1 view .LVU234
 739              		.loc 1 683 18 is_stmt 0 view .LVU235
 740 0030 05EB4500 		add	r0, r5, r5, lsl #1
 741 0034 C200     		lsls	r2, r0, #3
 742 0036 184B     		ldr	r3, .L48
 743 0038 1344     		add	r3, r3, r2
 744 003a 1F67     		str	r7, [r3, #112]
 684:Src/SEGGER_RTT.c ****   }
 685:Src/SEGGER_RTT.c ****   //
 686:Src/SEGGER_RTT.c ****   return NumBytesRead;
 745              		.loc 1 686 3 is_stmt 1 view .LVU236
 746              	.L37:
 687:Src/SEGGER_RTT.c **** }
 747              		.loc 1 687 1 is_stmt 0 view .LVU237
 748 003c 3046     		mov	r0, r6
 749 003e BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 750              	.LVL77:
 751              	.L45:
 626:Src/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aDown[BufferIndex];
 752              		.loc 1 626 3 is_stmt 1 discriminator 1 view .LVU238
 753 0042 FFF7FEFF 		bl	_DoInit
 754              	.LVL78:
 626:Src/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aDown[BufferIndex];
 755              		.loc 1 626 3 is_stmt 0 discriminator 1 view .LVU239
 756 0046 E3E7     		b	.L38
 757              	.LVL79:
 758              	.L46:
 636:Src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 759              		.loc 1 636 5 is_stmt 1 view .LVU240
 636:Src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 760              		.loc 1 636 24 is_stmt 0 view .LVU241
 761 0048 134B     		ldr	r3, .L48
 762 004a 03EB010A 		add	r10, r3, r1
 763 004e DAF86860 		ldr	r6, [r10, #104]
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 29


 636:Src/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 764              		.loc 1 636 17 view .LVU242
 765 0052 F61B     		subs	r6, r6, r7
 766              	.LVL80:
 637:Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 767              		.loc 1 637 5 is_stmt 1 view .LVU243
 637:Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 768              		.loc 1 637 17 is_stmt 0 view .LVU244
 769 0054 4E45     		cmp	r6, r9
 770 0056 28BF     		it	cs
 771 0058 4E46     		movcs	r6, r9
 772              	.LVL81:
 647:Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 773              		.loc 1 647 5 is_stmt 1 view .LVU245
 774 005a DAF86410 		ldr	r1, [r10, #100]
 775 005e 3246     		mov	r2, r6
 776 0060 3944     		add	r1, r1, r7
 777 0062 4046     		mov	r0, r8
 778 0064 FFF7FEFF 		bl	memcpy
 779              	.LVL82:
 648:Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 780              		.loc 1 648 5 view .LVU246
 649:Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 781              		.loc 1 649 5 view .LVU247
 649:Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 782              		.loc 1 649 18 is_stmt 0 view .LVU248
 783 0068 B044     		add	r8, r8, r6
 784              	.LVL83:
 650:Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 785              		.loc 1 650 5 is_stmt 1 view .LVU249
 650:Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 786              		.loc 1 650 18 is_stmt 0 view .LVU250
 787 006a A9EB0609 		sub	r9, r9, r6
 788              	.LVL84:
 651:Src/SEGGER_RTT.c **** #endif
 789              		.loc 1 651 5 is_stmt 1 view .LVU251
 651:Src/SEGGER_RTT.c **** #endif
 790              		.loc 1 651 18 is_stmt 0 view .LVU252
 791 006e 3744     		add	r7, r7, r6
 792              	.LVL85:
 656:Src/SEGGER_RTT.c ****       RdOff = 0u;
 793              		.loc 1 656 5 is_stmt 1 view .LVU253
 656:Src/SEGGER_RTT.c ****       RdOff = 0u;
 794              		.loc 1 656 23 is_stmt 0 view .LVU254
 795 0070 DAF86830 		ldr	r3, [r10, #104]
 656:Src/SEGGER_RTT.c ****       RdOff = 0u;
 796              		.loc 1 656 8 view .LVU255
 797 0074 BB42     		cmp	r3, r7
 798 0076 D5D1     		bne	.L39
 657:Src/SEGGER_RTT.c ****     }
 799              		.loc 1 657 13 view .LVU256
 800 0078 0027     		movs	r7, #0
 801              	.LVL86:
 657:Src/SEGGER_RTT.c ****     }
 802              		.loc 1 657 13 view .LVU257
 803 007a D3E7     		b	.L39
 804              	.LVL87:
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 30


 805              	.L47:
 675:Src/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 806              		.loc 1 675 5 is_stmt 1 view .LVU258
 807 007c 05EB4503 		add	r3, r5, r5, lsl #1
 808 0080 DA00     		lsls	r2, r3, #3
 809 0082 054B     		ldr	r3, .L48
 810 0084 1344     		add	r3, r3, r2
 811 0086 596E     		ldr	r1, [r3, #100]
 812 0088 2246     		mov	r2, r4
 813 008a 3944     		add	r1, r1, r7
 814 008c 4046     		mov	r0, r8
 815 008e FFF7FEFF 		bl	memcpy
 816              	.LVL88:
 676:Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 817              		.loc 1 676 5 view .LVU259
 676:Src/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 818              		.loc 1 676 18 is_stmt 0 view .LVU260
 819 0092 2644     		add	r6, r6, r4
 820              	.LVL89:
 677:Src/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 821              		.loc 1 677 5 is_stmt 1 view .LVU261
 678:Src/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 822              		.loc 1 678 5 view .LVU262
 679:Src/SEGGER_RTT.c **** #endif
 823              		.loc 1 679 5 view .LVU263
 679:Src/SEGGER_RTT.c **** #endif
 824              		.loc 1 679 18 is_stmt 0 view .LVU264
 825 0094 2744     		add	r7, r7, r4
 826              	.LVL90:
 679:Src/SEGGER_RTT.c **** #endif
 827              		.loc 1 679 18 view .LVU265
 828 0096 CAE7     		b	.L40
 829              	.L49:
 830              		.align	2
 831              	.L48:
 832 0098 00000000 		.word	_SEGGER_RTT
 833              		.cfi_endproc
 834              	.LFE6:
 836              		.section	.text.SEGGER_RTT_ReadUpBuffer,"ax",%progbits
 837              		.align	1
 838              		.global	SEGGER_RTT_ReadUpBuffer
 839              		.syntax unified
 840              		.thumb
 841              		.thumb_func
 842              		.fpu fpv5-d16
 844              	SEGGER_RTT_ReadUpBuffer:
 845              	.LVL91:
 846              	.LFB7:
 688:Src/SEGGER_RTT.c **** 
 689:Src/SEGGER_RTT.c **** /*********************************************************************
 690:Src/SEGGER_RTT.c **** *
 691:Src/SEGGER_RTT.c **** *       SEGGER_RTT_ReadUpBuffer
 692:Src/SEGGER_RTT.c **** *
 693:Src/SEGGER_RTT.c **** *  Function description
 694:Src/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 695:Src/SEGGER_RTT.c **** *    which have been previously stored by the application.
 696:Src/SEGGER_RTT.c **** *    Used to do the same operation that J-Link does, to transfer 
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 31


 697:Src/SEGGER_RTT.c **** *    RTT data via other channels, such as TCP/IP or UART.
 698:Src/SEGGER_RTT.c **** *
 699:Src/SEGGER_RTT.c **** *  Parameters
 700:Src/SEGGER_RTT.c **** *    BufferIndex  Index of Up-buffer to be used.
 701:Src/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-up-
 702:Src/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 703:Src/SEGGER_RTT.c **** *
 704:Src/SEGGER_RTT.c **** *  Return value
 705:Src/SEGGER_RTT.c **** *    Number of bytes that have been read.
 706:Src/SEGGER_RTT.c **** *
 707:Src/SEGGER_RTT.c **** *  Additional information
 708:Src/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
 709:Src/SEGGER_RTT.c **** *    This function locks against all other RTT operations. I.e. during
 710:Src/SEGGER_RTT.c **** *    the read operation, writing is also locked.
 711:Src/SEGGER_RTT.c **** *    If only one consumer reads from the up buffer, 
 712:Src/SEGGER_RTT.c **** *    call sEGGER_RTT_ReadUpBufferNoLock() instead.
 713:Src/SEGGER_RTT.c **** */
 714:Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_ReadUpBuffer(unsigned BufferIndex, void* pBuffer, unsigned BufferSize) {
 847              		.loc 1 714 92 is_stmt 1 view -0
 848              		.cfi_startproc
 849              		@ args = 0, pretend = 0, frame = 0
 850              		@ frame_needed = 0, uses_anonymous_args = 0
 851              		.loc 1 714 92 is_stmt 0 view .LVU267
 852 0000 10B5     		push	{r4, lr}
 853              	.LCFI7:
 854              		.cfi_def_cfa_offset 8
 855              		.cfi_offset 4, -8
 856              		.cfi_offset 14, -4
 857 0002 0B46     		mov	r3, r1
 715:Src/SEGGER_RTT.c ****   unsigned NumBytesRead;
 858              		.loc 1 715 3 is_stmt 1 view .LVU268
 859              	.LBB2:
 716:Src/SEGGER_RTT.c ****   //
 717:Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 860              		.loc 1 717 3 view .LVU269
 861              		.loc 1 717 3 view .LVU270
 862              		.syntax unified
 863              	@ 717 "Src/SEGGER_RTT.c" 1
 864 0004 EFF31184 		mrs   r4, basepri  
 865 0008 4FF02001 		mov   r1, #32       
 866 000c 81F31188 		msr   basepri, r1  
 867              		
 868              	@ 0 "" 2
 869              	.LVL92:
 870              		.loc 1 717 20 view .LVU271
 718:Src/SEGGER_RTT.c ****   //
 719:Src/SEGGER_RTT.c ****   // Call the non-locking read function
 720:Src/SEGGER_RTT.c ****   //
 721:Src/SEGGER_RTT.c ****   NumBytesRead = SEGGER_RTT_ReadUpBufferNoLock(BufferIndex, pBuffer, BufferSize);
 871              		.loc 1 721 3 view .LVU272
 872              		.loc 1 721 18 is_stmt 0 view .LVU273
 873              		.thumb
 874              		.syntax unified
 875 0010 1946     		mov	r1, r3
 876 0012 FFF7FEFF 		bl	SEGGER_RTT_ReadUpBufferNoLock
 877              	.LVL93:
 722:Src/SEGGER_RTT.c ****   //
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 32


 723:Src/SEGGER_RTT.c ****   // Finish up.
 724:Src/SEGGER_RTT.c ****   //
 725:Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 878              		.loc 1 725 3 is_stmt 1 view .LVU274
 879              		.syntax unified
 880              	@ 725 "Src/SEGGER_RTT.c" 1
 881 0016 84F31188 		msr   basepri, r4  
 882              		
 883              	@ 0 "" 2
 884              		.thumb
 885              		.syntax unified
 886              	.LBE2:
 887              		.loc 1 725 22 view .LVU275
 726:Src/SEGGER_RTT.c ****   //
 727:Src/SEGGER_RTT.c ****   return NumBytesRead;
 888              		.loc 1 727 3 view .LVU276
 728:Src/SEGGER_RTT.c **** }
 889              		.loc 1 728 1 is_stmt 0 view .LVU277
 890 001a 10BD     		pop	{r4, pc}
 891              		.loc 1 728 1 view .LVU278
 892              		.cfi_endproc
 893              	.LFE7:
 895              		.section	.text.SEGGER_RTT_Read,"ax",%progbits
 896              		.align	1
 897              		.global	SEGGER_RTT_Read
 898              		.syntax unified
 899              		.thumb
 900              		.thumb_func
 901              		.fpu fpv5-d16
 903              	SEGGER_RTT_Read:
 904              	.LVL94:
 905              	.LFB8:
 729:Src/SEGGER_RTT.c **** 
 730:Src/SEGGER_RTT.c **** /*********************************************************************
 731:Src/SEGGER_RTT.c **** *
 732:Src/SEGGER_RTT.c **** *       SEGGER_RTT_Read
 733:Src/SEGGER_RTT.c **** *
 734:Src/SEGGER_RTT.c **** *  Function description
 735:Src/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 736:Src/SEGGER_RTT.c **** *    which have been previously stored by the host.
 737:Src/SEGGER_RTT.c **** *
 738:Src/SEGGER_RTT.c **** *  Parameters
 739:Src/SEGGER_RTT.c **** *    BufferIndex  Index of Down-buffer to be used (e.g. 0 for "Terminal").
 740:Src/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-dow
 741:Src/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 742:Src/SEGGER_RTT.c **** *
 743:Src/SEGGER_RTT.c **** *  Return value
 744:Src/SEGGER_RTT.c **** *    Number of bytes that have been read.
 745:Src/SEGGER_RTT.c **** */
 746:Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_Read(unsigned BufferIndex, void* pBuffer, unsigned BufferSize) {
 906              		.loc 1 746 84 is_stmt 1 view -0
 907              		.cfi_startproc
 908              		@ args = 0, pretend = 0, frame = 0
 909              		@ frame_needed = 0, uses_anonymous_args = 0
 910              		.loc 1 746 84 is_stmt 0 view .LVU280
 911 0000 10B5     		push	{r4, lr}
 912              	.LCFI8:
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 33


 913              		.cfi_def_cfa_offset 8
 914              		.cfi_offset 4, -8
 915              		.cfi_offset 14, -4
 916 0002 0B46     		mov	r3, r1
 747:Src/SEGGER_RTT.c ****   unsigned NumBytesRead;
 917              		.loc 1 747 3 is_stmt 1 view .LVU281
 918              	.LBB3:
 748:Src/SEGGER_RTT.c ****   //
 749:Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 919              		.loc 1 749 3 view .LVU282
 920              		.loc 1 749 3 view .LVU283
 921              		.syntax unified
 922              	@ 749 "Src/SEGGER_RTT.c" 1
 923 0004 EFF31184 		mrs   r4, basepri  
 924 0008 4FF02001 		mov   r1, #32       
 925 000c 81F31188 		msr   basepri, r1  
 926              		
 927              	@ 0 "" 2
 928              	.LVL95:
 929              		.loc 1 749 20 view .LVU284
 750:Src/SEGGER_RTT.c ****   //
 751:Src/SEGGER_RTT.c ****   // Call the non-locking read function
 752:Src/SEGGER_RTT.c ****   //
 753:Src/SEGGER_RTT.c ****   NumBytesRead = SEGGER_RTT_ReadNoLock(BufferIndex, pBuffer, BufferSize);
 930              		.loc 1 753 3 view .LVU285
 931              		.loc 1 753 18 is_stmt 0 view .LVU286
 932              		.thumb
 933              		.syntax unified
 934 0010 1946     		mov	r1, r3
 935 0012 FFF7FEFF 		bl	SEGGER_RTT_ReadNoLock
 936              	.LVL96:
 754:Src/SEGGER_RTT.c ****   //
 755:Src/SEGGER_RTT.c ****   // Finish up.
 756:Src/SEGGER_RTT.c ****   //
 757:Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 937              		.loc 1 757 3 is_stmt 1 view .LVU287
 938              		.syntax unified
 939              	@ 757 "Src/SEGGER_RTT.c" 1
 940 0016 84F31188 		msr   basepri, r4  
 941              		
 942              	@ 0 "" 2
 943              		.thumb
 944              		.syntax unified
 945              	.LBE3:
 946              		.loc 1 757 22 view .LVU288
 758:Src/SEGGER_RTT.c ****   //
 759:Src/SEGGER_RTT.c ****   return NumBytesRead;
 947              		.loc 1 759 3 view .LVU289
 760:Src/SEGGER_RTT.c **** }
 948              		.loc 1 760 1 is_stmt 0 view .LVU290
 949 001a 10BD     		pop	{r4, pc}
 950              		.loc 1 760 1 view .LVU291
 951              		.cfi_endproc
 952              	.LFE8:
 954              		.section	.text.SEGGER_RTT_WriteWithOverwriteNoLock,"ax",%progbits
 955              		.align	1
 956              		.global	SEGGER_RTT_WriteWithOverwriteNoLock
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 34


 957              		.syntax unified
 958              		.thumb
 959              		.thumb_func
 960              		.fpu fpv5-d16
 962              	SEGGER_RTT_WriteWithOverwriteNoLock:
 963              	.LVL97:
 964              	.LFB9:
 761:Src/SEGGER_RTT.c **** 
 762:Src/SEGGER_RTT.c **** /*********************************************************************
 763:Src/SEGGER_RTT.c **** *
 764:Src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteWithOverwriteNoLock
 765:Src/SEGGER_RTT.c **** *
 766:Src/SEGGER_RTT.c **** *  Function description
 767:Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
 768:Src/SEGGER_RTT.c **** *    control block.
 769:Src/SEGGER_RTT.c **** *    SEGGER_RTT_WriteWithOverwriteNoLock does not lock the application 
 770:Src/SEGGER_RTT.c **** *    and overwrites data if the data does not fit into the buffer.
 771:Src/SEGGER_RTT.c **** *
 772:Src/SEGGER_RTT.c **** *  Parameters
 773:Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
 774:Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 775:Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 776:Src/SEGGER_RTT.c **** *
 777:Src/SEGGER_RTT.c **** *  Notes
 778:Src/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, data is overwritten.
 779:Src/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
 780:Src/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
 781:Src/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
 782:Src/SEGGER_RTT.c **** *    (3) Do not use SEGGER_RTT_WriteWithOverwriteNoLock if a J-Link 
 783:Src/SEGGER_RTT.c **** *        connection reads RTT data.
 784:Src/SEGGER_RTT.c **** */
 785:Src/SEGGER_RTT.c **** void SEGGER_RTT_WriteWithOverwriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumByt
 965              		.loc 1 785 104 is_stmt 1 view -0
 966              		.cfi_startproc
 967              		@ args = 0, pretend = 0, frame = 0
 968              		@ frame_needed = 0, uses_anonymous_args = 0
 969              		.loc 1 785 104 is_stmt 0 view .LVU293
 970 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 971              	.LCFI9:
 972              		.cfi_def_cfa_offset 32
 973              		.cfi_offset 3, -32
 974              		.cfi_offset 4, -28
 975              		.cfi_offset 5, -24
 976              		.cfi_offset 6, -20
 977              		.cfi_offset 7, -16
 978              		.cfi_offset 8, -12
 979              		.cfi_offset 9, -8
 980              		.cfi_offset 14, -4
 981 0004 0646     		mov	r6, r0
 982 0006 8846     		mov	r8, r1
 983 0008 1746     		mov	r7, r2
 786:Src/SEGGER_RTT.c ****   const char*           pData;
 984              		.loc 1 786 3 is_stmt 1 view .LVU294
 787:Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 985              		.loc 1 787 3 view .LVU295
 788:Src/SEGGER_RTT.c ****   unsigned              Avail;
 986              		.loc 1 788 3 view .LVU296
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 35


 789:Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 790:Src/SEGGER_RTT.c ****   char*                 pDst;
 791:Src/SEGGER_RTT.c **** #endif
 792:Src/SEGGER_RTT.c **** 
 793:Src/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 987              		.loc 1 793 3 view .LVU297
 988              	.LVL98:
 794:Src/SEGGER_RTT.c ****   //
 795:Src/SEGGER_RTT.c ****   // Get "to-host" ring buffer and copy some elements into local variables.
 796:Src/SEGGER_RTT.c ****   //
 797:Src/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aUp[BufferIndex];
 989              		.loc 1 797 3 view .LVU298
 798:Src/SEGGER_RTT.c ****   //
 799:Src/SEGGER_RTT.c ****   // Check if we will overwrite data and need to adjust the RdOff.
 800:Src/SEGGER_RTT.c ****   //
 801:Src/SEGGER_RTT.c ****   if (pRing->WrOff == pRing->RdOff) {
 990              		.loc 1 801 3 view .LVU299
 991              		.loc 1 801 12 is_stmt 0 view .LVU300
 992 000a 4200     		lsls	r2, r0, #1
 993              	.LVL99:
 994              		.loc 1 801 12 view .LVU301
 995 000c 0244     		add	r2, r2, r0
 996 000e D100     		lsls	r1, r2, #3
 997              	.LVL100:
 998              		.loc 1 801 12 view .LVU302
 999 0010 0A46     		mov	r2, r1
 1000 0012 3D4B     		ldr	r3, .L67
 1001 0014 0B44     		add	r3, r3, r1
 1002 0016 596A     		ldr	r1, [r3, #36]
 1003              		.loc 1 801 28 view .LVU303
 1004 0018 9B6A     		ldr	r3, [r3, #40]
 1005              		.loc 1 801 6 view .LVU304
 1006 001a 9942     		cmp	r1, r3
 1007 001c 0DD0     		beq	.L65
 802:Src/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - 1u;
 803:Src/SEGGER_RTT.c ****   } else if ( pRing->WrOff < pRing->RdOff) {
 1008              		.loc 1 803 10 is_stmt 1 view .LVU305
 1009              		.loc 1 803 35 is_stmt 0 view .LVU306
 1010 001e 00EB4003 		add	r3, r0, r0, lsl #1
 1011 0022 DA00     		lsls	r2, r3, #3
 1012 0024 384B     		ldr	r3, .L67
 1013 0026 1344     		add	r3, r3, r2
 1014 0028 9B6A     		ldr	r3, [r3, #40]
 1015              		.loc 1 803 13 view .LVU307
 1016 002a 9942     		cmp	r1, r3
 1017 002c 15D2     		bcs	.L57
 804:Src/SEGGER_RTT.c ****     Avail = pRing->RdOff - pRing->WrOff - 1u;
 1018              		.loc 1 804 5 is_stmt 1 view .LVU308
 1019              		.loc 1 804 18 is_stmt 0 view .LVU309
 1020 002e 364B     		ldr	r3, .L67
 1021 0030 1344     		add	r3, r3, r2
 1022 0032 9B6A     		ldr	r3, [r3, #40]
 1023              		.loc 1 804 26 view .LVU310
 1024 0034 5B1A     		subs	r3, r3, r1
 1025              		.loc 1 804 11 view .LVU311
 1026 0036 013B     		subs	r3, r3, #1
 1027              	.LVL101:
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 36


 1028              		.loc 1 804 11 view .LVU312
 1029 0038 03E0     		b	.L56
 1030              	.LVL102:
 1031              	.L65:
 802:Src/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - 1u;
 1032              		.loc 1 802 5 is_stmt 1 view .LVU313
 802:Src/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - 1u;
 1033              		.loc 1 802 18 is_stmt 0 view .LVU314
 1034 003a 334B     		ldr	r3, .L67
 1035 003c 1344     		add	r3, r3, r2
 1036 003e 1B6A     		ldr	r3, [r3, #32]
 802:Src/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - 1u;
 1037              		.loc 1 802 11 view .LVU315
 1038 0040 013B     		subs	r3, r3, #1
 1039              	.LVL103:
 1040              	.L56:
 805:Src/SEGGER_RTT.c ****   } else {
 806:Src/SEGGER_RTT.c ****     Avail = pRing->RdOff - pRing->WrOff - 1u + pRing->SizeOfBuffer;
 807:Src/SEGGER_RTT.c ****   }
 808:Src/SEGGER_RTT.c ****   if (NumBytes > Avail) {
 1041              		.loc 1 808 3 is_stmt 1 view .LVU316
 1042              		.loc 1 808 6 is_stmt 0 view .LVU317
 1043 0042 BB42     		cmp	r3, r7
 1044 0044 25D2     		bcs	.L58
 809:Src/SEGGER_RTT.c ****     pRing->RdOff += (NumBytes - Avail);
 1045              		.loc 1 809 5 is_stmt 1 view .LVU318
 1046              		.loc 1 809 18 is_stmt 0 view .LVU319
 1047 0046 7000     		lsls	r0, r6, #1
 1048 0048 3044     		add	r0, r0, r6
 1049 004a C400     		lsls	r4, r0, #3
 1050 004c 2E4A     		ldr	r2, .L67
 1051 004e 2244     		add	r2, r2, r4
 1052 0050 906A     		ldr	r0, [r2, #40]
 1053              		.loc 1 809 31 view .LVU320
 1054 0052 FB1A     		subs	r3, r7, r3
 1055              	.LVL104:
 1056              		.loc 1 809 18 view .LVU321
 1057 0054 0344     		add	r3, r3, r0
 1058 0056 9362     		str	r3, [r2, #40]
 810:Src/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1059              		.loc 1 810 5 is_stmt 1 view .LVU322
 1060              		.loc 1 810 11 is_stmt 0 view .LVU323
 1061 0058 12E0     		b	.L59
 1062              	.LVL105:
 1063              	.L57:
 806:Src/SEGGER_RTT.c ****   }
 1064              		.loc 1 806 5 is_stmt 1 view .LVU324
 806:Src/SEGGER_RTT.c ****   }
 1065              		.loc 1 806 18 is_stmt 0 view .LVU325
 1066 005a 4300     		lsls	r3, r0, #1
 1067 005c 0344     		add	r3, r3, r0
 1068 005e D800     		lsls	r0, r3, #3
 1069              	.LVL106:
 806:Src/SEGGER_RTT.c ****   }
 1070              		.loc 1 806 18 view .LVU326
 1071 0060 294A     		ldr	r2, .L67
 1072 0062 0244     		add	r2, r2, r0
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 37


 1073 0064 936A     		ldr	r3, [r2, #40]
 806:Src/SEGGER_RTT.c ****   }
 1074              		.loc 1 806 26 view .LVU327
 1075 0066 5B1A     		subs	r3, r3, r1
 806:Src/SEGGER_RTT.c ****   }
 1076              		.loc 1 806 53 view .LVU328
 1077 0068 126A     		ldr	r2, [r2, #32]
 806:Src/SEGGER_RTT.c ****   }
 1078              		.loc 1 806 46 view .LVU329
 1079 006a 1344     		add	r3, r3, r2
 806:Src/SEGGER_RTT.c ****   }
 1080              		.loc 1 806 11 view .LVU330
 1081 006c 013B     		subs	r3, r3, #1
 1082              	.LVL107:
 806:Src/SEGGER_RTT.c ****   }
 1083              		.loc 1 806 11 view .LVU331
 1084 006e E8E7     		b	.L56
 1085              	.LVL108:
 1086              	.L60:
 811:Src/SEGGER_RTT.c ****       pRing->RdOff -= pRing->SizeOfBuffer;
 1087              		.loc 1 811 7 is_stmt 1 view .LVU332
 1088              		.loc 1 811 20 is_stmt 0 view .LVU333
 1089 0070 7200     		lsls	r2, r6, #1
 1090 0072 3244     		add	r2, r2, r6
 1091 0074 D400     		lsls	r4, r2, #3
 1092 0076 244B     		ldr	r3, .L67
 1093 0078 2344     		add	r3, r3, r4
 1094 007a 9A6A     		ldr	r2, [r3, #40]
 1095 007c 121A     		subs	r2, r2, r0
 1096 007e 9A62     		str	r2, [r3, #40]
 1097              	.L59:
 810:Src/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1098              		.loc 1 810 17 view .LVU334
 1099 0080 7200     		lsls	r2, r6, #1
 1100 0082 3244     		add	r2, r2, r6
 1101 0084 D000     		lsls	r0, r2, #3
 1102 0086 204B     		ldr	r3, .L67
 1103 0088 0344     		add	r3, r3, r0
 1104 008a 9A6A     		ldr	r2, [r3, #40]
 810:Src/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1105              		.loc 1 810 33 view .LVU335
 1106 008c 186A     		ldr	r0, [r3, #32]
 810:Src/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1107              		.loc 1 810 11 view .LVU336
 1108 008e 8242     		cmp	r2, r0
 1109 0090 EED2     		bcs	.L60
 1110              	.L58:
 812:Src/SEGGER_RTT.c ****     }
 813:Src/SEGGER_RTT.c ****   }
 814:Src/SEGGER_RTT.c ****   //
 815:Src/SEGGER_RTT.c ****   // Write all data, no need to check the RdOff, but possibly handle multiple wrap-arounds
 816:Src/SEGGER_RTT.c ****   //
 817:Src/SEGGER_RTT.c ****   Avail = pRing->SizeOfBuffer - pRing->WrOff;
 1111              		.loc 1 817 3 is_stmt 1 view .LVU337
 1112              		.loc 1 817 16 is_stmt 0 view .LVU338
 1113 0092 06EB4603 		add	r3, r6, r6, lsl #1
 1114 0096 DA00     		lsls	r2, r3, #3
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 38


 1115 0098 1B4B     		ldr	r3, .L67
 1116 009a 1344     		add	r3, r3, r2
 1117 009c 1C6A     		ldr	r4, [r3, #32]
 1118              		.loc 1 817 9 view .LVU339
 1119 009e 641A     		subs	r4, r4, r1
 1120              	.LVL109:
 1121              	.L63:
 818:Src/SEGGER_RTT.c ****   do {
 1122              		.loc 1 818 3 is_stmt 1 view .LVU340
 819:Src/SEGGER_RTT.c ****     if (Avail > NumBytes) {
 1123              		.loc 1 819 5 view .LVU341
 1124              		.loc 1 819 8 is_stmt 0 view .LVU342
 1125 00a0 A742     		cmp	r7, r4
 1126 00a2 19D3     		bcc	.L66
 820:Src/SEGGER_RTT.c ****       //
 821:Src/SEGGER_RTT.c ****       // Last round
 822:Src/SEGGER_RTT.c ****       //
 823:Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 824:Src/SEGGER_RTT.c ****       pDst = pRing->pBuffer + pRing->WrOff;
 825:Src/SEGGER_RTT.c ****       Avail = NumBytes;
 826:Src/SEGGER_RTT.c ****       while (NumBytes--) {
 827:Src/SEGGER_RTT.c ****         *pDst++ = *pData++;
 828:Src/SEGGER_RTT.c ****       };
 829:Src/SEGGER_RTT.c ****       pRing->WrOff += Avail;
 830:Src/SEGGER_RTT.c **** #else
 831:Src/SEGGER_RTT.c ****       SEGGER_RTT_MEMCPY(pRing->pBuffer + pRing->WrOff, pData, NumBytes);
 832:Src/SEGGER_RTT.c ****       pRing->WrOff += NumBytes;
 833:Src/SEGGER_RTT.c **** #endif
 834:Src/SEGGER_RTT.c ****       break;
 835:Src/SEGGER_RTT.c ****     } else {
 836:Src/SEGGER_RTT.c ****       //
 837:Src/SEGGER_RTT.c ****       //  Wrap-around necessary, write until wrap-around and reset WrOff
 838:Src/SEGGER_RTT.c ****       //
 839:Src/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 840:Src/SEGGER_RTT.c ****       pDst = pRing->pBuffer + pRing->WrOff;
 841:Src/SEGGER_RTT.c ****       NumBytes -= Avail;
 842:Src/SEGGER_RTT.c ****       while (Avail--) {
 843:Src/SEGGER_RTT.c ****         *pDst++ = *pData++;
 844:Src/SEGGER_RTT.c ****       };
 845:Src/SEGGER_RTT.c ****       pRing->WrOff = 0;
 846:Src/SEGGER_RTT.c **** #else
 847:Src/SEGGER_RTT.c ****       SEGGER_RTT_MEMCPY(pRing->pBuffer + pRing->WrOff, pData, Avail);
 1127              		.loc 1 847 7 is_stmt 1 view .LVU343
 1128 00a4 184D     		ldr	r5, .L67
 1129 00a6 731C     		adds	r3, r6, #1
 1130 00a8 03EB4303 		add	r3, r3, r3, lsl #1
 1131 00ac DA00     		lsls	r2, r3, #3
 1132 00ae 2A44     		add	r2, r2, r5
 1133 00b0 5068     		ldr	r0, [r2, #4]
 1134 00b2 7300     		lsls	r3, r6, #1
 1135 00b4 3344     		add	r3, r3, r6
 1136 00b6 DA00     		lsls	r2, r3, #3
 1137 00b8 1544     		add	r5, r5, r2
 1138 00ba 6B6A     		ldr	r3, [r5, #36]
 1139 00bc 2246     		mov	r2, r4
 1140 00be 4146     		mov	r1, r8
 1141 00c0 1844     		add	r0, r0, r3
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 39


 1142 00c2 FFF7FEFF 		bl	memcpy
 1143              	.LVL110:
 848:Src/SEGGER_RTT.c ****       pData += Avail;
 1144              		.loc 1 848 7 view .LVU344
 1145              		.loc 1 848 13 is_stmt 0 view .LVU345
 1146 00c6 A044     		add	r8, r8, r4
 1147              	.LVL111:
 849:Src/SEGGER_RTT.c ****       pRing->WrOff = 0;
 1148              		.loc 1 849 7 is_stmt 1 view .LVU346
 1149              		.loc 1 849 20 is_stmt 0 view .LVU347
 1150 00c8 0023     		movs	r3, #0
 1151 00ca 6B62     		str	r3, [r5, #36]
 850:Src/SEGGER_RTT.c ****       NumBytes -= Avail;
 1152              		.loc 1 850 7 is_stmt 1 view .LVU348
 1153              		.loc 1 850 16 is_stmt 0 view .LVU349
 1154 00cc 3F1B     		subs	r7, r7, r4
 1155              	.LVL112:
 851:Src/SEGGER_RTT.c **** #endif
 852:Src/SEGGER_RTT.c ****       Avail = (pRing->SizeOfBuffer - 1);
 1156              		.loc 1 852 7 is_stmt 1 view .LVU350
 1157              		.loc 1 852 21 is_stmt 0 view .LVU351
 1158 00ce 2C6A     		ldr	r4, [r5, #32]
 1159              	.LVL113:
 1160              		.loc 1 852 13 view .LVU352
 1161 00d0 013C     		subs	r4, r4, #1
 1162              	.LVL114:
 853:Src/SEGGER_RTT.c ****     }
 854:Src/SEGGER_RTT.c ****   } while (NumBytes);
 1163              		.loc 1 854 3 view .LVU353
 1164 00d2 002F     		cmp	r7, #0
 1165 00d4 E4D1     		bne	.L63
 1166 00d6 15E0     		b	.L54
 1167              	.L66:
 831:Src/SEGGER_RTT.c ****       pRing->WrOff += NumBytes;
 1168              		.loc 1 831 7 is_stmt 1 view .LVU354
 1169 00d8 0B4D     		ldr	r5, .L67
 1170 00da 731C     		adds	r3, r6, #1
 1171 00dc 03EB4303 		add	r3, r3, r3, lsl #1
 1172 00e0 DA00     		lsls	r2, r3, #3
 1173 00e2 2A44     		add	r2, r2, r5
 1174 00e4 5068     		ldr	r0, [r2, #4]
 1175 00e6 4FEA4609 		lsl	r9, r6, #1
 1176 00ea 09EB0603 		add	r3, r9, r6
 1177 00ee DC00     		lsls	r4, r3, #3
 1178              	.LVL115:
 831:Src/SEGGER_RTT.c ****       pRing->WrOff += NumBytes;
 1179              		.loc 1 831 7 is_stmt 0 view .LVU355
 1180 00f0 2C44     		add	r4, r4, r5
 1181 00f2 636A     		ldr	r3, [r4, #36]
 1182 00f4 3A46     		mov	r2, r7
 1183 00f6 4146     		mov	r1, r8
 1184 00f8 1844     		add	r0, r0, r3
 1185 00fa FFF7FEFF 		bl	memcpy
 1186              	.LVL116:
 832:Src/SEGGER_RTT.c **** #endif
 1187              		.loc 1 832 7 is_stmt 1 view .LVU356
 832:Src/SEGGER_RTT.c **** #endif
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 40


 1188              		.loc 1 832 20 is_stmt 0 view .LVU357
 1189 00fe 636A     		ldr	r3, [r4, #36]
 1190 0100 1F44     		add	r7, r7, r3
 1191              	.LVL117:
 832:Src/SEGGER_RTT.c **** #endif
 1192              		.loc 1 832 20 view .LVU358
 1193 0102 6762     		str	r7, [r4, #36]
 834:Src/SEGGER_RTT.c ****     } else {
 1194              		.loc 1 834 7 is_stmt 1 view .LVU359
 1195              	.L54:
 855:Src/SEGGER_RTT.c **** }
 1196              		.loc 1 855 1 is_stmt 0 view .LVU360
 1197 0104 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1198              	.LVL118:
 1199              	.L68:
 1200              		.loc 1 855 1 view .LVU361
 1201              		.align	2
 1202              	.L67:
 1203 0108 00000000 		.word	_SEGGER_RTT
 1204              		.cfi_endproc
 1205              	.LFE9:
 1207              		.section	.text.SEGGER_RTT_WriteDownBufferNoLock,"ax",%progbits
 1208              		.align	1
 1209              		.global	SEGGER_RTT_WriteDownBufferNoLock
 1210              		.syntax unified
 1211              		.thumb
 1212              		.thumb_func
 1213              		.fpu fpv5-d16
 1215              	SEGGER_RTT_WriteDownBufferNoLock:
 1216              	.LVL119:
 1217              	.LFB10:
 856:Src/SEGGER_RTT.c **** 
 857:Src/SEGGER_RTT.c **** /*********************************************************************
 858:Src/SEGGER_RTT.c **** *
 859:Src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteSkipNoLock
 860:Src/SEGGER_RTT.c **** *
 861:Src/SEGGER_RTT.c **** *  Function description
 862:Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
 863:Src/SEGGER_RTT.c **** *    control block which is then read by the host.
 864:Src/SEGGER_RTT.c **** *    SEGGER_RTT_WriteSkipNoLock does not lock the application and
 865:Src/SEGGER_RTT.c **** *    skips all data, if the data does not fit into the buffer.
 866:Src/SEGGER_RTT.c **** *
 867:Src/SEGGER_RTT.c **** *  Parameters
 868:Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
 869:Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 870:Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 871:Src/SEGGER_RTT.c **** *                 MUST be > 0!!!
 872:Src/SEGGER_RTT.c **** *                 This is done for performance reasons, so no initial check has do be done.
 873:Src/SEGGER_RTT.c **** *
 874:Src/SEGGER_RTT.c **** *  Return value
 875:Src/SEGGER_RTT.c **** *    1: Data has been copied
 876:Src/SEGGER_RTT.c **** *    0: No space, data has not been copied
 877:Src/SEGGER_RTT.c **** *
 878:Src/SEGGER_RTT.c **** *  Notes
 879:Src/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
 880:Src/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
 881:Src/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 41


 882:Src/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
 883:Src/SEGGER_RTT.c **** */
 884:Src/SEGGER_RTT.c **** #if (RTT_USE_ASM == 0)
 885:Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 886:Src/SEGGER_RTT.c ****   const char*           pData;
 887:Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 888:Src/SEGGER_RTT.c ****   unsigned              Avail;
 889:Src/SEGGER_RTT.c ****   unsigned              RdOff;
 890:Src/SEGGER_RTT.c ****   unsigned              WrOff;
 891:Src/SEGGER_RTT.c ****   unsigned              Rem;
 892:Src/SEGGER_RTT.c ****   //
 893:Src/SEGGER_RTT.c ****   // Cases:
 894:Src/SEGGER_RTT.c ****   //   1) RdOff <= WrOff => Space until wrap-around is sufficient
 895:Src/SEGGER_RTT.c ****   //   2) RdOff <= WrOff => Space after wrap-around needed (copy in 2 chunks)
 896:Src/SEGGER_RTT.c ****   //   3) RdOff <  WrOff => No space in buf
 897:Src/SEGGER_RTT.c ****   //   4) RdOff >  WrOff => Space is sufficient
 898:Src/SEGGER_RTT.c ****   //   5) RdOff >  WrOff => No space in buf
 899:Src/SEGGER_RTT.c ****   //
 900:Src/SEGGER_RTT.c ****   // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enou
 901:Src/SEGGER_RTT.c ****   //
 902:Src/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 903:Src/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aUp[BufferIndex];
 904:Src/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 905:Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 906:Src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
 907:Src/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte n
 908:Src/SEGGER_RTT.c ****     if (Avail >= NumBytes) {                            // Case 1)?
 909:Src/SEGGER_RTT.c **** CopyStraight:
 910:Src/SEGGER_RTT.c ****       memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
 911:Src/SEGGER_RTT.c ****       pRing->WrOff = WrOff + NumBytes;
 912:Src/SEGGER_RTT.c ****       return 1;
 913:Src/SEGGER_RTT.c ****     }
 914:Src/SEGGER_RTT.c ****     Avail += RdOff;                                     // Space incl. wrap-around
 915:Src/SEGGER_RTT.c ****     if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does
 916:Src/SEGGER_RTT.c ****       Rem = pRing->SizeOfBuffer - WrOff;                // Space until end of buffer
 917:Src/SEGGER_RTT.c ****       memcpy(pRing->pBuffer + WrOff, pData, Rem);       // Copy 1st chunk
 918:Src/SEGGER_RTT.c ****       NumBytes -= Rem;
 919:Src/SEGGER_RTT.c ****       //
 920:Src/SEGGER_RTT.c ****       // Special case: First check that assumed RdOff == 0 calculated that last element before wrap
 921:Src/SEGGER_RTT.c ****       // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is
 922:Src/SEGGER_RTT.c ****       // In this case, we may use a copy straight until buffer end anyway without needing to copy 2
 923:Src/SEGGER_RTT.c ****       // Therefore, check if 2nd memcpy is necessary at all
 924:Src/SEGGER_RTT.c ****       //
 925:Src/SEGGER_RTT.c ****       if (NumBytes) {
 926:Src/SEGGER_RTT.c ****         memcpy(pRing->pBuffer, pData + Rem, NumBytes);
 927:Src/SEGGER_RTT.c ****       }
 928:Src/SEGGER_RTT.c ****       pRing->WrOff = NumBytes;
 929:Src/SEGGER_RTT.c ****       return 1;
 930:Src/SEGGER_RTT.c ****     }
 931:Src/SEGGER_RTT.c ****   } else {                                             // Potential case 4)
 932:Src/SEGGER_RTT.c ****     Avail = RdOff - WrOff - 1u;
 933:Src/SEGGER_RTT.c ****     if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does
 934:Src/SEGGER_RTT.c ****       goto CopyStraight;
 935:Src/SEGGER_RTT.c ****     }
 936:Src/SEGGER_RTT.c ****   }
 937:Src/SEGGER_RTT.c ****   return 0;     // No space in buffer
 938:Src/SEGGER_RTT.c **** }
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 42


 939:Src/SEGGER_RTT.c **** #endif
 940:Src/SEGGER_RTT.c **** 
 941:Src/SEGGER_RTT.c **** /*********************************************************************
 942:Src/SEGGER_RTT.c **** *
 943:Src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteDownBufferNoLock
 944:Src/SEGGER_RTT.c **** *
 945:Src/SEGGER_RTT.c **** *  Function description
 946:Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
 947:Src/SEGGER_RTT.c **** *    control block inside a <Down> buffer.
 948:Src/SEGGER_RTT.c **** *    SEGGER_RTT_WriteDownBufferNoLock does not lock the application.
 949:Src/SEGGER_RTT.c **** *    Used to do the same operation that J-Link does, to transfer 
 950:Src/SEGGER_RTT.c **** *    RTT data from other channels, such as TCP/IP or UART.
 951:Src/SEGGER_RTT.c **** *
 952:Src/SEGGER_RTT.c **** *  Parameters
 953:Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Down"-buffer to be used.
 954:Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 955:Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 956:Src/SEGGER_RTT.c **** *
 957:Src/SEGGER_RTT.c **** *  Return value
 958:Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Down"-buffer.
 959:Src/SEGGER_RTT.c **** *
 960:Src/SEGGER_RTT.c **** *  Notes
 961:Src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
 962:Src/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
 963:Src/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
 964:Src/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
 965:Src/SEGGER_RTT.c **** *
 966:Src/SEGGER_RTT.c **** *  Additional information
 967:Src/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
 968:Src/SEGGER_RTT.c **** */
 969:Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBy
 1218              		.loc 1 969 105 is_stmt 1 view -0
 1219              		.cfi_startproc
 1220              		@ args = 0, pretend = 0, frame = 0
 1221              		@ frame_needed = 0, uses_anonymous_args = 0
 1222              		.loc 1 969 105 is_stmt 0 view .LVU363
 1223 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1224              	.LCFI10:
 1225              		.cfi_def_cfa_offset 24
 1226              		.cfi_offset 3, -24
 1227              		.cfi_offset 4, -20
 1228              		.cfi_offset 5, -16
 1229              		.cfi_offset 6, -12
 1230              		.cfi_offset 7, -8
 1231              		.cfi_offset 14, -4
 1232 0002 0F46     		mov	r7, r1
 1233 0004 1646     		mov	r6, r2
 970:Src/SEGGER_RTT.c ****   unsigned                Status;
 1234              		.loc 1 970 3 is_stmt 1 view .LVU364
 971:Src/SEGGER_RTT.c ****   unsigned                Avail;
 1235              		.loc 1 971 3 view .LVU365
 972:Src/SEGGER_RTT.c ****   const char*             pData;
 1236              		.loc 1 972 3 view .LVU366
 973:Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP*   pRing;
 1237              		.loc 1 973 3 view .LVU367
 974:Src/SEGGER_RTT.c **** 
 975:Src/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 43


 1238              		.loc 1 975 3 view .LVU368
 1239              	.LVL120:
 976:Src/SEGGER_RTT.c ****   //
 977:Src/SEGGER_RTT.c ****   // Get "to-target" ring buffer.
 978:Src/SEGGER_RTT.c ****   // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offs
 979:Src/SEGGER_RTT.c ****   //
 980:Src/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)&_SEGGER_RTT.aDown[BufferIndex];
 1240              		.loc 1 980 3 view .LVU369
 1241              		.loc 1 980 9 is_stmt 0 view .LVU370
 1242 0006 00EB4000 		add	r0, r0, r0, lsl #1
 1243              	.LVL121:
 1244              		.loc 1 980 9 view .LVU371
 1245 000a C400     		lsls	r4, r0, #3
 1246 000c 6034     		adds	r4, r4, #96
 1247 000e 144B     		ldr	r3, .L75
 1248 0010 1C44     		add	r4, r4, r3
 1249              	.LVL122:
 981:Src/SEGGER_RTT.c ****   //
 982:Src/SEGGER_RTT.c ****   // How we output depends upon the mode...
 983:Src/SEGGER_RTT.c ****   //
 984:Src/SEGGER_RTT.c ****   switch (pRing->Flags) {
 1250              		.loc 1 984 3 is_stmt 1 view .LVU372
 1251              		.loc 1 984 16 is_stmt 0 view .LVU373
 1252 0012 6569     		ldr	r5, [r4, #20]
 1253              		.loc 1 984 3 view .LVU374
 1254 0014 012D     		cmp	r5, #1
 1255 0016 11D0     		beq	.L70
 1256 0018 25B1     		cbz	r5, .L71
 1257 001a 022D     		cmp	r5, #2
 1258 001c 1BD0     		beq	.L72
 985:Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
 986:Src/SEGGER_RTT.c ****     //
 987:Src/SEGGER_RTT.c ****     // If we are in skip mode and there is no space for the whole
 988:Src/SEGGER_RTT.c ****     // of this output, don't bother.
 989:Src/SEGGER_RTT.c ****     //
 990:Src/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
 991:Src/SEGGER_RTT.c ****     if (Avail < NumBytes) {
 992:Src/SEGGER_RTT.c ****       Status = 0u;
 993:Src/SEGGER_RTT.c ****     } else {
 994:Src/SEGGER_RTT.c ****       Status = NumBytes;
 995:Src/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 996:Src/SEGGER_RTT.c ****     }
 997:Src/SEGGER_RTT.c ****     break;
 998:Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
 999:Src/SEGGER_RTT.c ****     //
1000:Src/SEGGER_RTT.c ****     // If we are in trim mode, trim to what we can output without blocking.
1001:Src/SEGGER_RTT.c ****     //
1002:Src/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
1003:Src/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
1004:Src/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
1005:Src/SEGGER_RTT.c ****     break;
1006:Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
1007:Src/SEGGER_RTT.c ****     //
1008:Src/SEGGER_RTT.c ****     // If we are in blocking mode, output everything.
1009:Src/SEGGER_RTT.c ****     //
1010:Src/SEGGER_RTT.c ****     Status = _WriteBlocking(pRing, pData, NumBytes);
1011:Src/SEGGER_RTT.c ****     break;
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 44


1012:Src/SEGGER_RTT.c ****   default:
1013:Src/SEGGER_RTT.c ****     Status = 0u;
 1259              		.loc 1 1013 12 view .LVU375
 1260 001e 0025     		movs	r5, #0
 1261              	.LVL123:
 1262              	.L69:
1014:Src/SEGGER_RTT.c ****     break;
1015:Src/SEGGER_RTT.c ****   }
1016:Src/SEGGER_RTT.c ****   //
1017:Src/SEGGER_RTT.c ****   // Finish up.
1018:Src/SEGGER_RTT.c ****   //
1019:Src/SEGGER_RTT.c ****   return Status;
1020:Src/SEGGER_RTT.c **** }
 1263              		.loc 1 1020 1 view .LVU376
 1264 0020 2846     		mov	r0, r5
 1265 0022 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1266              	.LVL124:
 1267              	.L71:
 990:Src/SEGGER_RTT.c ****     if (Avail < NumBytes) {
 1268              		.loc 1 990 5 is_stmt 1 view .LVU377
 990:Src/SEGGER_RTT.c ****     if (Avail < NumBytes) {
 1269              		.loc 1 990 13 is_stmt 0 view .LVU378
 1270 0024 2046     		mov	r0, r4
 1271 0026 FFF7FEFF 		bl	_GetAvailWriteSpace
 1272              	.LVL125:
 991:Src/SEGGER_RTT.c ****       Status = 0u;
 1273              		.loc 1 991 5 is_stmt 1 view .LVU379
 991:Src/SEGGER_RTT.c ****       Status = 0u;
 1274              		.loc 1 991 8 is_stmt 0 view .LVU380
 1275 002a B042     		cmp	r0, r6
 1276 002c F8D3     		bcc	.L69
 994:Src/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 1277              		.loc 1 994 7 is_stmt 1 view .LVU381
 1278              	.LVL126:
 995:Src/SEGGER_RTT.c ****     }
 1279              		.loc 1 995 7 view .LVU382
 1280 002e 3246     		mov	r2, r6
 1281 0030 3946     		mov	r1, r7
 1282 0032 2046     		mov	r0, r4
 1283              	.LVL127:
 995:Src/SEGGER_RTT.c ****     }
 1284              		.loc 1 995 7 is_stmt 0 view .LVU383
 1285 0034 FFF7FEFF 		bl	_WriteNoCheck
 1286              	.LVL128:
 994:Src/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 1287              		.loc 1 994 14 view .LVU384
 1288 0038 3546     		mov	r5, r6
 1289 003a F1E7     		b	.L69
 1290              	.LVL129:
 1291              	.L70:
1002:Src/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
 1292              		.loc 1 1002 5 is_stmt 1 view .LVU385
1002:Src/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
 1293              		.loc 1 1002 13 is_stmt 0 view .LVU386
 1294 003c 2046     		mov	r0, r4
 1295 003e FFF7FEFF 		bl	_GetAvailWriteSpace
 1296              	.LVL130:
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 45


1003:Src/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 1297              		.loc 1 1003 5 is_stmt 1 view .LVU387
1003:Src/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 1298              		.loc 1 1003 12 is_stmt 0 view .LVU388
 1299 0042 3546     		mov	r5, r6
 1300 0044 8642     		cmp	r6, r0
 1301 0046 28BF     		it	cs
 1302 0048 0546     		movcs	r5, r0
 1303              	.LVL131:
1004:Src/SEGGER_RTT.c ****     break;
 1304              		.loc 1 1004 5 is_stmt 1 view .LVU389
 1305 004a 2A46     		mov	r2, r5
 1306 004c 3946     		mov	r1, r7
 1307 004e 2046     		mov	r0, r4
 1308              	.LVL132:
1004:Src/SEGGER_RTT.c ****     break;
 1309              		.loc 1 1004 5 is_stmt 0 view .LVU390
 1310 0050 FFF7FEFF 		bl	_WriteNoCheck
 1311              	.LVL133:
1005:Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
 1312              		.loc 1 1005 5 is_stmt 1 view .LVU391
 1313 0054 E4E7     		b	.L69
 1314              	.LVL134:
 1315              	.L72:
1010:Src/SEGGER_RTT.c ****     break;
 1316              		.loc 1 1010 5 view .LVU392
1010:Src/SEGGER_RTT.c ****     break;
 1317              		.loc 1 1010 14 is_stmt 0 view .LVU393
 1318 0056 2046     		mov	r0, r4
 1319 0058 FFF7FEFF 		bl	_WriteBlocking
 1320              	.LVL135:
1010:Src/SEGGER_RTT.c ****     break;
 1321              		.loc 1 1010 14 view .LVU394
 1322 005c 0546     		mov	r5, r0
 1323              	.LVL136:
1011:Src/SEGGER_RTT.c ****   default:
 1324              		.loc 1 1011 5 is_stmt 1 view .LVU395
1019:Src/SEGGER_RTT.c **** }
 1325              		.loc 1 1019 3 view .LVU396
1019:Src/SEGGER_RTT.c **** }
 1326              		.loc 1 1019 10 is_stmt 0 view .LVU397
 1327 005e DFE7     		b	.L69
 1328              	.L76:
 1329              		.align	2
 1330              	.L75:
 1331 0060 00000000 		.word	_SEGGER_RTT
 1332              		.cfi_endproc
 1333              	.LFE10:
 1335              		.section	.text.SEGGER_RTT_WriteNoLock,"ax",%progbits
 1336              		.align	1
 1337              		.global	SEGGER_RTT_WriteNoLock
 1338              		.syntax unified
 1339              		.thumb
 1340              		.thumb_func
 1341              		.fpu fpv5-d16
 1343              	SEGGER_RTT_WriteNoLock:
 1344              	.LVL137:
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 46


 1345              	.LFB11:
1021:Src/SEGGER_RTT.c **** 
1022:Src/SEGGER_RTT.c **** /*********************************************************************
1023:Src/SEGGER_RTT.c **** *
1024:Src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteNoLock
1025:Src/SEGGER_RTT.c **** *
1026:Src/SEGGER_RTT.c **** *  Function description
1027:Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
1028:Src/SEGGER_RTT.c **** *    control block which is then read by the host.
1029:Src/SEGGER_RTT.c **** *    SEGGER_RTT_WriteNoLock does not lock the application.
1030:Src/SEGGER_RTT.c **** *
1031:Src/SEGGER_RTT.c **** *  Parameters
1032:Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1033:Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
1034:Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
1035:Src/SEGGER_RTT.c **** *
1036:Src/SEGGER_RTT.c **** *  Return value
1037:Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1038:Src/SEGGER_RTT.c **** *
1039:Src/SEGGER_RTT.c **** *  Notes
1040:Src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1041:Src/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
1042:Src/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
1043:Src/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
1044:Src/SEGGER_RTT.c **** */
1045:Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 1346              		.loc 1 1045 95 is_stmt 1 view -0
 1347              		.cfi_startproc
 1348              		@ args = 0, pretend = 0, frame = 0
 1349              		@ frame_needed = 0, uses_anonymous_args = 0
 1350              		.loc 1 1045 95 is_stmt 0 view .LVU399
 1351 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1352              	.LCFI11:
 1353              		.cfi_def_cfa_offset 24
 1354              		.cfi_offset 3, -24
 1355              		.cfi_offset 4, -20
 1356              		.cfi_offset 5, -16
 1357              		.cfi_offset 6, -12
 1358              		.cfi_offset 7, -8
 1359              		.cfi_offset 14, -4
 1360 0002 0F46     		mov	r7, r1
 1361 0004 1646     		mov	r6, r2
1046:Src/SEGGER_RTT.c ****   unsigned              Status;
 1362              		.loc 1 1046 3 is_stmt 1 view .LVU400
1047:Src/SEGGER_RTT.c ****   unsigned              Avail;
 1363              		.loc 1 1047 3 view .LVU401
1048:Src/SEGGER_RTT.c ****   const char*           pData;
 1364              		.loc 1 1048 3 view .LVU402
1049:Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1365              		.loc 1 1049 3 view .LVU403
1050:Src/SEGGER_RTT.c **** 
1051:Src/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 1366              		.loc 1 1051 3 view .LVU404
 1367              	.LVL138:
1052:Src/SEGGER_RTT.c ****   //
1053:Src/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1054:Src/SEGGER_RTT.c ****   //
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 47


1055:Src/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aUp[BufferIndex];
 1368              		.loc 1 1055 3 view .LVU405
 1369              		.loc 1 1055 9 is_stmt 0 view .LVU406
 1370 0006 431C     		adds	r3, r0, #1
 1371 0008 03EB4303 		add	r3, r3, r3, lsl #1
 1372 000c DD00     		lsls	r5, r3, #3
 1373 000e 174B     		ldr	r3, .L83
 1374 0010 1D44     		add	r5, r5, r3
 1375              	.LVL139:
1056:Src/SEGGER_RTT.c ****   //
1057:Src/SEGGER_RTT.c ****   // How we output depends upon the mode...
1058:Src/SEGGER_RTT.c ****   //
1059:Src/SEGGER_RTT.c ****   switch (pRing->Flags) {
 1376              		.loc 1 1059 3 is_stmt 1 view .LVU407
 1377              		.loc 1 1059 16 is_stmt 0 view .LVU408
 1378 0012 00EB4000 		add	r0, r0, r0, lsl #1
 1379              	.LVL140:
 1380              		.loc 1 1059 16 view .LVU409
 1381 0016 C200     		lsls	r2, r0, #3
 1382              	.LVL141:
 1383              		.loc 1 1059 16 view .LVU410
 1384 0018 1344     		add	r3, r3, r2
 1385 001a DC6A     		ldr	r4, [r3, #44]
 1386              		.loc 1 1059 3 view .LVU411
 1387 001c 012C     		cmp	r4, #1
 1388 001e 11D0     		beq	.L78
 1389 0020 24B1     		cbz	r4, .L79
 1390 0022 022C     		cmp	r4, #2
 1391 0024 1BD0     		beq	.L80
1060:Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
1061:Src/SEGGER_RTT.c ****     //
1062:Src/SEGGER_RTT.c ****     // If we are in skip mode and there is no space for the whole
1063:Src/SEGGER_RTT.c ****     // of this output, don't bother.
1064:Src/SEGGER_RTT.c ****     //
1065:Src/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
1066:Src/SEGGER_RTT.c ****     if (Avail < NumBytes) {
1067:Src/SEGGER_RTT.c ****       Status = 0u;
1068:Src/SEGGER_RTT.c ****     } else {
1069:Src/SEGGER_RTT.c ****       Status = NumBytes;
1070:Src/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
1071:Src/SEGGER_RTT.c ****     }
1072:Src/SEGGER_RTT.c ****     break;
1073:Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
1074:Src/SEGGER_RTT.c ****     //
1075:Src/SEGGER_RTT.c ****     // If we are in trim mode, trim to what we can output without blocking.
1076:Src/SEGGER_RTT.c ****     //
1077:Src/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
1078:Src/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
1079:Src/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
1080:Src/SEGGER_RTT.c ****     break;
1081:Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
1082:Src/SEGGER_RTT.c ****     //
1083:Src/SEGGER_RTT.c ****     // If we are in blocking mode, output everything.
1084:Src/SEGGER_RTT.c ****     //
1085:Src/SEGGER_RTT.c ****     Status = _WriteBlocking(pRing, pData, NumBytes);
1086:Src/SEGGER_RTT.c ****     break;
1087:Src/SEGGER_RTT.c ****   default:
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 48


1088:Src/SEGGER_RTT.c ****     Status = 0u;
 1392              		.loc 1 1088 12 view .LVU412
 1393 0026 0024     		movs	r4, #0
 1394              	.LVL142:
 1395              	.L77:
1089:Src/SEGGER_RTT.c ****     break;
1090:Src/SEGGER_RTT.c ****   }
1091:Src/SEGGER_RTT.c ****   //
1092:Src/SEGGER_RTT.c ****   // Finish up.
1093:Src/SEGGER_RTT.c ****   //
1094:Src/SEGGER_RTT.c ****   return Status;
1095:Src/SEGGER_RTT.c **** }
 1396              		.loc 1 1095 1 view .LVU413
 1397 0028 2046     		mov	r0, r4
 1398 002a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1399              	.LVL143:
 1400              	.L79:
1065:Src/SEGGER_RTT.c ****     if (Avail < NumBytes) {
 1401              		.loc 1 1065 5 is_stmt 1 view .LVU414
1065:Src/SEGGER_RTT.c ****     if (Avail < NumBytes) {
 1402              		.loc 1 1065 13 is_stmt 0 view .LVU415
 1403 002c 2846     		mov	r0, r5
 1404 002e FFF7FEFF 		bl	_GetAvailWriteSpace
 1405              	.LVL144:
1066:Src/SEGGER_RTT.c ****       Status = 0u;
 1406              		.loc 1 1066 5 is_stmt 1 view .LVU416
1066:Src/SEGGER_RTT.c ****       Status = 0u;
 1407              		.loc 1 1066 8 is_stmt 0 view .LVU417
 1408 0032 B042     		cmp	r0, r6
 1409 0034 F8D3     		bcc	.L77
1069:Src/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 1410              		.loc 1 1069 7 is_stmt 1 view .LVU418
 1411              	.LVL145:
1070:Src/SEGGER_RTT.c ****     }
 1412              		.loc 1 1070 7 view .LVU419
 1413 0036 3246     		mov	r2, r6
 1414 0038 3946     		mov	r1, r7
 1415 003a 2846     		mov	r0, r5
 1416              	.LVL146:
1070:Src/SEGGER_RTT.c ****     }
 1417              		.loc 1 1070 7 is_stmt 0 view .LVU420
 1418 003c FFF7FEFF 		bl	_WriteNoCheck
 1419              	.LVL147:
1069:Src/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 1420              		.loc 1 1069 14 view .LVU421
 1421 0040 3446     		mov	r4, r6
 1422 0042 F1E7     		b	.L77
 1423              	.LVL148:
 1424              	.L78:
1077:Src/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
 1425              		.loc 1 1077 5 is_stmt 1 view .LVU422
1077:Src/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
 1426              		.loc 1 1077 13 is_stmt 0 view .LVU423
 1427 0044 2846     		mov	r0, r5
 1428 0046 FFF7FEFF 		bl	_GetAvailWriteSpace
 1429              	.LVL149:
1078:Src/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 49


 1430              		.loc 1 1078 5 is_stmt 1 view .LVU424
1078:Src/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 1431              		.loc 1 1078 12 is_stmt 0 view .LVU425
 1432 004a 3446     		mov	r4, r6
 1433 004c 8642     		cmp	r6, r0
 1434 004e 28BF     		it	cs
 1435 0050 0446     		movcs	r4, r0
 1436              	.LVL150:
1079:Src/SEGGER_RTT.c ****     break;
 1437              		.loc 1 1079 5 is_stmt 1 view .LVU426
 1438 0052 2246     		mov	r2, r4
 1439 0054 3946     		mov	r1, r7
 1440 0056 2846     		mov	r0, r5
 1441              	.LVL151:
1079:Src/SEGGER_RTT.c ****     break;
 1442              		.loc 1 1079 5 is_stmt 0 view .LVU427
 1443 0058 FFF7FEFF 		bl	_WriteNoCheck
 1444              	.LVL152:
1080:Src/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
 1445              		.loc 1 1080 5 is_stmt 1 view .LVU428
 1446 005c E4E7     		b	.L77
 1447              	.LVL153:
 1448              	.L80:
1085:Src/SEGGER_RTT.c ****     break;
 1449              		.loc 1 1085 5 view .LVU429
1085:Src/SEGGER_RTT.c ****     break;
 1450              		.loc 1 1085 14 is_stmt 0 view .LVU430
 1451 005e 3246     		mov	r2, r6
 1452 0060 2846     		mov	r0, r5
 1453 0062 FFF7FEFF 		bl	_WriteBlocking
 1454              	.LVL154:
1085:Src/SEGGER_RTT.c ****     break;
 1455              		.loc 1 1085 14 view .LVU431
 1456 0066 0446     		mov	r4, r0
 1457              	.LVL155:
1086:Src/SEGGER_RTT.c ****   default:
 1458              		.loc 1 1086 5 is_stmt 1 view .LVU432
1094:Src/SEGGER_RTT.c **** }
 1459              		.loc 1 1094 3 view .LVU433
1094:Src/SEGGER_RTT.c **** }
 1460              		.loc 1 1094 10 is_stmt 0 view .LVU434
 1461 0068 DEE7     		b	.L77
 1462              	.L84:
 1463 006a 00BF     		.align	2
 1464              	.L83:
 1465 006c 00000000 		.word	_SEGGER_RTT
 1466              		.cfi_endproc
 1467              	.LFE11:
 1469              		.section	.text.SEGGER_RTT_WriteDownBuffer,"ax",%progbits
 1470              		.align	1
 1471              		.global	SEGGER_RTT_WriteDownBuffer
 1472              		.syntax unified
 1473              		.thumb
 1474              		.thumb_func
 1475              		.fpu fpv5-d16
 1477              	SEGGER_RTT_WriteDownBuffer:
 1478              	.LVL156:
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 50


 1479              	.LFB12:
1096:Src/SEGGER_RTT.c **** 
1097:Src/SEGGER_RTT.c **** /*********************************************************************
1098:Src/SEGGER_RTT.c **** *
1099:Src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteDownBuffer
1100:Src/SEGGER_RTT.c **** *
1101:Src/SEGGER_RTT.c **** *  Function description
1102:Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT control block in a <Down> buffer.
1103:Src/SEGGER_RTT.c **** *
1104:Src/SEGGER_RTT.c **** *  Parameters
1105:Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1106:Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
1107:Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
1108:Src/SEGGER_RTT.c **** *
1109:Src/SEGGER_RTT.c **** *  Return value
1110:Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Down"-buffer.
1111:Src/SEGGER_RTT.c **** *
1112:Src/SEGGER_RTT.c **** *  Notes
1113:Src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1114:Src/SEGGER_RTT.c **** *
1115:Src/SEGGER_RTT.c **** *  Additional information
1116:Src/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
1117:Src/SEGGER_RTT.c **** *    This function locks against all other RTT operations. I.e. during
1118:Src/SEGGER_RTT.c **** *    the write operation, writing from the application is also locked.
1119:Src/SEGGER_RTT.c **** *    If only one consumer writes to the down buffer, 
1120:Src/SEGGER_RTT.c **** *    call SEGGER_RTT_WriteDownBufferNoLock() instead.
1121:Src/SEGGER_RTT.c **** */
1122:Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 1480              		.loc 1 1122 99 is_stmt 1 view -0
 1481              		.cfi_startproc
 1482              		@ args = 0, pretend = 0, frame = 0
 1483              		@ frame_needed = 0, uses_anonymous_args = 0
 1484              		.loc 1 1122 99 is_stmt 0 view .LVU436
 1485 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1486              	.LCFI12:
 1487              		.cfi_def_cfa_offset 24
 1488              		.cfi_offset 3, -24
 1489              		.cfi_offset 4, -20
 1490              		.cfi_offset 5, -16
 1491              		.cfi_offset 6, -12
 1492              		.cfi_offset 7, -8
 1493              		.cfi_offset 14, -4
 1494 0002 0546     		mov	r5, r0
 1495 0004 0E46     		mov	r6, r1
 1496 0006 1746     		mov	r7, r2
1123:Src/SEGGER_RTT.c ****   unsigned Status;
 1497              		.loc 1 1123 3 is_stmt 1 view .LVU437
1124:Src/SEGGER_RTT.c ****   //
1125:Src/SEGGER_RTT.c ****   INIT();
 1498              		.loc 1 1125 3 view .LVU438
 1499              		.loc 1 1125 3 view .LVU439
 1500 0008 094B     		ldr	r3, .L89
 1501 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1502 000c 6BB1     		cbz	r3, .L88
 1503              	.LVL157:
 1504              	.L86:
 1505              	.LBB4:
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 51


1126:Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1506              		.loc 1 1126 3 view .LVU440
 1507              		.loc 1 1126 3 view .LVU441
 1508              		.syntax unified
 1509              	@ 1126 "Src/SEGGER_RTT.c" 1
 1510 000e EFF31184 		mrs   r4, basepri  
 1511 0012 4FF02001 		mov   r1, #32       
 1512 0016 81F31188 		msr   basepri, r1  
 1513              		
 1514              	@ 0 "" 2
 1515              	.LVL158:
 1516              		.loc 1 1126 20 view .LVU442
1127:Src/SEGGER_RTT.c ****   //
1128:Src/SEGGER_RTT.c ****   // Call the non-locking write function
1129:Src/SEGGER_RTT.c ****   //
1130:Src/SEGGER_RTT.c ****   Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);
 1517              		.loc 1 1130 3 view .LVU443
 1518              		.loc 1 1130 12 is_stmt 0 view .LVU444
 1519              		.thumb
 1520              		.syntax unified
 1521 001a 3A46     		mov	r2, r7
 1522 001c 3146     		mov	r1, r6
 1523 001e 2846     		mov	r0, r5
 1524 0020 FFF7FEFF 		bl	SEGGER_RTT_WriteDownBufferNoLock
 1525              	.LVL159:
1131:Src/SEGGER_RTT.c ****   //
1132:Src/SEGGER_RTT.c ****   // Finish up.
1133:Src/SEGGER_RTT.c ****   //
1134:Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1526              		.loc 1 1134 3 is_stmt 1 view .LVU445
 1527              		.syntax unified
 1528              	@ 1134 "Src/SEGGER_RTT.c" 1
 1529 0024 84F31188 		msr   basepri, r4  
 1530              		
 1531              	@ 0 "" 2
 1532              		.thumb
 1533              		.syntax unified
 1534              	.LBE4:
 1535              		.loc 1 1134 22 view .LVU446
1135:Src/SEGGER_RTT.c ****   //
1136:Src/SEGGER_RTT.c ****   return Status;
 1536              		.loc 1 1136 3 view .LVU447
1137:Src/SEGGER_RTT.c **** }
 1537              		.loc 1 1137 1 is_stmt 0 view .LVU448
 1538 0028 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1539              	.LVL160:
 1540              	.L88:
1125:Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1541              		.loc 1 1125 3 is_stmt 1 discriminator 1 view .LVU449
 1542 002a FFF7FEFF 		bl	_DoInit
 1543              	.LVL161:
1125:Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1544              		.loc 1 1125 3 is_stmt 0 discriminator 1 view .LVU450
 1545 002e EEE7     		b	.L86
 1546              	.L90:
 1547              		.align	2
 1548              	.L89:
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 52


 1549 0030 00000000 		.word	_SEGGER_RTT
 1550              		.cfi_endproc
 1551              	.LFE12:
 1553              		.section	.text.SEGGER_RTT_Write,"ax",%progbits
 1554              		.align	1
 1555              		.global	SEGGER_RTT_Write
 1556              		.syntax unified
 1557              		.thumb
 1558              		.thumb_func
 1559              		.fpu fpv5-d16
 1561              	SEGGER_RTT_Write:
 1562              	.LVL162:
 1563              	.LFB13:
1138:Src/SEGGER_RTT.c **** 
1139:Src/SEGGER_RTT.c **** /*********************************************************************
1140:Src/SEGGER_RTT.c **** *
1141:Src/SEGGER_RTT.c **** *       SEGGER_RTT_Write
1142:Src/SEGGER_RTT.c **** *
1143:Src/SEGGER_RTT.c **** *  Function description
1144:Src/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
1145:Src/SEGGER_RTT.c **** *    control block which is then read by the host.
1146:Src/SEGGER_RTT.c **** *
1147:Src/SEGGER_RTT.c **** *  Parameters
1148:Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1149:Src/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
1150:Src/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
1151:Src/SEGGER_RTT.c **** *
1152:Src/SEGGER_RTT.c **** *  Return value
1153:Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1154:Src/SEGGER_RTT.c **** *
1155:Src/SEGGER_RTT.c **** *  Notes
1156:Src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1157:Src/SEGGER_RTT.c **** */
1158:Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 1564              		.loc 1 1158 89 is_stmt 1 view -0
 1565              		.cfi_startproc
 1566              		@ args = 0, pretend = 0, frame = 0
 1567              		@ frame_needed = 0, uses_anonymous_args = 0
 1568              		.loc 1 1158 89 is_stmt 0 view .LVU452
 1569 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1570              	.LCFI13:
 1571              		.cfi_def_cfa_offset 24
 1572              		.cfi_offset 3, -24
 1573              		.cfi_offset 4, -20
 1574              		.cfi_offset 5, -16
 1575              		.cfi_offset 6, -12
 1576              		.cfi_offset 7, -8
 1577              		.cfi_offset 14, -4
 1578 0002 0546     		mov	r5, r0
 1579 0004 0E46     		mov	r6, r1
 1580 0006 1746     		mov	r7, r2
1159:Src/SEGGER_RTT.c ****   unsigned Status;
 1581              		.loc 1 1159 3 is_stmt 1 view .LVU453
1160:Src/SEGGER_RTT.c ****   //
1161:Src/SEGGER_RTT.c ****   INIT();
 1582              		.loc 1 1161 3 view .LVU454
 1583              		.loc 1 1161 3 view .LVU455
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 53


 1584 0008 094B     		ldr	r3, .L95
 1585 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1586 000c 6BB1     		cbz	r3, .L94
 1587              	.LVL163:
 1588              	.L92:
 1589              	.LBB5:
1162:Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1590              		.loc 1 1162 3 view .LVU456
 1591              		.loc 1 1162 3 view .LVU457
 1592              		.syntax unified
 1593              	@ 1162 "Src/SEGGER_RTT.c" 1
 1594 000e EFF31184 		mrs   r4, basepri  
 1595 0012 4FF02001 		mov   r1, #32       
 1596 0016 81F31188 		msr   basepri, r1  
 1597              		
 1598              	@ 0 "" 2
 1599              	.LVL164:
 1600              		.loc 1 1162 20 view .LVU458
1163:Src/SEGGER_RTT.c ****   //
1164:Src/SEGGER_RTT.c ****   // Call the non-locking write function
1165:Src/SEGGER_RTT.c ****   //
1166:Src/SEGGER_RTT.c ****   Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 1601              		.loc 1 1166 3 view .LVU459
 1602              		.loc 1 1166 12 is_stmt 0 view .LVU460
 1603              		.thumb
 1604              		.syntax unified
 1605 001a 3A46     		mov	r2, r7
 1606 001c 3146     		mov	r1, r6
 1607 001e 2846     		mov	r0, r5
 1608 0020 FFF7FEFF 		bl	SEGGER_RTT_WriteNoLock
 1609              	.LVL165:
1167:Src/SEGGER_RTT.c ****   //
1168:Src/SEGGER_RTT.c ****   // Finish up.
1169:Src/SEGGER_RTT.c ****   //
1170:Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1610              		.loc 1 1170 3 is_stmt 1 view .LVU461
 1611              		.syntax unified
 1612              	@ 1170 "Src/SEGGER_RTT.c" 1
 1613 0024 84F31188 		msr   basepri, r4  
 1614              		
 1615              	@ 0 "" 2
 1616              		.thumb
 1617              		.syntax unified
 1618              	.LBE5:
 1619              		.loc 1 1170 22 view .LVU462
1171:Src/SEGGER_RTT.c ****   //
1172:Src/SEGGER_RTT.c ****   return Status;
 1620              		.loc 1 1172 3 view .LVU463
1173:Src/SEGGER_RTT.c **** }
 1621              		.loc 1 1173 1 is_stmt 0 view .LVU464
 1622 0028 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1623              	.LVL166:
 1624              	.L94:
1161:Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1625              		.loc 1 1161 3 is_stmt 1 discriminator 1 view .LVU465
 1626 002a FFF7FEFF 		bl	_DoInit
 1627              	.LVL167:
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 54


1161:Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1628              		.loc 1 1161 3 is_stmt 0 discriminator 1 view .LVU466
 1629 002e EEE7     		b	.L92
 1630              	.L96:
 1631              		.align	2
 1632              	.L95:
 1633 0030 00000000 		.word	_SEGGER_RTT
 1634              		.cfi_endproc
 1635              	.LFE13:
 1637              		.section	.text.SEGGER_RTT_WriteString,"ax",%progbits
 1638              		.align	1
 1639              		.global	SEGGER_RTT_WriteString
 1640              		.syntax unified
 1641              		.thumb
 1642              		.thumb_func
 1643              		.fpu fpv5-d16
 1645              	SEGGER_RTT_WriteString:
 1646              	.LVL168:
 1647              	.LFB14:
1174:Src/SEGGER_RTT.c **** 
1175:Src/SEGGER_RTT.c **** /*********************************************************************
1176:Src/SEGGER_RTT.c **** *
1177:Src/SEGGER_RTT.c **** *       SEGGER_RTT_WriteString
1178:Src/SEGGER_RTT.c **** *
1179:Src/SEGGER_RTT.c **** *  Function description
1180:Src/SEGGER_RTT.c **** *    Stores string in SEGGER RTT control block.
1181:Src/SEGGER_RTT.c **** *    This data is read by the host.
1182:Src/SEGGER_RTT.c **** *
1183:Src/SEGGER_RTT.c **** *  Parameters
1184:Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1185:Src/SEGGER_RTT.c **** *    s            Pointer to string.
1186:Src/SEGGER_RTT.c **** *
1187:Src/SEGGER_RTT.c **** *  Return value
1188:Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1189:Src/SEGGER_RTT.c **** *
1190:Src/SEGGER_RTT.c **** *  Notes
1191:Src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1192:Src/SEGGER_RTT.c **** *    (2) String passed to this function has to be \0 terminated
1193:Src/SEGGER_RTT.c **** *    (3) \0 termination character is *not* stored in RTT buffer
1194:Src/SEGGER_RTT.c **** */
1195:Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteString(unsigned BufferIndex, const char* s) {
 1648              		.loc 1 1195 70 is_stmt 1 view -0
 1649              		.cfi_startproc
 1650              		@ args = 0, pretend = 0, frame = 0
 1651              		@ frame_needed = 0, uses_anonymous_args = 0
 1652              		.loc 1 1195 70 is_stmt 0 view .LVU468
 1653 0000 38B5     		push	{r3, r4, r5, lr}
 1654              	.LCFI14:
 1655              		.cfi_def_cfa_offset 16
 1656              		.cfi_offset 3, -16
 1657              		.cfi_offset 4, -12
 1658              		.cfi_offset 5, -8
 1659              		.cfi_offset 14, -4
 1660 0002 0546     		mov	r5, r0
 1661 0004 0C46     		mov	r4, r1
1196:Src/SEGGER_RTT.c ****   unsigned Len;
 1662              		.loc 1 1196 3 is_stmt 1 view .LVU469
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 55


1197:Src/SEGGER_RTT.c **** 
1198:Src/SEGGER_RTT.c ****   Len = STRLEN(s);
 1663              		.loc 1 1198 3 view .LVU470
 1664              		.loc 1 1198 9 is_stmt 0 view .LVU471
 1665 0006 0846     		mov	r0, r1
 1666              	.LVL169:
 1667              		.loc 1 1198 9 view .LVU472
 1668 0008 FFF7FEFF 		bl	strlen
 1669              	.LVL170:
1199:Src/SEGGER_RTT.c ****   return SEGGER_RTT_Write(BufferIndex, s, Len);
 1670              		.loc 1 1199 3 is_stmt 1 view .LVU473
 1671              		.loc 1 1199 10 is_stmt 0 view .LVU474
 1672 000c 0246     		mov	r2, r0
 1673 000e 2146     		mov	r1, r4
 1674 0010 2846     		mov	r0, r5
 1675              	.LVL171:
 1676              		.loc 1 1199 10 view .LVU475
 1677 0012 FFF7FEFF 		bl	SEGGER_RTT_Write
 1678              	.LVL172:
1200:Src/SEGGER_RTT.c **** }
 1679              		.loc 1 1200 1 view .LVU476
 1680 0016 38BD     		pop	{r3, r4, r5, pc}
 1681              		.loc 1 1200 1 view .LVU477
 1682              		.cfi_endproc
 1683              	.LFE14:
 1685              		.section	.text.SEGGER_RTT_PutCharSkipNoLock,"ax",%progbits
 1686              		.align	1
 1687              		.global	SEGGER_RTT_PutCharSkipNoLock
 1688              		.syntax unified
 1689              		.thumb
 1690              		.thumb_func
 1691              		.fpu fpv5-d16
 1693              	SEGGER_RTT_PutCharSkipNoLock:
 1694              	.LVL173:
 1695              	.LFB15:
1201:Src/SEGGER_RTT.c **** 
1202:Src/SEGGER_RTT.c **** /*********************************************************************
1203:Src/SEGGER_RTT.c **** *
1204:Src/SEGGER_RTT.c **** *       SEGGER_RTT_PutCharSkipNoLock
1205:Src/SEGGER_RTT.c **** *
1206:Src/SEGGER_RTT.c **** *  Function description
1207:Src/SEGGER_RTT.c **** *    Stores a single character/byte in SEGGER RTT buffer.
1208:Src/SEGGER_RTT.c **** *    SEGGER_RTT_PutCharSkipNoLock does not lock the application and
1209:Src/SEGGER_RTT.c **** *    skips the byte, if it does not fit into the buffer.
1210:Src/SEGGER_RTT.c **** *
1211:Src/SEGGER_RTT.c **** *  Parameters
1212:Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1213:Src/SEGGER_RTT.c **** *    c            Byte to be stored.
1214:Src/SEGGER_RTT.c **** *
1215:Src/SEGGER_RTT.c **** *  Return value
1216:Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1217:Src/SEGGER_RTT.c **** *
1218:Src/SEGGER_RTT.c **** *  Notes
1219:Src/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, the character is dropped.
1220:Src/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
1221:Src/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
1222:Src/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 56


1223:Src/SEGGER_RTT.c **** */
1224:Src/SEGGER_RTT.c **** 
1225:Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_PutCharSkipNoLock(unsigned BufferIndex, char c) {
 1696              		.loc 1 1225 69 is_stmt 1 view -0
 1697              		.cfi_startproc
 1698              		@ args = 0, pretend = 0, frame = 0
 1699              		@ frame_needed = 0, uses_anonymous_args = 0
 1700              		@ link register save eliminated.
 1701              		.loc 1 1225 69 is_stmt 0 view .LVU479
 1702 0000 70B4     		push	{r4, r5, r6}
 1703              	.LCFI15:
 1704              		.cfi_def_cfa_offset 12
 1705              		.cfi_offset 4, -12
 1706              		.cfi_offset 5, -8
 1707              		.cfi_offset 6, -4
1226:Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1708              		.loc 1 1226 3 is_stmt 1 view .LVU480
1227:Src/SEGGER_RTT.c ****   unsigned              WrOff;
 1709              		.loc 1 1227 3 view .LVU481
1228:Src/SEGGER_RTT.c ****   unsigned              Status;
 1710              		.loc 1 1228 3 view .LVU482
1229:Src/SEGGER_RTT.c ****   //
1230:Src/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1231:Src/SEGGER_RTT.c ****   //
1232:Src/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aUp[BufferIndex];
 1711              		.loc 1 1232 3 view .LVU483
 1712              	.LVL174:
1233:Src/SEGGER_RTT.c ****   //
1234:Src/SEGGER_RTT.c ****   // Get write position and handle wrap-around if necessary
1235:Src/SEGGER_RTT.c ****   //
1236:Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff + 1;
 1713              		.loc 1 1236 3 view .LVU484
 1714              		.loc 1 1236 16 is_stmt 0 view .LVU485
 1715 0002 4200     		lsls	r2, r0, #1
 1716 0004 0244     		add	r2, r2, r0
 1717 0006 D400     		lsls	r4, r2, #3
 1718 0008 114B     		ldr	r3, .L106
 1719 000a 2344     		add	r3, r3, r4
 1720 000c 5E6A     		ldr	r6, [r3, #36]
 1721              		.loc 1 1236 9 view .LVU486
 1722 000e 721C     		adds	r2, r6, #1
 1723              	.LVL175:
1237:Src/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 1724              		.loc 1 1237 3 is_stmt 1 view .LVU487
 1725              		.loc 1 1237 21 is_stmt 0 view .LVU488
 1726 0010 1B6A     		ldr	r3, [r3, #32]
 1727              		.loc 1 1237 6 view .LVU489
 1728 0012 9342     		cmp	r3, r2
 1729 0014 17D0     		beq	.L105
 1730              	.LVL176:
 1731              	.L100:
1238:Src/SEGGER_RTT.c ****     WrOff = 0;
1239:Src/SEGGER_RTT.c ****   }
1240:Src/SEGGER_RTT.c ****   //
1241:Src/SEGGER_RTT.c ****   // Output byte if free space is available
1242:Src/SEGGER_RTT.c ****   //
1243:Src/SEGGER_RTT.c ****   if (WrOff != pRing->RdOff) {
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 57


 1732              		.loc 1 1243 3 is_stmt 1 view .LVU490
 1733              		.loc 1 1243 21 is_stmt 0 view .LVU491
 1734 0016 00EB4003 		add	r3, r0, r0, lsl #1
 1735 001a DC00     		lsls	r4, r3, #3
 1736 001c 0C4B     		ldr	r3, .L106
 1737 001e 2344     		add	r3, r3, r4
 1738 0020 9B6A     		ldr	r3, [r3, #40]
 1739              		.loc 1 1243 6 view .LVU492
 1740 0022 9342     		cmp	r3, r2
 1741 0024 11D0     		beq	.L103
1244:Src/SEGGER_RTT.c ****     pRing->pBuffer[pRing->WrOff] = c;
 1742              		.loc 1 1244 5 is_stmt 1 view .LVU493
 1743              		.loc 1 1244 10 is_stmt 0 view .LVU494
 1744 0026 0A4C     		ldr	r4, .L106
 1745 0028 431C     		adds	r3, r0, #1
 1746 002a 03EB4303 		add	r3, r3, r3, lsl #1
 1747 002e DD00     		lsls	r5, r3, #3
 1748 0030 2544     		add	r5, r5, r4
 1749 0032 6B68     		ldr	r3, [r5, #4]
 1750              		.loc 1 1244 34 view .LVU495
 1751 0034 9955     		strb	r1, [r3, r6]
1245:Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 1752              		.loc 1 1245 5 is_stmt 1 view .LVU496
 1753              		.loc 1 1245 18 is_stmt 0 view .LVU497
 1754 0036 00EB4000 		add	r0, r0, r0, lsl #1
 1755              	.LVL177:
 1756              		.loc 1 1245 18 view .LVU498
 1757 003a C300     		lsls	r3, r0, #3
 1758 003c 1C44     		add	r4, r4, r3
 1759 003e 6262     		str	r2, [r4, #36]
1246:Src/SEGGER_RTT.c ****     Status = 1;
 1760              		.loc 1 1246 5 is_stmt 1 view .LVU499
 1761              	.LVL178:
 1762              		.loc 1 1246 12 is_stmt 0 view .LVU500
 1763 0040 0120     		movs	r0, #1
 1764              	.LVL179:
 1765              	.L99:
1247:Src/SEGGER_RTT.c ****   } else {
1248:Src/SEGGER_RTT.c ****     Status = 0;
1249:Src/SEGGER_RTT.c ****   }
1250:Src/SEGGER_RTT.c ****   //
1251:Src/SEGGER_RTT.c ****   return Status;
1252:Src/SEGGER_RTT.c **** }
 1766              		.loc 1 1252 1 view .LVU501
 1767 0042 70BC     		pop	{r4, r5, r6}
 1768              	.LCFI16:
 1769              		.cfi_remember_state
 1770              		.cfi_restore 6
 1771              		.cfi_restore 5
 1772              		.cfi_restore 4
 1773              		.cfi_def_cfa_offset 0
 1774 0044 7047     		bx	lr
 1775              	.LVL180:
 1776              	.L105:
 1777              	.LCFI17:
 1778              		.cfi_restore_state
1238:Src/SEGGER_RTT.c ****   }
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 58


 1779              		.loc 1 1238 11 view .LVU502
 1780 0046 0022     		movs	r2, #0
 1781              	.LVL181:
1238:Src/SEGGER_RTT.c ****   }
 1782              		.loc 1 1238 11 view .LVU503
 1783 0048 E5E7     		b	.L100
 1784              	.LVL182:
 1785              	.L103:
1248:Src/SEGGER_RTT.c ****   }
 1786              		.loc 1 1248 12 view .LVU504
 1787 004a 0020     		movs	r0, #0
 1788              	.LVL183:
1251:Src/SEGGER_RTT.c **** }
 1789              		.loc 1 1251 3 is_stmt 1 view .LVU505
1251:Src/SEGGER_RTT.c **** }
 1790              		.loc 1 1251 10 is_stmt 0 view .LVU506
 1791 004c F9E7     		b	.L99
 1792              	.L107:
 1793 004e 00BF     		.align	2
 1794              	.L106:
 1795 0050 00000000 		.word	_SEGGER_RTT
 1796              		.cfi_endproc
 1797              	.LFE15:
 1799              		.section	.text.SEGGER_RTT_PutCharSkip,"ax",%progbits
 1800              		.align	1
 1801              		.global	SEGGER_RTT_PutCharSkip
 1802              		.syntax unified
 1803              		.thumb
 1804              		.thumb_func
 1805              		.fpu fpv5-d16
 1807              	SEGGER_RTT_PutCharSkip:
 1808              	.LVL184:
 1809              	.LFB16:
1253:Src/SEGGER_RTT.c **** 
1254:Src/SEGGER_RTT.c **** /*********************************************************************
1255:Src/SEGGER_RTT.c **** *
1256:Src/SEGGER_RTT.c **** *       SEGGER_RTT_PutCharSkip
1257:Src/SEGGER_RTT.c **** *
1258:Src/SEGGER_RTT.c **** *  Function description
1259:Src/SEGGER_RTT.c **** *    Stores a single character/byte in SEGGER RTT buffer.
1260:Src/SEGGER_RTT.c **** *
1261:Src/SEGGER_RTT.c **** *  Parameters
1262:Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1263:Src/SEGGER_RTT.c **** *    c            Byte to be stored.
1264:Src/SEGGER_RTT.c **** *
1265:Src/SEGGER_RTT.c **** *  Return value
1266:Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1267:Src/SEGGER_RTT.c **** *
1268:Src/SEGGER_RTT.c **** *  Notes
1269:Src/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, the character is dropped.
1270:Src/SEGGER_RTT.c **** */
1271:Src/SEGGER_RTT.c **** 
1272:Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_PutCharSkip(unsigned BufferIndex, char c) {
 1810              		.loc 1 1272 63 is_stmt 1 view -0
 1811              		.cfi_startproc
 1812              		@ args = 0, pretend = 0, frame = 0
 1813              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 59


 1814              		.loc 1 1272 63 is_stmt 0 view .LVU508
 1815 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1816              	.LCFI18:
 1817              		.cfi_def_cfa_offset 24
 1818              		.cfi_offset 3, -24
 1819              		.cfi_offset 4, -20
 1820              		.cfi_offset 5, -16
 1821              		.cfi_offset 6, -12
 1822              		.cfi_offset 7, -8
 1823              		.cfi_offset 14, -4
 1824 0002 0446     		mov	r4, r0
 1825 0004 0D46     		mov	r5, r1
1273:Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1826              		.loc 1 1273 3 is_stmt 1 view .LVU509
1274:Src/SEGGER_RTT.c ****   unsigned              WrOff;
 1827              		.loc 1 1274 3 view .LVU510
1275:Src/SEGGER_RTT.c ****   unsigned              Status;
 1828              		.loc 1 1275 3 view .LVU511
1276:Src/SEGGER_RTT.c ****   //
1277:Src/SEGGER_RTT.c ****   // Prepare
1278:Src/SEGGER_RTT.c ****   //
1279:Src/SEGGER_RTT.c ****   INIT();
 1829              		.loc 1 1279 3 view .LVU512
 1830              		.loc 1 1279 3 view .LVU513
 1831 0006 194B     		ldr	r3, .L117
 1832 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1833 000a 43B3     		cbz	r3, .L115
 1834              	.LVL185:
 1835              	.L109:
 1836              	.LBB6:
1280:Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1837              		.loc 1 1280 3 view .LVU514
 1838              		.loc 1 1280 3 view .LVU515
 1839              		.syntax unified
 1840              	@ 1280 "Src/SEGGER_RTT.c" 1
 1841 000c EFF31186 		mrs   r6, basepri  
 1842 0010 4FF02001 		mov   r1, #32       
 1843 0014 81F31188 		msr   basepri, r1  
 1844              		
 1845              	@ 0 "" 2
 1846              	.LVL186:
 1847              		.loc 1 1280 20 view .LVU516
1281:Src/SEGGER_RTT.c ****   //
1282:Src/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1283:Src/SEGGER_RTT.c ****   //
1284:Src/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aUp[BufferIndex];
 1848              		.loc 1 1284 3 view .LVU517
1285:Src/SEGGER_RTT.c ****   //
1286:Src/SEGGER_RTT.c ****   // Get write position and handle wrap-around if necessary
1287:Src/SEGGER_RTT.c ****   //
1288:Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff + 1;
 1849              		.loc 1 1288 3 view .LVU518
 1850              		.loc 1 1288 16 is_stmt 0 view .LVU519
 1851              		.thumb
 1852              		.syntax unified
 1853 0018 6200     		lsls	r2, r4, #1
 1854 001a 2244     		add	r2, r2, r4
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 60


 1855 001c D100     		lsls	r1, r2, #3
 1856 001e 134B     		ldr	r3, .L117
 1857 0020 0B44     		add	r3, r3, r1
 1858 0022 5F6A     		ldr	r7, [r3, #36]
 1859              		.loc 1 1288 9 view .LVU520
 1860 0024 7A1C     		adds	r2, r7, #1
 1861              	.LVL187:
1289:Src/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 1862              		.loc 1 1289 3 is_stmt 1 view .LVU521
 1863              		.loc 1 1289 21 is_stmt 0 view .LVU522
 1864 0026 1B6A     		ldr	r3, [r3, #32]
 1865              		.loc 1 1289 6 view .LVU523
 1866 0028 9342     		cmp	r3, r2
 1867 002a 1BD0     		beq	.L116
 1868              	.LVL188:
 1869              	.L110:
1290:Src/SEGGER_RTT.c ****     WrOff = 0;
1291:Src/SEGGER_RTT.c ****   }
1292:Src/SEGGER_RTT.c ****   //
1293:Src/SEGGER_RTT.c ****   // Output byte if free space is available
1294:Src/SEGGER_RTT.c ****   //
1295:Src/SEGGER_RTT.c ****   if (WrOff != pRing->RdOff) {
 1870              		.loc 1 1295 3 is_stmt 1 view .LVU524
 1871              		.loc 1 1295 21 is_stmt 0 view .LVU525
 1872 002c 04EB4403 		add	r3, r4, r4, lsl #1
 1873 0030 D900     		lsls	r1, r3, #3
 1874 0032 0E4B     		ldr	r3, .L117
 1875 0034 0B44     		add	r3, r3, r1
 1876 0036 9B6A     		ldr	r3, [r3, #40]
 1877              		.loc 1 1295 6 view .LVU526
 1878 0038 9342     		cmp	r3, r2
 1879 003a 15D0     		beq	.L113
1296:Src/SEGGER_RTT.c ****     pRing->pBuffer[pRing->WrOff] = c;
 1880              		.loc 1 1296 5 is_stmt 1 view .LVU527
 1881              		.loc 1 1296 10 is_stmt 0 view .LVU528
 1882 003c 0B49     		ldr	r1, .L117
 1883 003e 631C     		adds	r3, r4, #1
 1884 0040 03EB4303 		add	r3, r3, r3, lsl #1
 1885 0044 D800     		lsls	r0, r3, #3
 1886 0046 0844     		add	r0, r0, r1
 1887 0048 4368     		ldr	r3, [r0, #4]
 1888              		.loc 1 1296 34 view .LVU529
 1889 004a DD55     		strb	r5, [r3, r7]
1297:Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 1890              		.loc 1 1297 5 is_stmt 1 view .LVU530
 1891              		.loc 1 1297 18 is_stmt 0 view .LVU531
 1892 004c 04EB4404 		add	r4, r4, r4, lsl #1
 1893              	.LVL189:
 1894              		.loc 1 1297 18 view .LVU532
 1895 0050 E300     		lsls	r3, r4, #3
 1896 0052 1944     		add	r1, r1, r3
 1897 0054 4A62     		str	r2, [r1, #36]
1298:Src/SEGGER_RTT.c ****     Status = 1;
 1898              		.loc 1 1298 5 is_stmt 1 view .LVU533
 1899              	.LVL190:
 1900              		.loc 1 1298 12 is_stmt 0 view .LVU534
 1901 0056 0120     		movs	r0, #1
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 61


 1902              	.LVL191:
 1903              	.L111:
1299:Src/SEGGER_RTT.c ****   } else {
1300:Src/SEGGER_RTT.c ****     Status = 0;
1301:Src/SEGGER_RTT.c ****   }
1302:Src/SEGGER_RTT.c ****   //
1303:Src/SEGGER_RTT.c ****   // Finish up.
1304:Src/SEGGER_RTT.c ****   //
1305:Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1904              		.loc 1 1305 3 is_stmt 1 view .LVU535
 1905              		.syntax unified
 1906              	@ 1305 "Src/SEGGER_RTT.c" 1
 1907 0058 86F31188 		msr   basepri, r6  
 1908              		
 1909              	@ 0 "" 2
 1910              		.thumb
 1911              		.syntax unified
 1912              	.LBE6:
 1913              		.loc 1 1305 22 view .LVU536
1306:Src/SEGGER_RTT.c ****   //
1307:Src/SEGGER_RTT.c ****   return Status;
 1914              		.loc 1 1307 3 view .LVU537
1308:Src/SEGGER_RTT.c **** }
 1915              		.loc 1 1308 1 is_stmt 0 view .LVU538
 1916 005c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1917              	.LVL192:
 1918              	.L115:
1279:Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1919              		.loc 1 1279 3 is_stmt 1 discriminator 1 view .LVU539
 1920 005e FFF7FEFF 		bl	_DoInit
 1921              	.LVL193:
1279:Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1922              		.loc 1 1279 3 is_stmt 0 discriminator 1 view .LVU540
 1923 0062 D3E7     		b	.L109
 1924              	.LVL194:
 1925              	.L116:
 1926              	.LBB7:
1290:Src/SEGGER_RTT.c ****   }
 1927              		.loc 1 1290 11 view .LVU541
 1928 0064 0022     		movs	r2, #0
 1929              	.LVL195:
1290:Src/SEGGER_RTT.c ****   }
 1930              		.loc 1 1290 11 view .LVU542
 1931 0066 E1E7     		b	.L110
 1932              	.LVL196:
 1933              	.L113:
1300:Src/SEGGER_RTT.c ****   }
 1934              		.loc 1 1300 12 view .LVU543
 1935 0068 0020     		movs	r0, #0
 1936 006a F5E7     		b	.L111
 1937              	.L118:
 1938              		.align	2
 1939              	.L117:
 1940 006c 00000000 		.word	_SEGGER_RTT
 1941              	.LBE7:
 1942              		.cfi_endproc
 1943              	.LFE16:
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 62


 1945              		.section	.text.SEGGER_RTT_PutChar,"ax",%progbits
 1946              		.align	1
 1947              		.global	SEGGER_RTT_PutChar
 1948              		.syntax unified
 1949              		.thumb
 1950              		.thumb_func
 1951              		.fpu fpv5-d16
 1953              	SEGGER_RTT_PutChar:
 1954              	.LVL197:
 1955              	.LFB17:
1309:Src/SEGGER_RTT.c **** 
1310:Src/SEGGER_RTT.c ****  /*********************************************************************
1311:Src/SEGGER_RTT.c **** *
1312:Src/SEGGER_RTT.c **** *       SEGGER_RTT_PutChar
1313:Src/SEGGER_RTT.c **** *
1314:Src/SEGGER_RTT.c **** *  Function description
1315:Src/SEGGER_RTT.c **** *    Stores a single character/byte in SEGGER RTT buffer.
1316:Src/SEGGER_RTT.c **** *
1317:Src/SEGGER_RTT.c **** *  Parameters
1318:Src/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1319:Src/SEGGER_RTT.c **** *    c            Byte to be stored.
1320:Src/SEGGER_RTT.c **** *
1321:Src/SEGGER_RTT.c **** *  Return value
1322:Src/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1323:Src/SEGGER_RTT.c **** *
1324:Src/SEGGER_RTT.c **** *  Notes
1325:Src/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1326:Src/SEGGER_RTT.c **** */
1327:Src/SEGGER_RTT.c **** 
1328:Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_PutChar(unsigned BufferIndex, char c) {
 1956              		.loc 1 1328 59 is_stmt 1 view -0
 1957              		.cfi_startproc
 1958              		@ args = 0, pretend = 0, frame = 0
 1959              		@ frame_needed = 0, uses_anonymous_args = 0
 1960              		.loc 1 1328 59 is_stmt 0 view .LVU545
 1961 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1962              	.LCFI19:
 1963              		.cfi_def_cfa_offset 24
 1964              		.cfi_offset 3, -24
 1965              		.cfi_offset 4, -20
 1966              		.cfi_offset 5, -16
 1967              		.cfi_offset 6, -12
 1968              		.cfi_offset 7, -8
 1969              		.cfi_offset 14, -4
 1970 0002 0446     		mov	r4, r0
 1971 0004 0D46     		mov	r5, r1
1329:Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1972              		.loc 1 1329 3 is_stmt 1 view .LVU546
1330:Src/SEGGER_RTT.c ****   unsigned              WrOff;
 1973              		.loc 1 1330 3 view .LVU547
1331:Src/SEGGER_RTT.c ****   unsigned              Status;
 1974              		.loc 1 1331 3 view .LVU548
1332:Src/SEGGER_RTT.c ****   //
1333:Src/SEGGER_RTT.c ****   // Prepare
1334:Src/SEGGER_RTT.c ****   //
1335:Src/SEGGER_RTT.c ****   INIT();
 1975              		.loc 1 1335 3 view .LVU549
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 63


 1976              		.loc 1 1335 3 view .LVU550
 1977 0006 224B     		ldr	r3, .L130
 1978 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1979 000a 83B3     		cbz	r3, .L128
 1980              	.LVL198:
 1981              	.L120:
 1982              	.LBB8:
1336:Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1983              		.loc 1 1336 3 view .LVU551
 1984              		.loc 1 1336 3 view .LVU552
 1985              		.syntax unified
 1986              	@ 1336 "Src/SEGGER_RTT.c" 1
 1987 000c EFF31186 		mrs   r6, basepri  
 1988 0010 4FF02001 		mov   r1, #32       
 1989 0014 81F31188 		msr   basepri, r1  
 1990              		
 1991              	@ 0 "" 2
 1992              	.LVL199:
 1993              		.loc 1 1336 20 view .LVU553
1337:Src/SEGGER_RTT.c ****   //
1338:Src/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1339:Src/SEGGER_RTT.c ****   //
1340:Src/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aUp[BufferIndex];
 1994              		.loc 1 1340 3 view .LVU554
1341:Src/SEGGER_RTT.c ****   //
1342:Src/SEGGER_RTT.c ****   // Get write position and handle wrap-around if necessary
1343:Src/SEGGER_RTT.c ****   //
1344:Src/SEGGER_RTT.c ****   WrOff = pRing->WrOff + 1;
 1995              		.loc 1 1344 3 view .LVU555
 1996              		.loc 1 1344 16 is_stmt 0 view .LVU556
 1997              		.thumb
 1998              		.syntax unified
 1999 0018 6200     		lsls	r2, r4, #1
 2000 001a 2244     		add	r2, r2, r4
 2001 001c D100     		lsls	r1, r2, #3
 2002 001e 1C4B     		ldr	r3, .L130
 2003 0020 0B44     		add	r3, r3, r1
 2004 0022 586A     		ldr	r0, [r3, #36]
 2005              		.loc 1 1344 9 view .LVU557
 2006 0024 411C     		adds	r1, r0, #1
 2007              	.LVL200:
1345:Src/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 2008              		.loc 1 1345 3 is_stmt 1 view .LVU558
 2009              		.loc 1 1345 21 is_stmt 0 view .LVU559
 2010 0026 1B6A     		ldr	r3, [r3, #32]
 2011              		.loc 1 1345 6 view .LVU560
 2012 0028 8B42     		cmp	r3, r1
 2013 002a 23D0     		beq	.L129
 2014              	.LVL201:
 2015              	.L121:
1346:Src/SEGGER_RTT.c ****     WrOff = 0;
1347:Src/SEGGER_RTT.c ****   }
1348:Src/SEGGER_RTT.c ****   //
1349:Src/SEGGER_RTT.c ****   // Wait for free space if mode is set to blocking
1350:Src/SEGGER_RTT.c ****   //
1351:Src/SEGGER_RTT.c ****   if (pRing->Flags == SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL) {
 2016              		.loc 1 1351 3 is_stmt 1 view .LVU561
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 64


 2017              		.loc 1 1351 12 is_stmt 0 view .LVU562
 2018 002c 04EB4403 		add	r3, r4, r4, lsl #1
 2019 0030 DA00     		lsls	r2, r3, #3
 2020 0032 174B     		ldr	r3, .L130
 2021 0034 1344     		add	r3, r3, r2
 2022 0036 DB6A     		ldr	r3, [r3, #44]
 2023              		.loc 1 1351 6 view .LVU563
 2024 0038 022B     		cmp	r3, #2
 2025 003a 1DD0     		beq	.L123
 2026              	.L122:
1352:Src/SEGGER_RTT.c ****     while (WrOff == pRing->RdOff) {
1353:Src/SEGGER_RTT.c ****       ;
1354:Src/SEGGER_RTT.c ****     }
1355:Src/SEGGER_RTT.c ****   }
1356:Src/SEGGER_RTT.c ****   //
1357:Src/SEGGER_RTT.c ****   // Output byte if free space is available
1358:Src/SEGGER_RTT.c ****   //
1359:Src/SEGGER_RTT.c ****   if (WrOff != pRing->RdOff) {
 2027              		.loc 1 1359 3 is_stmt 1 view .LVU564
 2028              		.loc 1 1359 21 is_stmt 0 view .LVU565
 2029 003c 04EB4403 		add	r3, r4, r4, lsl #1
 2030 0040 DA00     		lsls	r2, r3, #3
 2031 0042 134B     		ldr	r3, .L130
 2032 0044 1344     		add	r3, r3, r2
 2033 0046 9B6A     		ldr	r3, [r3, #40]
 2034              		.loc 1 1359 6 view .LVU566
 2035 0048 8B42     		cmp	r3, r1
 2036 004a 1ED0     		beq	.L126
1360:Src/SEGGER_RTT.c ****     pRing->pBuffer[pRing->WrOff] = c;
 2037              		.loc 1 1360 5 is_stmt 1 view .LVU567
 2038              		.loc 1 1360 10 is_stmt 0 view .LVU568
 2039 004c 104A     		ldr	r2, .L130
 2040 004e 631C     		adds	r3, r4, #1
 2041 0050 03EB4303 		add	r3, r3, r3, lsl #1
 2042 0054 DF00     		lsls	r7, r3, #3
 2043 0056 1744     		add	r7, r7, r2
 2044 0058 7B68     		ldr	r3, [r7, #4]
 2045              		.loc 1 1360 34 view .LVU569
 2046 005a 1D54     		strb	r5, [r3, r0]
1361:Src/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 2047              		.loc 1 1361 5 is_stmt 1 view .LVU570
 2048              		.loc 1 1361 18 is_stmt 0 view .LVU571
 2049 005c 04EB4404 		add	r4, r4, r4, lsl #1
 2050              	.LVL202:
 2051              		.loc 1 1361 18 view .LVU572
 2052 0060 E300     		lsls	r3, r4, #3
 2053 0062 1A44     		add	r2, r2, r3
 2054 0064 5162     		str	r1, [r2, #36]
1362:Src/SEGGER_RTT.c ****     Status = 1;
 2055              		.loc 1 1362 5 is_stmt 1 view .LVU573
 2056              	.LVL203:
 2057              		.loc 1 1362 12 is_stmt 0 view .LVU574
 2058 0066 0120     		movs	r0, #1
 2059              	.LVL204:
 2060              	.L124:
1363:Src/SEGGER_RTT.c ****   } else {
1364:Src/SEGGER_RTT.c ****     Status = 0;
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 65


1365:Src/SEGGER_RTT.c ****   }
1366:Src/SEGGER_RTT.c ****   //
1367:Src/SEGGER_RTT.c ****   // Finish up.
1368:Src/SEGGER_RTT.c ****   //
1369:Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 2061              		.loc 1 1369 3 is_stmt 1 view .LVU575
 2062              		.syntax unified
 2063              	@ 1369 "Src/SEGGER_RTT.c" 1
 2064 0068 86F31188 		msr   basepri, r6  
 2065              		
 2066              	@ 0 "" 2
 2067              		.thumb
 2068              		.syntax unified
 2069              	.LBE8:
 2070              		.loc 1 1369 22 view .LVU576
1370:Src/SEGGER_RTT.c ****   //
1371:Src/SEGGER_RTT.c ****   return Status;
 2071              		.loc 1 1371 3 view .LVU577
1372:Src/SEGGER_RTT.c **** }
 2072              		.loc 1 1372 1 is_stmt 0 view .LVU578
 2073 006c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2074              	.LVL205:
 2075              	.L128:
1335:Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2076              		.loc 1 1335 3 is_stmt 1 discriminator 1 view .LVU579
 2077 006e FFF7FEFF 		bl	_DoInit
 2078              	.LVL206:
1335:Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2079              		.loc 1 1335 3 is_stmt 0 discriminator 1 view .LVU580
 2080 0072 CBE7     		b	.L120
 2081              	.LVL207:
 2082              	.L129:
 2083              	.LBB9:
1346:Src/SEGGER_RTT.c ****   }
 2084              		.loc 1 1346 11 view .LVU581
 2085 0074 0021     		movs	r1, #0
 2086              	.LVL208:
1346:Src/SEGGER_RTT.c ****   }
 2087              		.loc 1 1346 11 view .LVU582
 2088 0076 D9E7     		b	.L121
 2089              	.LVL209:
 2090              	.L123:
1353:Src/SEGGER_RTT.c ****     }
 2091              		.loc 1 1353 7 is_stmt 1 discriminator 1 view .LVU583
1352:Src/SEGGER_RTT.c ****       ;
 2092              		.loc 1 1352 26 is_stmt 0 discriminator 1 view .LVU584
 2093 0078 04EB4403 		add	r3, r4, r4, lsl #1
 2094 007c DA00     		lsls	r2, r3, #3
 2095 007e 044B     		ldr	r3, .L130
 2096 0080 1344     		add	r3, r3, r2
 2097 0082 9B6A     		ldr	r3, [r3, #40]
1352:Src/SEGGER_RTT.c ****       ;
 2098              		.loc 1 1352 11 discriminator 1 view .LVU585
 2099 0084 8B42     		cmp	r3, r1
 2100 0086 F7D0     		beq	.L123
 2101 0088 D8E7     		b	.L122
 2102              	.L126:
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 66


1364:Src/SEGGER_RTT.c ****   }
 2103              		.loc 1 1364 12 view .LVU586
 2104 008a 0020     		movs	r0, #0
 2105 008c ECE7     		b	.L124
 2106              	.L131:
 2107 008e 00BF     		.align	2
 2108              	.L130:
 2109 0090 00000000 		.word	_SEGGER_RTT
 2110              	.LBE9:
 2111              		.cfi_endproc
 2112              	.LFE17:
 2114              		.section	.text.SEGGER_RTT_GetKey,"ax",%progbits
 2115              		.align	1
 2116              		.global	SEGGER_RTT_GetKey
 2117              		.syntax unified
 2118              		.thumb
 2119              		.thumb_func
 2120              		.fpu fpv5-d16
 2122              	SEGGER_RTT_GetKey:
 2123              	.LFB18:
1373:Src/SEGGER_RTT.c **** 
1374:Src/SEGGER_RTT.c **** /*********************************************************************
1375:Src/SEGGER_RTT.c **** *
1376:Src/SEGGER_RTT.c **** *       SEGGER_RTT_GetKey
1377:Src/SEGGER_RTT.c **** *
1378:Src/SEGGER_RTT.c **** *  Function description
1379:Src/SEGGER_RTT.c **** *    Reads one character from the SEGGER RTT buffer.
1380:Src/SEGGER_RTT.c **** *    Host has previously stored data there.
1381:Src/SEGGER_RTT.c **** *
1382:Src/SEGGER_RTT.c **** *  Return value
1383:Src/SEGGER_RTT.c **** *    <  0 -   No character available (buffer empty).
1384:Src/SEGGER_RTT.c **** *    >= 0 -   Character which has been read. (Possible values: 0 - 255)
1385:Src/SEGGER_RTT.c **** *
1386:Src/SEGGER_RTT.c **** *  Notes
1387:Src/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0.
1388:Src/SEGGER_RTT.c **** */
1389:Src/SEGGER_RTT.c **** int SEGGER_RTT_GetKey(void) {
 2124              		.loc 1 1389 29 is_stmt 1 view -0
 2125              		.cfi_startproc
 2126              		@ args = 0, pretend = 0, frame = 8
 2127              		@ frame_needed = 0, uses_anonymous_args = 0
 2128 0000 00B5     		push	{lr}
 2129              	.LCFI20:
 2130              		.cfi_def_cfa_offset 4
 2131              		.cfi_offset 14, -4
 2132 0002 83B0     		sub	sp, sp, #12
 2133              	.LCFI21:
 2134              		.cfi_def_cfa_offset 16
1390:Src/SEGGER_RTT.c ****   char c;
 2135              		.loc 1 1390 3 view .LVU588
1391:Src/SEGGER_RTT.c ****   int r;
 2136              		.loc 1 1391 3 view .LVU589
1392:Src/SEGGER_RTT.c **** 
1393:Src/SEGGER_RTT.c ****   r = (int)SEGGER_RTT_Read(0u, &c, 1u);
 2137              		.loc 1 1393 3 view .LVU590
 2138              		.loc 1 1393 12 is_stmt 0 view .LVU591
 2139 0004 0122     		movs	r2, #1
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 67


 2140 0006 0DF10701 		add	r1, sp, #7
 2141 000a 0020     		movs	r0, #0
 2142 000c FFF7FEFF 		bl	SEGGER_RTT_Read
 2143              	.LVL210:
1394:Src/SEGGER_RTT.c ****   if (r == 1) {
 2144              		.loc 1 1394 3 is_stmt 1 view .LVU592
 2145              		.loc 1 1394 6 is_stmt 0 view .LVU593
 2146 0010 0128     		cmp	r0, #1
 2147 0012 04D1     		bne	.L134
1395:Src/SEGGER_RTT.c ****     r = (int)(unsigned char)c;
 2148              		.loc 1 1395 5 is_stmt 1 view .LVU594
 2149              		.loc 1 1395 9 is_stmt 0 view .LVU595
 2150 0014 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2151              	.LVL211:
 2152              	.L132:
1396:Src/SEGGER_RTT.c ****   } else {
1397:Src/SEGGER_RTT.c ****     r = -1;
1398:Src/SEGGER_RTT.c ****   }
1399:Src/SEGGER_RTT.c ****   return r;
1400:Src/SEGGER_RTT.c **** }
 2153              		.loc 1 1400 1 view .LVU596
 2154 0018 03B0     		add	sp, sp, #12
 2155              	.LCFI22:
 2156              		.cfi_remember_state
 2157              		.cfi_def_cfa_offset 4
 2158              		@ sp needed
 2159 001a 5DF804FB 		ldr	pc, [sp], #4
 2160              	.LVL212:
 2161              	.L134:
 2162              	.LCFI23:
 2163              		.cfi_restore_state
1397:Src/SEGGER_RTT.c ****   }
 2164              		.loc 1 1397 7 view .LVU597
 2165 001e 4FF0FF30 		mov	r0, #-1
 2166              	.LVL213:
1399:Src/SEGGER_RTT.c **** }
 2167              		.loc 1 1399 3 is_stmt 1 view .LVU598
1399:Src/SEGGER_RTT.c **** }
 2168              		.loc 1 1399 10 is_stmt 0 view .LVU599
 2169 0022 F9E7     		b	.L132
 2170              		.cfi_endproc
 2171              	.LFE18:
 2173              		.section	.text.SEGGER_RTT_WaitKey,"ax",%progbits
 2174              		.align	1
 2175              		.global	SEGGER_RTT_WaitKey
 2176              		.syntax unified
 2177              		.thumb
 2178              		.thumb_func
 2179              		.fpu fpv5-d16
 2181              	SEGGER_RTT_WaitKey:
 2182              	.LFB19:
1401:Src/SEGGER_RTT.c **** 
1402:Src/SEGGER_RTT.c **** /*********************************************************************
1403:Src/SEGGER_RTT.c **** *
1404:Src/SEGGER_RTT.c **** *       SEGGER_RTT_WaitKey
1405:Src/SEGGER_RTT.c **** *
1406:Src/SEGGER_RTT.c **** *  Function description
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 68


1407:Src/SEGGER_RTT.c **** *    Waits until at least one character is avaible in the SEGGER RTT buffer.
1408:Src/SEGGER_RTT.c **** *    Once a character is available, it is read and this function returns.
1409:Src/SEGGER_RTT.c **** *
1410:Src/SEGGER_RTT.c **** *  Return value
1411:Src/SEGGER_RTT.c **** *    >=0 -   Character which has been read.
1412:Src/SEGGER_RTT.c **** *
1413:Src/SEGGER_RTT.c **** *  Notes
1414:Src/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0
1415:Src/SEGGER_RTT.c **** *    (2) This function is blocking if no character is present in RTT buffer
1416:Src/SEGGER_RTT.c **** */
1417:Src/SEGGER_RTT.c **** int SEGGER_RTT_WaitKey(void) {
 2183              		.loc 1 1417 30 is_stmt 1 view -0
 2184              		.cfi_startproc
 2185              		@ args = 0, pretend = 0, frame = 0
 2186              		@ frame_needed = 0, uses_anonymous_args = 0
 2187 0000 08B5     		push	{r3, lr}
 2188              	.LCFI24:
 2189              		.cfi_def_cfa_offset 8
 2190              		.cfi_offset 3, -8
 2191              		.cfi_offset 14, -4
 2192              	.L137:
1418:Src/SEGGER_RTT.c ****   int r;
 2193              		.loc 1 1418 3 discriminator 1 view .LVU601
1419:Src/SEGGER_RTT.c **** 
1420:Src/SEGGER_RTT.c ****   do {
 2194              		.loc 1 1420 3 discriminator 1 view .LVU602
1421:Src/SEGGER_RTT.c ****     r = SEGGER_RTT_GetKey();
 2195              		.loc 1 1421 5 discriminator 1 view .LVU603
 2196              		.loc 1 1421 9 is_stmt 0 discriminator 1 view .LVU604
 2197 0002 FFF7FEFF 		bl	SEGGER_RTT_GetKey
 2198              	.LVL214:
1422:Src/SEGGER_RTT.c ****   } while (r < 0);
 2199              		.loc 1 1422 3 discriminator 1 view .LVU605
 2200 0006 0028     		cmp	r0, #0
 2201              		.loc 1 1422 3 discriminator 1 view .LVU606
 2202 0008 FBDB     		blt	.L137
1423:Src/SEGGER_RTT.c ****   return r;
1424:Src/SEGGER_RTT.c **** }
 2203              		.loc 1 1424 1 view .LVU607
 2204 000a 08BD     		pop	{r3, pc}
 2205              		.cfi_endproc
 2206              	.LFE19:
 2208              		.section	.text.SEGGER_RTT_HasKey,"ax",%progbits
 2209              		.align	1
 2210              		.global	SEGGER_RTT_HasKey
 2211              		.syntax unified
 2212              		.thumb
 2213              		.thumb_func
 2214              		.fpu fpv5-d16
 2216              	SEGGER_RTT_HasKey:
 2217              	.LFB20:
1425:Src/SEGGER_RTT.c **** 
1426:Src/SEGGER_RTT.c **** /*********************************************************************
1427:Src/SEGGER_RTT.c **** *
1428:Src/SEGGER_RTT.c **** *       SEGGER_RTT_HasKey
1429:Src/SEGGER_RTT.c **** *
1430:Src/SEGGER_RTT.c **** *  Function description
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 69


1431:Src/SEGGER_RTT.c **** *    Checks if at least one character for reading is available in the SEGGER RTT buffer.
1432:Src/SEGGER_RTT.c **** *
1433:Src/SEGGER_RTT.c **** *  Return value
1434:Src/SEGGER_RTT.c **** *    == 0 -     No characters are available to read.
1435:Src/SEGGER_RTT.c **** *    == 1 -     At least one character is available.
1436:Src/SEGGER_RTT.c **** *
1437:Src/SEGGER_RTT.c **** *  Notes
1438:Src/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0
1439:Src/SEGGER_RTT.c **** */
1440:Src/SEGGER_RTT.c **** int SEGGER_RTT_HasKey(void) {
 2218              		.loc 1 1440 29 is_stmt 1 view -0
 2219              		.cfi_startproc
 2220              		@ args = 0, pretend = 0, frame = 0
 2221              		@ frame_needed = 0, uses_anonymous_args = 0
 2222 0000 08B5     		push	{r3, lr}
 2223              	.LCFI25:
 2224              		.cfi_def_cfa_offset 8
 2225              		.cfi_offset 3, -8
 2226              		.cfi_offset 14, -4
1441:Src/SEGGER_RTT.c ****   unsigned RdOff;
 2227              		.loc 1 1441 3 view .LVU609
1442:Src/SEGGER_RTT.c ****   int r;
 2228              		.loc 1 1442 3 view .LVU610
1443:Src/SEGGER_RTT.c **** 
1444:Src/SEGGER_RTT.c ****   INIT();
 2229              		.loc 1 1444 3 view .LVU611
 2230              		.loc 1 1444 3 view .LVU612
 2231 0002 074B     		ldr	r3, .L145
 2232 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2233 0006 33B1     		cbz	r3, .L144
 2234              	.L140:
1445:Src/SEGGER_RTT.c ****   RdOff = _SEGGER_RTT.aDown[0].RdOff;
 2235              		.loc 1 1445 3 view .LVU613
 2236              		.loc 1 1445 9 is_stmt 0 view .LVU614
 2237 0008 054B     		ldr	r3, .L145
 2238 000a 1A6F     		ldr	r2, [r3, #112]
 2239              	.LVL215:
1446:Src/SEGGER_RTT.c ****   if (RdOff != _SEGGER_RTT.aDown[0].WrOff) {
 2240              		.loc 1 1446 3 is_stmt 1 view .LVU615
 2241              		.loc 1 1446 36 is_stmt 0 view .LVU616
 2242 000c DB6E     		ldr	r3, [r3, #108]
 2243              		.loc 1 1446 6 view .LVU617
 2244 000e 9342     		cmp	r3, r2
 2245 0010 04D0     		beq	.L142
1447:Src/SEGGER_RTT.c ****     r = 1;
 2246              		.loc 1 1447 7 view .LVU618
 2247 0012 0120     		movs	r0, #1
 2248              	.L139:
1448:Src/SEGGER_RTT.c ****   } else {
1449:Src/SEGGER_RTT.c ****     r = 0;
1450:Src/SEGGER_RTT.c ****   }
1451:Src/SEGGER_RTT.c ****   return r;
1452:Src/SEGGER_RTT.c **** }
 2249              		.loc 1 1452 1 view .LVU619
 2250 0014 08BD     		pop	{r3, pc}
 2251              	.LVL216:
 2252              	.L144:
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 70


1444:Src/SEGGER_RTT.c ****   RdOff = _SEGGER_RTT.aDown[0].RdOff;
 2253              		.loc 1 1444 3 is_stmt 1 discriminator 1 view .LVU620
 2254 0016 FFF7FEFF 		bl	_DoInit
 2255              	.LVL217:
 2256 001a F5E7     		b	.L140
 2257              	.LVL218:
 2258              	.L142:
1449:Src/SEGGER_RTT.c ****   }
 2259              		.loc 1 1449 7 is_stmt 0 view .LVU621
 2260 001c 0020     		movs	r0, #0
 2261              	.LVL219:
1451:Src/SEGGER_RTT.c **** }
 2262              		.loc 1 1451 3 is_stmt 1 view .LVU622
1451:Src/SEGGER_RTT.c **** }
 2263              		.loc 1 1451 10 is_stmt 0 view .LVU623
 2264 001e F9E7     		b	.L139
 2265              	.L146:
 2266              		.align	2
 2267              	.L145:
 2268 0020 00000000 		.word	_SEGGER_RTT
 2269              		.cfi_endproc
 2270              	.LFE20:
 2272              		.section	.text.SEGGER_RTT_HasData,"ax",%progbits
 2273              		.align	1
 2274              		.global	SEGGER_RTT_HasData
 2275              		.syntax unified
 2276              		.thumb
 2277              		.thumb_func
 2278              		.fpu fpv5-d16
 2280              	SEGGER_RTT_HasData:
 2281              	.LVL220:
 2282              	.LFB21:
1453:Src/SEGGER_RTT.c **** 
1454:Src/SEGGER_RTT.c **** /*********************************************************************
1455:Src/SEGGER_RTT.c **** *
1456:Src/SEGGER_RTT.c **** *       SEGGER_RTT_HasData
1457:Src/SEGGER_RTT.c **** *
1458:Src/SEGGER_RTT.c **** *  Function description
1459:Src/SEGGER_RTT.c **** *    Check if there is data from the host in the given buffer.
1460:Src/SEGGER_RTT.c **** *
1461:Src/SEGGER_RTT.c **** *  Return value:
1462:Src/SEGGER_RTT.c **** *  ==0:  No data
1463:Src/SEGGER_RTT.c **** *  !=0:  Data in buffer
1464:Src/SEGGER_RTT.c **** *
1465:Src/SEGGER_RTT.c **** */
1466:Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_HasData(unsigned BufferIndex) {
 2283              		.loc 1 1466 51 is_stmt 1 view -0
 2284              		.cfi_startproc
 2285              		@ args = 0, pretend = 0, frame = 0
 2286              		@ frame_needed = 0, uses_anonymous_args = 0
 2287              		@ link register save eliminated.
 2288              		.loc 1 1466 51 is_stmt 0 view .LVU625
 2289 0000 10B4     		push	{r4}
 2290              	.LCFI26:
 2291              		.cfi_def_cfa_offset 4
 2292              		.cfi_offset 4, -4
1467:Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 71


 2293              		.loc 1 1467 3 is_stmt 1 view .LVU626
1468:Src/SEGGER_RTT.c ****   unsigned                v;
 2294              		.loc 1 1468 3 view .LVU627
1469:Src/SEGGER_RTT.c **** 
1470:Src/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aDown[BufferIndex];
 2295              		.loc 1 1470 3 view .LVU628
 2296              	.LVL221:
1471:Src/SEGGER_RTT.c ****   v = pRing->WrOff;
 2297              		.loc 1 1471 3 view .LVU629
 2298              		.loc 1 1471 5 is_stmt 0 view .LVU630
 2299 0002 074A     		ldr	r2, .L149
 2300 0004 4300     		lsls	r3, r0, #1
 2301 0006 1C18     		adds	r4, r3, r0
 2302 0008 E100     		lsls	r1, r4, #3
 2303 000a 1144     		add	r1, r1, r2
 2304 000c CC6E     		ldr	r4, [r1, #108]
 2305              	.LVL222:
1472:Src/SEGGER_RTT.c ****   return v - pRing->RdOff;
 2306              		.loc 1 1472 3 is_stmt 1 view .LVU631
 2307              		.loc 1 1472 19 is_stmt 0 view .LVU632
 2308 000e 0344     		add	r3, r3, r0
 2309 0010 D900     		lsls	r1, r3, #3
 2310 0012 0A44     		add	r2, r2, r1
 2311 0014 106F     		ldr	r0, [r2, #112]
 2312              	.LVL223:
1473:Src/SEGGER_RTT.c **** }
 2313              		.loc 1 1473 1 view .LVU633
 2314 0016 201A     		subs	r0, r4, r0
 2315 0018 5DF8044B 		ldr	r4, [sp], #4
 2316              	.LCFI27:
 2317              		.cfi_restore 4
 2318              		.cfi_def_cfa_offset 0
 2319              	.LVL224:
 2320              		.loc 1 1473 1 view .LVU634
 2321 001c 7047     		bx	lr
 2322              	.L150:
 2323 001e 00BF     		.align	2
 2324              	.L149:
 2325 0020 00000000 		.word	_SEGGER_RTT
 2326              		.cfi_endproc
 2327              	.LFE21:
 2329              		.section	.text.SEGGER_RTT_HasDataUp,"ax",%progbits
 2330              		.align	1
 2331              		.global	SEGGER_RTT_HasDataUp
 2332              		.syntax unified
 2333              		.thumb
 2334              		.thumb_func
 2335              		.fpu fpv5-d16
 2337              	SEGGER_RTT_HasDataUp:
 2338              	.LVL225:
 2339              	.LFB22:
1474:Src/SEGGER_RTT.c **** 
1475:Src/SEGGER_RTT.c **** /*********************************************************************
1476:Src/SEGGER_RTT.c **** *
1477:Src/SEGGER_RTT.c **** *       SEGGER_RTT_HasDataUp
1478:Src/SEGGER_RTT.c **** *
1479:Src/SEGGER_RTT.c **** *  Function description
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 72


1480:Src/SEGGER_RTT.c **** *    Check if there is data remaining to be sent in the given buffer.
1481:Src/SEGGER_RTT.c **** *
1482:Src/SEGGER_RTT.c **** *  Return value:
1483:Src/SEGGER_RTT.c **** *  ==0:  No data
1484:Src/SEGGER_RTT.c **** *  !=0:  Data in buffer
1485:Src/SEGGER_RTT.c **** *
1486:Src/SEGGER_RTT.c **** */
1487:Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
 2340              		.loc 1 1487 53 is_stmt 1 view -0
 2341              		.cfi_startproc
 2342              		@ args = 0, pretend = 0, frame = 0
 2343              		@ frame_needed = 0, uses_anonymous_args = 0
 2344              		@ link register save eliminated.
 2345              		.loc 1 1487 53 is_stmt 0 view .LVU636
 2346 0000 10B4     		push	{r4}
 2347              	.LCFI28:
 2348              		.cfi_def_cfa_offset 4
 2349              		.cfi_offset 4, -4
1488:Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 2350              		.loc 1 1488 3 is_stmt 1 view .LVU637
1489:Src/SEGGER_RTT.c ****   unsigned                v;
 2351              		.loc 1 1489 3 view .LVU638
1490:Src/SEGGER_RTT.c **** 
1491:Src/SEGGER_RTT.c ****   pRing = &_SEGGER_RTT.aUp[BufferIndex];
 2352              		.loc 1 1491 3 view .LVU639
 2353              	.LVL226:
1492:Src/SEGGER_RTT.c ****   v = pRing->RdOff;
 2354              		.loc 1 1492 3 view .LVU640
 2355              		.loc 1 1492 5 is_stmt 0 view .LVU641
 2356 0002 074A     		ldr	r2, .L153
 2357 0004 4300     		lsls	r3, r0, #1
 2358 0006 1C18     		adds	r4, r3, r0
 2359 0008 E100     		lsls	r1, r4, #3
 2360 000a 1144     		add	r1, r1, r2
 2361 000c 8C6A     		ldr	r4, [r1, #40]
 2362              	.LVL227:
1493:Src/SEGGER_RTT.c ****   return pRing->WrOff - v;
 2363              		.loc 1 1493 3 is_stmt 1 view .LVU642
 2364              		.loc 1 1493 15 is_stmt 0 view .LVU643
 2365 000e 0344     		add	r3, r3, r0
 2366 0010 D900     		lsls	r1, r3, #3
 2367 0012 0A44     		add	r2, r2, r1
 2368 0014 506A     		ldr	r0, [r2, #36]
 2369              	.LVL228:
1494:Src/SEGGER_RTT.c **** }
 2370              		.loc 1 1494 1 view .LVU644
 2371 0016 001B     		subs	r0, r0, r4
 2372 0018 5DF8044B 		ldr	r4, [sp], #4
 2373              	.LCFI29:
 2374              		.cfi_restore 4
 2375              		.cfi_def_cfa_offset 0
 2376              	.LVL229:
 2377              		.loc 1 1494 1 view .LVU645
 2378 001c 7047     		bx	lr
 2379              	.L154:
 2380 001e 00BF     		.align	2
 2381              	.L153:
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 73


 2382 0020 00000000 		.word	_SEGGER_RTT
 2383              		.cfi_endproc
 2384              	.LFE22:
 2386              		.section	.text.SEGGER_RTT_AllocDownBuffer,"ax",%progbits
 2387              		.align	1
 2388              		.global	SEGGER_RTT_AllocDownBuffer
 2389              		.syntax unified
 2390              		.thumb
 2391              		.thumb_func
 2392              		.fpu fpv5-d16
 2394              	SEGGER_RTT_AllocDownBuffer:
 2395              	.LVL230:
 2396              	.LFB23:
1495:Src/SEGGER_RTT.c **** 
1496:Src/SEGGER_RTT.c **** /*********************************************************************
1497:Src/SEGGER_RTT.c **** *
1498:Src/SEGGER_RTT.c **** *       SEGGER_RTT_AllocDownBuffer
1499:Src/SEGGER_RTT.c **** *
1500:Src/SEGGER_RTT.c **** *  Function description
1501:Src/SEGGER_RTT.c **** *    Run-time configuration of the next down-buffer (H->T).
1502:Src/SEGGER_RTT.c **** *    The next buffer, which is not used yet is configured.
1503:Src/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1504:Src/SEGGER_RTT.c **** *
1505:Src/SEGGER_RTT.c **** *  Parameters
1506:Src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1507:Src/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1508:Src/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1509:Src/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1510:Src/SEGGER_RTT.c **** *
1511:Src/SEGGER_RTT.c **** *  Return value
1512:Src/SEGGER_RTT.c **** *    >= 0 - O.K. Buffer Index
1513:Src/SEGGER_RTT.c **** *     < 0 - Error
1514:Src/SEGGER_RTT.c **** */
1515:Src/SEGGER_RTT.c **** int SEGGER_RTT_AllocDownBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flag
 2397              		.loc 1 1515 103 is_stmt 1 view -0
 2398              		.cfi_startproc
 2399              		@ args = 0, pretend = 0, frame = 0
 2400              		@ frame_needed = 0, uses_anonymous_args = 0
 2401              		.loc 1 1515 103 is_stmt 0 view .LVU647
 2402 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2403              	.LCFI30:
 2404              		.cfi_def_cfa_offset 24
 2405              		.cfi_offset 3, -24
 2406              		.cfi_offset 4, -20
 2407              		.cfi_offset 5, -16
 2408              		.cfi_offset 6, -12
 2409              		.cfi_offset 7, -8
 2410              		.cfi_offset 14, -4
 2411 0002 0746     		mov	r7, r0
 2412 0004 0E46     		mov	r6, r1
 2413 0006 1546     		mov	r5, r2
 2414 0008 1C46     		mov	r4, r3
1516:Src/SEGGER_RTT.c ****   int BufferIndex;
 2415              		.loc 1 1516 3 is_stmt 1 view .LVU648
1517:Src/SEGGER_RTT.c **** 
1518:Src/SEGGER_RTT.c ****   INIT();
 2416              		.loc 1 1518 3 view .LVU649
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 74


 2417              		.loc 1 1518 3 view .LVU650
 2418 000a 174B     		ldr	r3, .L163
 2419              	.LVL231:
 2420              		.loc 1 1518 3 is_stmt 0 view .LVU651
 2421 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2422 000e 2BB3     		cbz	r3, .L162
 2423              	.LVL232:
 2424              	.L156:
 2425              	.LBB10:
1519:Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2426              		.loc 1 1519 3 is_stmt 1 view .LVU652
 2427              		.loc 1 1519 3 view .LVU653
 2428              		.syntax unified
 2429              	@ 1519 "Src/SEGGER_RTT.c" 1
 2430 0010 EFF3118C 		mrs   ip, basepri  
 2431 0014 4FF02001 		mov   r1, #32       
 2432 0018 81F31188 		msr   basepri, r1  
 2433              		
 2434              	@ 0 "" 2
 2435              	.LVL233:
 2436              		.loc 1 1519 20 view .LVU654
1520:Src/SEGGER_RTT.c ****   BufferIndex = 0;
 2437              		.loc 1 1520 3 view .LVU655
 2438              		.loc 1 1520 15 is_stmt 0 view .LVU656
 2439              		.thumb
 2440              		.syntax unified
 2441 001c 0020     		movs	r0, #0
 2442              	.LVL234:
 2443              	.L158:
1521:Src/SEGGER_RTT.c ****   do {
 2444              		.loc 1 1521 3 is_stmt 1 view .LVU657
1522:Src/SEGGER_RTT.c ****     if (_SEGGER_RTT.aDown[BufferIndex].pBuffer == NULL) {
 2445              		.loc 1 1522 5 view .LVU658
 2446              		.loc 1 1522 39 is_stmt 0 view .LVU659
 2447 001e 00EB4003 		add	r3, r0, r0, lsl #1
 2448 0022 DA00     		lsls	r2, r3, #3
 2449 0024 104B     		ldr	r3, .L163
 2450 0026 1344     		add	r3, r3, r2
 2451 0028 5B6E     		ldr	r3, [r3, #100]
 2452              		.loc 1 1522 8 view .LVU660
 2453 002a 23B1     		cbz	r3, .L157
1523:Src/SEGGER_RTT.c ****       break;
1524:Src/SEGGER_RTT.c ****     }
1525:Src/SEGGER_RTT.c ****     BufferIndex++;
 2454              		.loc 1 1525 5 is_stmt 1 view .LVU661
 2455              		.loc 1 1525 16 is_stmt 0 view .LVU662
 2456 002c 0130     		adds	r0, r0, #1
 2457              	.LVL235:
1526:Src/SEGGER_RTT.c ****   } while (BufferIndex < _SEGGER_RTT.MaxNumDownBuffers);
 2458              		.loc 1 1526 37 view .LVU663
 2459 002e 0E4B     		ldr	r3, .L163
 2460 0030 5B69     		ldr	r3, [r3, #20]
 2461              		.loc 1 1526 3 view .LVU664
 2462 0032 8342     		cmp	r3, r0
 2463 0034 F3DC     		bgt	.L158
 2464              	.L157:
1527:Src/SEGGER_RTT.c ****   if (BufferIndex < _SEGGER_RTT.MaxNumDownBuffers) {
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 75


 2465              		.loc 1 1527 3 is_stmt 1 view .LVU665
 2466              		.loc 1 1527 32 is_stmt 0 view .LVU666
 2467 0036 0C4B     		ldr	r3, .L163
 2468 0038 5B69     		ldr	r3, [r3, #20]
 2469              		.loc 1 1527 6 view .LVU667
 2470 003a 8342     		cmp	r3, r0
 2471 003c 11DD     		ble	.L160
1528:Src/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 2472              		.loc 1 1528 5 is_stmt 1 view .LVU668
 2473              		.loc 1 1528 49 is_stmt 0 view .LVU669
 2474 003e 4200     		lsls	r2, r0, #1
 2475 0040 0244     		add	r2, r2, r0
 2476 0042 D100     		lsls	r1, r2, #3
 2477 0044 084B     		ldr	r3, .L163
 2478 0046 0B44     		add	r3, r3, r1
 2479 0048 1F66     		str	r7, [r3, #96]
1529:Src/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 2480              		.loc 1 1529 5 is_stmt 1 view .LVU670
 2481              		.loc 1 1529 49 is_stmt 0 view .LVU671
 2482 004a 5E66     		str	r6, [r3, #100]
1530:Src/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 2483              		.loc 1 1530 5 is_stmt 1 view .LVU672
 2484              		.loc 1 1530 49 is_stmt 0 view .LVU673
 2485 004c 9D66     		str	r5, [r3, #104]
1531:Src/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 2486              		.loc 1 1531 5 is_stmt 1 view .LVU674
 2487              		.loc 1 1531 49 is_stmt 0 view .LVU675
 2488 004e 0022     		movs	r2, #0
 2489 0050 1A67     		str	r2, [r3, #112]
1532:Src/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 2490              		.loc 1 1532 5 is_stmt 1 view .LVU676
 2491              		.loc 1 1532 49 is_stmt 0 view .LVU677
 2492 0052 DA66     		str	r2, [r3, #108]
1533:Src/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].Flags        = Flags;
 2493              		.loc 1 1533 5 is_stmt 1 view .LVU678
 2494              		.loc 1 1533 49 is_stmt 0 view .LVU679
 2495 0054 5C67     		str	r4, [r3, #116]
 2496              	.LVL236:
 2497              	.L159:
1534:Src/SEGGER_RTT.c ****   } else {
1535:Src/SEGGER_RTT.c ****     BufferIndex = -1;
1536:Src/SEGGER_RTT.c ****   }
1537:Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 2498              		.loc 1 1537 3 is_stmt 1 view .LVU680
 2499              		.syntax unified
 2500              	@ 1537 "Src/SEGGER_RTT.c" 1
 2501 0056 8CF31188 		msr   basepri, ip  
 2502              		
 2503              	@ 0 "" 2
 2504              		.thumb
 2505              		.syntax unified
 2506              	.LBE10:
 2507              		.loc 1 1537 22 view .LVU681
1538:Src/SEGGER_RTT.c ****   return BufferIndex;
 2508              		.loc 1 1538 3 view .LVU682
1539:Src/SEGGER_RTT.c **** }
 2509              		.loc 1 1539 1 is_stmt 0 view .LVU683
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 76


 2510 005a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2511              	.LVL237:
 2512              	.L162:
1518:Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2513              		.loc 1 1518 3 is_stmt 1 discriminator 1 view .LVU684
 2514 005c FFF7FEFF 		bl	_DoInit
 2515              	.LVL238:
1518:Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2516              		.loc 1 1518 3 is_stmt 0 discriminator 1 view .LVU685
 2517 0060 D6E7     		b	.L156
 2518              	.LVL239:
 2519              	.L160:
 2520              	.LBB11:
1535:Src/SEGGER_RTT.c ****   }
 2521              		.loc 1 1535 17 view .LVU686
 2522 0062 4FF0FF30 		mov	r0, #-1
 2523              	.LVL240:
1535:Src/SEGGER_RTT.c ****   }
 2524              		.loc 1 1535 17 view .LVU687
 2525 0066 F6E7     		b	.L159
 2526              	.L164:
 2527              		.align	2
 2528              	.L163:
 2529 0068 00000000 		.word	_SEGGER_RTT
 2530              	.LBE11:
 2531              		.cfi_endproc
 2532              	.LFE23:
 2534              		.section	.text.SEGGER_RTT_AllocUpBuffer,"ax",%progbits
 2535              		.align	1
 2536              		.global	SEGGER_RTT_AllocUpBuffer
 2537              		.syntax unified
 2538              		.thumb
 2539              		.thumb_func
 2540              		.fpu fpv5-d16
 2542              	SEGGER_RTT_AllocUpBuffer:
 2543              	.LVL241:
 2544              	.LFB24:
1540:Src/SEGGER_RTT.c **** 
1541:Src/SEGGER_RTT.c **** /*********************************************************************
1542:Src/SEGGER_RTT.c **** *
1543:Src/SEGGER_RTT.c **** *       SEGGER_RTT_AllocUpBuffer
1544:Src/SEGGER_RTT.c **** *
1545:Src/SEGGER_RTT.c **** *  Function description
1546:Src/SEGGER_RTT.c **** *    Run-time configuration of the next up-buffer (T->H).
1547:Src/SEGGER_RTT.c **** *    The next buffer, which is not used yet is configured.
1548:Src/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1549:Src/SEGGER_RTT.c **** *
1550:Src/SEGGER_RTT.c **** *  Parameters
1551:Src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1552:Src/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1553:Src/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1554:Src/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1555:Src/SEGGER_RTT.c **** *
1556:Src/SEGGER_RTT.c **** *  Return value
1557:Src/SEGGER_RTT.c **** *    >= 0 - O.K. Buffer Index
1558:Src/SEGGER_RTT.c **** *     < 0 - Error
1559:Src/SEGGER_RTT.c **** */
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 77


1560:Src/SEGGER_RTT.c **** int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags)
 2545              		.loc 1 1560 101 is_stmt 1 view -0
 2546              		.cfi_startproc
 2547              		@ args = 0, pretend = 0, frame = 0
 2548              		@ frame_needed = 0, uses_anonymous_args = 0
 2549              		.loc 1 1560 101 is_stmt 0 view .LVU689
 2550 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2551              	.LCFI31:
 2552              		.cfi_def_cfa_offset 24
 2553              		.cfi_offset 4, -24
 2554              		.cfi_offset 5, -20
 2555              		.cfi_offset 6, -16
 2556              		.cfi_offset 7, -12
 2557              		.cfi_offset 8, -8
 2558              		.cfi_offset 14, -4
 2559 0004 0746     		mov	r7, r0
 2560 0006 0E46     		mov	r6, r1
 2561 0008 1546     		mov	r5, r2
 2562 000a 1C46     		mov	r4, r3
1561:Src/SEGGER_RTT.c ****   int BufferIndex;
 2563              		.loc 1 1561 3 is_stmt 1 view .LVU690
1562:Src/SEGGER_RTT.c **** 
1563:Src/SEGGER_RTT.c ****   INIT();
 2564              		.loc 1 1563 3 view .LVU691
 2565              		.loc 1 1563 3 view .LVU692
 2566 000c 1D4B     		ldr	r3, .L173
 2567              	.LVL242:
 2568              		.loc 1 1563 3 is_stmt 0 view .LVU693
 2569 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2570 0010 002B     		cmp	r3, #0
 2571 0012 30D0     		beq	.L172
 2572              	.LVL243:
 2573              	.L166:
 2574              	.LBB12:
1564:Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2575              		.loc 1 1564 3 is_stmt 1 view .LVU694
 2576              		.loc 1 1564 3 view .LVU695
 2577              		.syntax unified
 2578              	@ 1564 "Src/SEGGER_RTT.c" 1
 2579 0014 EFF3118C 		mrs   ip, basepri  
 2580 0018 4FF02001 		mov   r1, #32       
 2581 001c 81F31188 		msr   basepri, r1  
 2582              		
 2583              	@ 0 "" 2
 2584              	.LVL244:
 2585              		.loc 1 1564 20 view .LVU696
1565:Src/SEGGER_RTT.c ****   BufferIndex = 0;
 2586              		.loc 1 1565 3 view .LVU697
 2587              		.loc 1 1565 15 is_stmt 0 view .LVU698
 2588              		.thumb
 2589              		.syntax unified
 2590 0020 0020     		movs	r0, #0
 2591              	.LVL245:
 2592              	.L168:
1566:Src/SEGGER_RTT.c ****   do {
 2593              		.loc 1 1566 3 is_stmt 1 view .LVU699
1567:Src/SEGGER_RTT.c ****     if (_SEGGER_RTT.aUp[BufferIndex].pBuffer == NULL) {
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 78


 2594              		.loc 1 1567 5 view .LVU700
 2595              		.loc 1 1567 37 is_stmt 0 view .LVU701
 2596 0022 431C     		adds	r3, r0, #1
 2597 0024 03EB4303 		add	r3, r3, r3, lsl #1
 2598 0028 DA00     		lsls	r2, r3, #3
 2599 002a 164B     		ldr	r3, .L173
 2600 002c 1344     		add	r3, r3, r2
 2601 002e 5B68     		ldr	r3, [r3, #4]
 2602              		.loc 1 1567 8 view .LVU702
 2603 0030 23B1     		cbz	r3, .L167
1568:Src/SEGGER_RTT.c ****       break;
1569:Src/SEGGER_RTT.c ****     }
1570:Src/SEGGER_RTT.c ****     BufferIndex++;
 2604              		.loc 1 1570 5 is_stmt 1 view .LVU703
 2605              		.loc 1 1570 16 is_stmt 0 view .LVU704
 2606 0032 0130     		adds	r0, r0, #1
 2607              	.LVL246:
1571:Src/SEGGER_RTT.c ****   } while (BufferIndex < _SEGGER_RTT.MaxNumUpBuffers);
 2608              		.loc 1 1571 37 view .LVU705
 2609 0034 134B     		ldr	r3, .L173
 2610 0036 1B69     		ldr	r3, [r3, #16]
 2611              		.loc 1 1571 3 view .LVU706
 2612 0038 8342     		cmp	r3, r0
 2613 003a F2DC     		bgt	.L168
 2614              	.L167:
1572:Src/SEGGER_RTT.c ****   if (BufferIndex < _SEGGER_RTT.MaxNumUpBuffers) {
 2615              		.loc 1 1572 3 is_stmt 1 view .LVU707
 2616              		.loc 1 1572 32 is_stmt 0 view .LVU708
 2617 003c 114B     		ldr	r3, .L173
 2618 003e 1B69     		ldr	r3, [r3, #16]
 2619              		.loc 1 1572 6 view .LVU709
 2620 0040 8342     		cmp	r3, r0
 2621 0042 1BDD     		ble	.L170
1573:Src/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 2622              		.loc 1 1573 5 is_stmt 1 view .LVU710
 2623              		.loc 1 1573 47 is_stmt 0 view .LVU711
 2624 0044 0F4B     		ldr	r3, .L173
 2625 0046 411C     		adds	r1, r0, #1
 2626 0048 4A00     		lsls	r2, r1, #1
 2627 004a 02EB0108 		add	r8, r2, r1
 2628 004e 4FEAC80E 		lsl	lr, r8, #3
 2629 0052 43F80E70 		str	r7, [r3, lr]
1574:Src/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 2630              		.loc 1 1574 5 is_stmt 1 view .LVU712
 2631              		.loc 1 1574 47 is_stmt 0 view .LVU713
 2632 0056 7146     		mov	r1, lr
 2633 0058 1944     		add	r1, r1, r3
 2634 005a 4E60     		str	r6, [r1, #4]
1575:Src/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 2635              		.loc 1 1575 5 is_stmt 1 view .LVU714
 2636              		.loc 1 1575 47 is_stmt 0 view .LVU715
 2637 005c 4200     		lsls	r2, r0, #1
 2638 005e 0244     		add	r2, r2, r0
 2639 0060 D100     		lsls	r1, r2, #3
 2640 0062 0B44     		add	r3, r3, r1
 2641 0064 1D62     		str	r5, [r3, #32]
1576:Src/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 79


 2642              		.loc 1 1576 5 is_stmt 1 view .LVU716
 2643              		.loc 1 1576 47 is_stmt 0 view .LVU717
 2644 0066 0022     		movs	r2, #0
 2645 0068 9A62     		str	r2, [r3, #40]
1577:Src/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 2646              		.loc 1 1577 5 is_stmt 1 view .LVU718
 2647              		.loc 1 1577 47 is_stmt 0 view .LVU719
 2648 006a 5A62     		str	r2, [r3, #36]
1578:Src/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].Flags        = Flags;
 2649              		.loc 1 1578 5 is_stmt 1 view .LVU720
 2650              		.loc 1 1578 47 is_stmt 0 view .LVU721
 2651 006c DC62     		str	r4, [r3, #44]
 2652              	.LVL247:
 2653              	.L169:
1579:Src/SEGGER_RTT.c ****   } else {
1580:Src/SEGGER_RTT.c ****     BufferIndex = -1;
1581:Src/SEGGER_RTT.c ****   }
1582:Src/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 2654              		.loc 1 1582 3 is_stmt 1 view .LVU722
 2655              		.syntax unified
 2656              	@ 1582 "Src/SEGGER_RTT.c" 1
 2657 006e 8CF31188 		msr   basepri, ip  
 2658              		
 2659              	@ 0 "" 2
 2660              		.thumb
 2661              		.syntax unified
 2662              	.LBE12:
 2663              		.loc 1 1582 22 view .LVU723
1583:Src/SEGGER_RTT.c ****   return BufferIndex;
 2664              		.loc 1 1583 3 view .LVU724
1584:Src/SEGGER_RTT.c **** }
 2665              		.loc 1 1584 1 is_stmt 0 view .LVU725
 2666 0072 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2667              	.LVL248:
 2668              	.L172:
1563:Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2669              		.loc 1 1563 3 is_stmt 1 discriminator 1 view .LVU726
 2670 0076 FFF7FEFF 		bl	_DoInit
 2671              	.LVL249:
1563:Src/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2672              		.loc 1 1563 3 is_stmt 0 discriminator 1 view .LVU727
 2673 007a CBE7     		b	.L166
 2674              	.LVL250:
 2675              	.L170:
 2676              	.LBB13:
1580:Src/SEGGER_RTT.c ****   }
 2677              		.loc 1 1580 17 view .LVU728
 2678 007c 4FF0FF30 		mov	r0, #-1
 2679              	.LVL251:
1580:Src/SEGGER_RTT.c ****   }
 2680              		.loc 1 1580 17 view .LVU729
 2681 0080 F5E7     		b	.L169
 2682              	.L174:
 2683 0082 00BF     		.align	2
 2684              	.L173:
 2685 0084 00000000 		.word	_SEGGER_RTT
 2686              	.LBE13:
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 80


 2687              		.cfi_endproc
 2688              	.LFE24:
 2690              		.section	.text.SEGGER_RTT_ConfigUpBuffer,"ax",%progbits
 2691              		.align	1
 2692              		.global	SEGGER_RTT_ConfigUpBuffer
 2693              		.syntax unified
 2694              		.thumb
 2695              		.thumb_func
 2696              		.fpu fpv5-d16
 2698              	SEGGER_RTT_ConfigUpBuffer:
 2699              	.LVL252:
 2700              	.LFB25:
1585:Src/SEGGER_RTT.c **** 
1586:Src/SEGGER_RTT.c **** /*********************************************************************
1587:Src/SEGGER_RTT.c **** *
1588:Src/SEGGER_RTT.c **** *       SEGGER_RTT_ConfigUpBuffer
1589:Src/SEGGER_RTT.c **** *
1590:Src/SEGGER_RTT.c **** *  Function description
1591:Src/SEGGER_RTT.c **** *    Run-time configuration of a specific up-buffer (T->H).
1592:Src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1593:Src/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1594:Src/SEGGER_RTT.c **** *
1595:Src/SEGGER_RTT.c **** *  Parameters
1596:Src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to configure.
1597:Src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1598:Src/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1599:Src/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1600:Src/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1601:Src/SEGGER_RTT.c **** *
1602:Src/SEGGER_RTT.c **** *  Return value
1603:Src/SEGGER_RTT.c **** *    >= 0 - O.K.
1604:Src/SEGGER_RTT.c **** *     < 0 - Error
1605:Src/SEGGER_RTT.c **** *
1606:Src/SEGGER_RTT.c **** *  Additional information
1607:Src/SEGGER_RTT.c **** *    Buffer 0 is configured on compile-time.
1608:Src/SEGGER_RTT.c **** *    May only be called once per buffer.
1609:Src/SEGGER_RTT.c **** *    Buffer name and flags can be reconfigured using the appropriate functions.
1610:Src/SEGGER_RTT.c **** */
1611:Src/SEGGER_RTT.c **** int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned Buff
 2701              		.loc 1 1611 124 is_stmt 1 view -0
 2702              		.cfi_startproc
 2703              		@ args = 4, pretend = 0, frame = 0
 2704              		@ frame_needed = 0, uses_anonymous_args = 0
 2705              		.loc 1 1611 124 is_stmt 0 view .LVU731
 2706 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2707              	.LCFI32:
 2708              		.cfi_def_cfa_offset 24
 2709              		.cfi_offset 3, -24
 2710              		.cfi_offset 4, -20
 2711              		.cfi_offset 5, -16
 2712              		.cfi_offset 6, -12
 2713              		.cfi_offset 7, -8
 2714              		.cfi_offset 14, -4
 2715 0002 0446     		mov	r4, r0
 2716 0004 0F46     		mov	r7, r1
 2717 0006 1646     		mov	r6, r2
 2718 0008 1D46     		mov	r5, r3
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 81


1612:Src/SEGGER_RTT.c ****   int r;
 2719              		.loc 1 1612 3 is_stmt 1 view .LVU732
1613:Src/SEGGER_RTT.c **** 
1614:Src/SEGGER_RTT.c ****   INIT();
 2720              		.loc 1 1614 3 view .LVU733
 2721              		.loc 1 1614 3 view .LVU734
 2722 000a 1A4B     		ldr	r3, .L182
 2723              	.LVL253:
 2724              		.loc 1 1614 3 is_stmt 0 view .LVU735
 2725 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2726 000e 53B3     		cbz	r3, .L181
 2727              	.LVL254:
 2728              	.L176:
1615:Src/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 2729              		.loc 1 1615 3 is_stmt 1 view .LVU736
 2730              		.loc 1 1615 42 is_stmt 0 view .LVU737
 2731 0010 184B     		ldr	r3, .L182
 2732 0012 1B69     		ldr	r3, [r3, #16]
 2733              		.loc 1 1615 6 view .LVU738
 2734 0014 A342     		cmp	r3, r4
 2735 0016 29D9     		bls	.L179
 2736              	.LBB14:
1616:Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 2737              		.loc 1 1616 5 is_stmt 1 view .LVU739
 2738              		.loc 1 1616 5 view .LVU740
 2739              		.syntax unified
 2740              	@ 1616 "Src/SEGGER_RTT.c" 1
 2741 0018 EFF31180 		mrs   r0, basepri  
 2742 001c 4FF02001 		mov   r1, #32       
 2743 0020 81F31188 		msr   basepri, r1  
 2744              		
 2745              	@ 0 "" 2
 2746              	.LVL255:
 2747              		.loc 1 1616 22 view .LVU741
1617:Src/SEGGER_RTT.c ****     if (BufferIndex > 0u) {
 2748              		.loc 1 1617 5 view .LVU742
 2749              		.loc 1 1617 8 is_stmt 0 view .LVU743
 2750              		.thumb
 2751              		.syntax unified
 2752 0024 A4B1     		cbz	r4, .L178
1618:Src/SEGGER_RTT.c ****       _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 2753              		.loc 1 1618 7 is_stmt 1 view .LVU744
 2754              		.loc 1 1618 49 is_stmt 0 view .LVU745
 2755 0026 134B     		ldr	r3, .L182
 2756 0028 611C     		adds	r1, r4, #1
 2757 002a 4A00     		lsls	r2, r1, #1
 2758 002c 02EB010E 		add	lr, r2, r1
 2759 0030 4FEACE0C 		lsl	ip, lr, #3
 2760 0034 E646     		mov	lr, ip
 2761 0036 43F80C70 		str	r7, [r3, ip]
1619:Src/SEGGER_RTT.c ****       _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 2762              		.loc 1 1619 7 is_stmt 1 view .LVU746
 2763              		.loc 1 1619 49 is_stmt 0 view .LVU747
 2764 003a 6146     		mov	r1, ip
 2765 003c 1944     		add	r1, r1, r3
 2766 003e 4E60     		str	r6, [r1, #4]
1620:Src/SEGGER_RTT.c ****       _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 82


 2767              		.loc 1 1620 7 is_stmt 1 view .LVU748
 2768              		.loc 1 1620 49 is_stmt 0 view .LVU749
 2769 0040 6200     		lsls	r2, r4, #1
 2770 0042 2244     		add	r2, r2, r4
 2771 0044 D100     		lsls	r1, r2, #3
 2772 0046 0B44     		add	r3, r3, r1
 2773 0048 1D62     		str	r5, [r3, #32]
1621:Src/SEGGER_RTT.c ****       _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 2774              		.loc 1 1621 7 is_stmt 1 view .LVU750
 2775              		.loc 1 1621 49 is_stmt 0 view .LVU751
 2776 004a 0022     		movs	r2, #0
 2777 004c 9A62     		str	r2, [r3, #40]
1622:Src/SEGGER_RTT.c ****       _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 2778              		.loc 1 1622 7 is_stmt 1 view .LVU752
 2779              		.loc 1 1622 49 is_stmt 0 view .LVU753
 2780 004e 5A62     		str	r2, [r3, #36]
 2781              	.L178:
1623:Src/SEGGER_RTT.c ****     }
1624:Src/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 2782              		.loc 1 1624 5 is_stmt 1 view .LVU754
 2783              		.loc 1 1624 49 is_stmt 0 view .LVU755
 2784 0050 04EB4404 		add	r4, r4, r4, lsl #1
 2785              	.LVL256:
 2786              		.loc 1 1624 49 view .LVU756
 2787 0054 E200     		lsls	r2, r4, #3
 2788 0056 074B     		ldr	r3, .L182
 2789 0058 1344     		add	r3, r3, r2
 2790 005a 069A     		ldr	r2, [sp, #24]
 2791 005c DA62     		str	r2, [r3, #44]
1625:Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 2792              		.loc 1 1625 5 is_stmt 1 view .LVU757
 2793              		.syntax unified
 2794              	@ 1625 "Src/SEGGER_RTT.c" 1
 2795 005e 80F31188 		msr   basepri, r0  
 2796              		
 2797              	@ 0 "" 2
 2798              		.thumb
 2799              		.syntax unified
 2800              	.LBE14:
 2801              		.loc 1 1625 24 view .LVU758
1626:Src/SEGGER_RTT.c ****     r =  0;
 2802              		.loc 1 1626 5 view .LVU759
 2803              	.LVL257:
 2804              		.loc 1 1626 7 is_stmt 0 view .LVU760
 2805 0062 0020     		movs	r0, #0
 2806              	.LVL258:
 2807              	.L175:
1627:Src/SEGGER_RTT.c ****   } else {
1628:Src/SEGGER_RTT.c ****     r = -1;
1629:Src/SEGGER_RTT.c ****   }
1630:Src/SEGGER_RTT.c ****   return r;
1631:Src/SEGGER_RTT.c **** }
 2808              		.loc 1 1631 1 view .LVU761
 2809 0064 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2810              	.LVL259:
 2811              	.L181:
1614:Src/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 83


 2812              		.loc 1 1614 3 is_stmt 1 discriminator 1 view .LVU762
 2813 0066 FFF7FEFF 		bl	_DoInit
 2814              	.LVL260:
1614:Src/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 2815              		.loc 1 1614 3 is_stmt 0 discriminator 1 view .LVU763
 2816 006a D1E7     		b	.L176
 2817              	.L179:
1628:Src/SEGGER_RTT.c ****   }
 2818              		.loc 1 1628 7 view .LVU764
 2819 006c 4FF0FF30 		mov	r0, #-1
 2820              	.LVL261:
1630:Src/SEGGER_RTT.c **** }
 2821              		.loc 1 1630 3 is_stmt 1 view .LVU765
1630:Src/SEGGER_RTT.c **** }
 2822              		.loc 1 1630 10 is_stmt 0 view .LVU766
 2823 0070 F8E7     		b	.L175
 2824              	.L183:
 2825 0072 00BF     		.align	2
 2826              	.L182:
 2827 0074 00000000 		.word	_SEGGER_RTT
 2828              		.cfi_endproc
 2829              	.LFE25:
 2831              		.section	.text.SEGGER_RTT_ConfigDownBuffer,"ax",%progbits
 2832              		.align	1
 2833              		.global	SEGGER_RTT_ConfigDownBuffer
 2834              		.syntax unified
 2835              		.thumb
 2836              		.thumb_func
 2837              		.fpu fpv5-d16
 2839              	SEGGER_RTT_ConfigDownBuffer:
 2840              	.LVL262:
 2841              	.LFB26:
1632:Src/SEGGER_RTT.c **** 
1633:Src/SEGGER_RTT.c **** /*********************************************************************
1634:Src/SEGGER_RTT.c **** *
1635:Src/SEGGER_RTT.c **** *       SEGGER_RTT_ConfigDownBuffer
1636:Src/SEGGER_RTT.c **** *
1637:Src/SEGGER_RTT.c **** *  Function description
1638:Src/SEGGER_RTT.c **** *    Run-time configuration of a specific down-buffer (H->T).
1639:Src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1640:Src/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1641:Src/SEGGER_RTT.c **** *
1642:Src/SEGGER_RTT.c **** *  Parameters
1643:Src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to configure.
1644:Src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1645:Src/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1646:Src/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1647:Src/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1648:Src/SEGGER_RTT.c **** *
1649:Src/SEGGER_RTT.c **** *  Return value
1650:Src/SEGGER_RTT.c **** *    >= 0  O.K.
1651:Src/SEGGER_RTT.c **** *     < 0  Error
1652:Src/SEGGER_RTT.c **** *
1653:Src/SEGGER_RTT.c **** *  Additional information
1654:Src/SEGGER_RTT.c **** *    Buffer 0 is configured on compile-time.
1655:Src/SEGGER_RTT.c **** *    May only be called once per buffer.
1656:Src/SEGGER_RTT.c **** *    Buffer name and flags can be reconfigured using the appropriate functions.
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 84


1657:Src/SEGGER_RTT.c **** */
1658:Src/SEGGER_RTT.c **** int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned Bu
 2842              		.loc 1 1658 126 is_stmt 1 view -0
 2843              		.cfi_startproc
 2844              		@ args = 4, pretend = 0, frame = 0
 2845              		@ frame_needed = 0, uses_anonymous_args = 0
 2846              		.loc 1 1658 126 is_stmt 0 view .LVU768
 2847 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2848              	.LCFI33:
 2849              		.cfi_def_cfa_offset 24
 2850              		.cfi_offset 3, -24
 2851              		.cfi_offset 4, -20
 2852              		.cfi_offset 5, -16
 2853              		.cfi_offset 6, -12
 2854              		.cfi_offset 7, -8
 2855              		.cfi_offset 14, -4
 2856 0002 0446     		mov	r4, r0
 2857 0004 0F46     		mov	r7, r1
 2858 0006 1646     		mov	r6, r2
 2859 0008 1D46     		mov	r5, r3
1659:Src/SEGGER_RTT.c ****   int r;
 2860              		.loc 1 1659 3 is_stmt 1 view .LVU769
1660:Src/SEGGER_RTT.c **** 
1661:Src/SEGGER_RTT.c ****   INIT();
 2861              		.loc 1 1661 3 view .LVU770
 2862              		.loc 1 1661 3 view .LVU771
 2863 000a 154B     		ldr	r3, .L191
 2864              	.LVL263:
 2865              		.loc 1 1661 3 is_stmt 0 view .LVU772
 2866 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2867 000e 03B3     		cbz	r3, .L190
 2868              	.LVL264:
 2869              	.L185:
1662:Src/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 2870              		.loc 1 1662 3 is_stmt 1 view .LVU773
 2871              		.loc 1 1662 42 is_stmt 0 view .LVU774
 2872 0010 134B     		ldr	r3, .L191
 2873 0012 5B69     		ldr	r3, [r3, #20]
 2874              		.loc 1 1662 6 view .LVU775
 2875 0014 A342     		cmp	r3, r4
 2876 0016 1FD9     		bls	.L188
 2877              	.LBB15:
1663:Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 2878              		.loc 1 1663 5 is_stmt 1 view .LVU776
 2879              		.loc 1 1663 5 view .LVU777
 2880              		.syntax unified
 2881              	@ 1663 "Src/SEGGER_RTT.c" 1
 2882 0018 EFF31180 		mrs   r0, basepri  
 2883 001c 4FF02001 		mov   r1, #32       
 2884 0020 81F31188 		msr   basepri, r1  
 2885              		
 2886              	@ 0 "" 2
 2887              	.LVL265:
 2888              		.loc 1 1663 22 view .LVU778
1664:Src/SEGGER_RTT.c ****     if (BufferIndex > 0u) {
 2889              		.loc 1 1664 5 view .LVU779
 2890              		.loc 1 1664 8 is_stmt 0 view .LVU780
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 85


 2891              		.thumb
 2892              		.syntax unified
 2893 0024 54B1     		cbz	r4, .L187
1665:Src/SEGGER_RTT.c ****       _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 2894              		.loc 1 1665 7 is_stmt 1 view .LVU781
 2895              		.loc 1 1665 51 is_stmt 0 view .LVU782
 2896 0026 6200     		lsls	r2, r4, #1
 2897 0028 2244     		add	r2, r2, r4
 2898 002a D100     		lsls	r1, r2, #3
 2899 002c 0C4B     		ldr	r3, .L191
 2900 002e 0B44     		add	r3, r3, r1
 2901 0030 1F66     		str	r7, [r3, #96]
1666:Src/SEGGER_RTT.c ****       _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 2902              		.loc 1 1666 7 is_stmt 1 view .LVU783
 2903              		.loc 1 1666 51 is_stmt 0 view .LVU784
 2904 0032 5E66     		str	r6, [r3, #100]
1667:Src/SEGGER_RTT.c ****       _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 2905              		.loc 1 1667 7 is_stmt 1 view .LVU785
 2906              		.loc 1 1667 51 is_stmt 0 view .LVU786
 2907 0034 9D66     		str	r5, [r3, #104]
1668:Src/SEGGER_RTT.c ****       _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 2908              		.loc 1 1668 7 is_stmt 1 view .LVU787
 2909              		.loc 1 1668 51 is_stmt 0 view .LVU788
 2910 0036 0022     		movs	r2, #0
 2911 0038 1A67     		str	r2, [r3, #112]
1669:Src/SEGGER_RTT.c ****       _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 2912              		.loc 1 1669 7 is_stmt 1 view .LVU789
 2913              		.loc 1 1669 51 is_stmt 0 view .LVU790
 2914 003a DA66     		str	r2, [r3, #108]
 2915              	.L187:
1670:Src/SEGGER_RTT.c ****     }
1671:Src/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 2916              		.loc 1 1671 5 is_stmt 1 view .LVU791
 2917              		.loc 1 1671 51 is_stmt 0 view .LVU792
 2918 003c 04EB4404 		add	r4, r4, r4, lsl #1
 2919              	.LVL266:
 2920              		.loc 1 1671 51 view .LVU793
 2921 0040 E200     		lsls	r2, r4, #3
 2922 0042 074B     		ldr	r3, .L191
 2923 0044 1344     		add	r3, r3, r2
 2924 0046 069A     		ldr	r2, [sp, #24]
 2925 0048 5A67     		str	r2, [r3, #116]
1672:Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 2926              		.loc 1 1672 5 is_stmt 1 view .LVU794
 2927              		.syntax unified
 2928              	@ 1672 "Src/SEGGER_RTT.c" 1
 2929 004a 80F31188 		msr   basepri, r0  
 2930              		
 2931              	@ 0 "" 2
 2932              		.thumb
 2933              		.syntax unified
 2934              	.LBE15:
 2935              		.loc 1 1672 24 view .LVU795
1673:Src/SEGGER_RTT.c ****     r =  0;
 2936              		.loc 1 1673 5 view .LVU796
 2937              	.LVL267:
 2938              		.loc 1 1673 7 is_stmt 0 view .LVU797
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 86


 2939 004e 0020     		movs	r0, #0
 2940              	.LVL268:
 2941              	.L184:
1674:Src/SEGGER_RTT.c ****   } else {
1675:Src/SEGGER_RTT.c ****     r = -1;
1676:Src/SEGGER_RTT.c ****   }
1677:Src/SEGGER_RTT.c ****   return r;
1678:Src/SEGGER_RTT.c **** }
 2942              		.loc 1 1678 1 view .LVU798
 2943 0050 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2944              	.LVL269:
 2945              	.L190:
1661:Src/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 2946              		.loc 1 1661 3 is_stmt 1 discriminator 1 view .LVU799
 2947 0052 FFF7FEFF 		bl	_DoInit
 2948              	.LVL270:
1661:Src/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 2949              		.loc 1 1661 3 is_stmt 0 discriminator 1 view .LVU800
 2950 0056 DBE7     		b	.L185
 2951              	.L188:
1675:Src/SEGGER_RTT.c ****   }
 2952              		.loc 1 1675 7 view .LVU801
 2953 0058 4FF0FF30 		mov	r0, #-1
 2954              	.LVL271:
1677:Src/SEGGER_RTT.c **** }
 2955              		.loc 1 1677 3 is_stmt 1 view .LVU802
1677:Src/SEGGER_RTT.c **** }
 2956              		.loc 1 1677 10 is_stmt 0 view .LVU803
 2957 005c F8E7     		b	.L184
 2958              	.L192:
 2959 005e 00BF     		.align	2
 2960              	.L191:
 2961 0060 00000000 		.word	_SEGGER_RTT
 2962              		.cfi_endproc
 2963              	.LFE26:
 2965              		.section	.text.SEGGER_RTT_SetNameUpBuffer,"ax",%progbits
 2966              		.align	1
 2967              		.global	SEGGER_RTT_SetNameUpBuffer
 2968              		.syntax unified
 2969              		.thumb
 2970              		.thumb_func
 2971              		.fpu fpv5-d16
 2973              	SEGGER_RTT_SetNameUpBuffer:
 2974              	.LVL272:
 2975              	.LFB27:
1679:Src/SEGGER_RTT.c **** 
1680:Src/SEGGER_RTT.c **** /*********************************************************************
1681:Src/SEGGER_RTT.c **** *
1682:Src/SEGGER_RTT.c **** *       SEGGER_RTT_SetNameUpBuffer
1683:Src/SEGGER_RTT.c **** *
1684:Src/SEGGER_RTT.c **** *  Function description
1685:Src/SEGGER_RTT.c **** *    Run-time configuration of a specific up-buffer name (T->H).
1686:Src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1687:Src/SEGGER_RTT.c **** *
1688:Src/SEGGER_RTT.c **** *  Parameters
1689:Src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1690:Src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 87


1691:Src/SEGGER_RTT.c **** *
1692:Src/SEGGER_RTT.c **** *  Return value
1693:Src/SEGGER_RTT.c **** *    >= 0  O.K.
1694:Src/SEGGER_RTT.c **** *     < 0  Error
1695:Src/SEGGER_RTT.c **** */
1696:Src/SEGGER_RTT.c **** int SEGGER_RTT_SetNameUpBuffer(unsigned BufferIndex, const char* sName) {
 2976              		.loc 1 1696 73 is_stmt 1 view -0
 2977              		.cfi_startproc
 2978              		@ args = 0, pretend = 0, frame = 0
 2979              		@ frame_needed = 0, uses_anonymous_args = 0
 2980              		.loc 1 1696 73 is_stmt 0 view .LVU805
 2981 0000 38B5     		push	{r3, r4, r5, lr}
 2982              	.LCFI34:
 2983              		.cfi_def_cfa_offset 16
 2984              		.cfi_offset 3, -16
 2985              		.cfi_offset 4, -12
 2986              		.cfi_offset 5, -8
 2987              		.cfi_offset 14, -4
 2988 0002 0446     		mov	r4, r0
 2989 0004 0D46     		mov	r5, r1
1697:Src/SEGGER_RTT.c ****   int r;
 2990              		.loc 1 1697 3 is_stmt 1 view .LVU806
1698:Src/SEGGER_RTT.c **** 
1699:Src/SEGGER_RTT.c ****   INIT();
 2991              		.loc 1 1699 3 view .LVU807
 2992              		.loc 1 1699 3 view .LVU808
 2993 0006 0E4B     		ldr	r3, .L199
 2994 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2995 000a 9BB1     		cbz	r3, .L198
 2996              	.LVL273:
 2997              	.L194:
1700:Src/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 2998              		.loc 1 1700 3 view .LVU809
 2999              		.loc 1 1700 42 is_stmt 0 view .LVU810
 3000 000c 0C4B     		ldr	r3, .L199
 3001 000e 1B69     		ldr	r3, [r3, #16]
 3002              		.loc 1 1700 6 view .LVU811
 3003 0010 A342     		cmp	r3, r4
 3004 0012 12D9     		bls	.L196
 3005              	.LBB16:
1701:Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3006              		.loc 1 1701 5 is_stmt 1 view .LVU812
 3007              		.loc 1 1701 5 view .LVU813
 3008              		.syntax unified
 3009              	@ 1701 "Src/SEGGER_RTT.c" 1
 3010 0014 EFF31182 		mrs   r2, basepri  
 3011 0018 4FF02001 		mov   r1, #32       
 3012 001c 81F31188 		msr   basepri, r1  
 3013              		
 3014              	@ 0 "" 2
 3015              	.LVL274:
 3016              		.loc 1 1701 22 view .LVU814
1702:Src/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].sName = sName;
 3017              		.loc 1 1702 5 view .LVU815
 3018              		.loc 1 1702 40 is_stmt 0 view .LVU816
 3019              		.thumb
 3020              		.syntax unified
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 88


 3021 0020 0134     		adds	r4, r4, #1
 3022              	.LVL275:
 3023              		.loc 1 1702 40 view .LVU817
 3024 0022 04EB4404 		add	r4, r4, r4, lsl #1
 3025              	.LVL276:
 3026              		.loc 1 1702 40 view .LVU818
 3027 0026 E300     		lsls	r3, r4, #3
 3028 0028 0549     		ldr	r1, .L199
 3029 002a CD50     		str	r5, [r1, r3]
1703:Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3030              		.loc 1 1703 5 is_stmt 1 view .LVU819
 3031              		.syntax unified
 3032              	@ 1703 "Src/SEGGER_RTT.c" 1
 3033 002c 82F31188 		msr   basepri, r2  
 3034              		
 3035              	@ 0 "" 2
 3036              		.thumb
 3037              		.syntax unified
 3038              	.LBE16:
 3039              		.loc 1 1703 24 view .LVU820
1704:Src/SEGGER_RTT.c ****     r =  0;
 3040              		.loc 1 1704 5 view .LVU821
 3041              	.LVL277:
 3042              		.loc 1 1704 7 is_stmt 0 view .LVU822
 3043 0030 0020     		movs	r0, #0
 3044              	.LVL278:
 3045              	.L193:
1705:Src/SEGGER_RTT.c ****   } else {
1706:Src/SEGGER_RTT.c ****     r = -1;
1707:Src/SEGGER_RTT.c ****   }
1708:Src/SEGGER_RTT.c ****   return r;
1709:Src/SEGGER_RTT.c **** }
 3046              		.loc 1 1709 1 view .LVU823
 3047 0032 38BD     		pop	{r3, r4, r5, pc}
 3048              	.LVL279:
 3049              	.L198:
1699:Src/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 3050              		.loc 1 1699 3 is_stmt 1 discriminator 1 view .LVU824
 3051 0034 FFF7FEFF 		bl	_DoInit
 3052              	.LVL280:
1699:Src/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 3053              		.loc 1 1699 3 is_stmt 0 discriminator 1 view .LVU825
 3054 0038 E8E7     		b	.L194
 3055              	.L196:
1706:Src/SEGGER_RTT.c ****   }
 3056              		.loc 1 1706 7 view .LVU826
 3057 003a 4FF0FF30 		mov	r0, #-1
 3058              	.LVL281:
1708:Src/SEGGER_RTT.c **** }
 3059              		.loc 1 1708 3 is_stmt 1 view .LVU827
1708:Src/SEGGER_RTT.c **** }
 3060              		.loc 1 1708 10 is_stmt 0 view .LVU828
 3061 003e F8E7     		b	.L193
 3062              	.L200:
 3063              		.align	2
 3064              	.L199:
 3065 0040 00000000 		.word	_SEGGER_RTT
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 89


 3066              		.cfi_endproc
 3067              	.LFE27:
 3069              		.section	.text.SEGGER_RTT_SetNameDownBuffer,"ax",%progbits
 3070              		.align	1
 3071              		.global	SEGGER_RTT_SetNameDownBuffer
 3072              		.syntax unified
 3073              		.thumb
 3074              		.thumb_func
 3075              		.fpu fpv5-d16
 3077              	SEGGER_RTT_SetNameDownBuffer:
 3078              	.LVL282:
 3079              	.LFB28:
1710:Src/SEGGER_RTT.c **** 
1711:Src/SEGGER_RTT.c **** /*********************************************************************
1712:Src/SEGGER_RTT.c **** *
1713:Src/SEGGER_RTT.c **** *       SEGGER_RTT_SetNameDownBuffer
1714:Src/SEGGER_RTT.c **** *
1715:Src/SEGGER_RTT.c **** *  Function description
1716:Src/SEGGER_RTT.c **** *    Run-time configuration of a specific Down-buffer name (T->H).
1717:Src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1718:Src/SEGGER_RTT.c **** *
1719:Src/SEGGER_RTT.c **** *  Parameters
1720:Src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1721:Src/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1722:Src/SEGGER_RTT.c **** *
1723:Src/SEGGER_RTT.c **** *  Return value
1724:Src/SEGGER_RTT.c **** *    >= 0  O.K.
1725:Src/SEGGER_RTT.c **** *     < 0  Error
1726:Src/SEGGER_RTT.c **** */
1727:Src/SEGGER_RTT.c **** int SEGGER_RTT_SetNameDownBuffer(unsigned BufferIndex, const char* sName) {
 3080              		.loc 1 1727 75 is_stmt 1 view -0
 3081              		.cfi_startproc
 3082              		@ args = 0, pretend = 0, frame = 0
 3083              		@ frame_needed = 0, uses_anonymous_args = 0
 3084              		.loc 1 1727 75 is_stmt 0 view .LVU830
 3085 0000 38B5     		push	{r3, r4, r5, lr}
 3086              	.LCFI35:
 3087              		.cfi_def_cfa_offset 16
 3088              		.cfi_offset 3, -16
 3089              		.cfi_offset 4, -12
 3090              		.cfi_offset 5, -8
 3091              		.cfi_offset 14, -4
 3092 0002 0446     		mov	r4, r0
 3093 0004 0D46     		mov	r5, r1
1728:Src/SEGGER_RTT.c ****   int r;
 3094              		.loc 1 1728 3 is_stmt 1 view .LVU831
1729:Src/SEGGER_RTT.c **** 
1730:Src/SEGGER_RTT.c ****   INIT();
 3095              		.loc 1 1730 3 view .LVU832
 3096              		.loc 1 1730 3 view .LVU833
 3097 0006 0E4B     		ldr	r3, .L207
 3098 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3099 000a 9BB1     		cbz	r3, .L206
 3100              	.LVL283:
 3101              	.L202:
1731:Src/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 3102              		.loc 1 1731 3 view .LVU834
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 90


 3103              		.loc 1 1731 42 is_stmt 0 view .LVU835
 3104 000c 0C4B     		ldr	r3, .L207
 3105 000e 5B69     		ldr	r3, [r3, #20]
 3106              		.loc 1 1731 6 view .LVU836
 3107 0010 A342     		cmp	r3, r4
 3108 0012 12D9     		bls	.L204
 3109              	.LBB17:
1732:Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3110              		.loc 1 1732 5 is_stmt 1 view .LVU837
 3111              		.loc 1 1732 5 view .LVU838
 3112              		.syntax unified
 3113              	@ 1732 "Src/SEGGER_RTT.c" 1
 3114 0014 EFF31180 		mrs   r0, basepri  
 3115 0018 4FF02001 		mov   r1, #32       
 3116 001c 81F31188 		msr   basepri, r1  
 3117              		
 3118              	@ 0 "" 2
 3119              	.LVL284:
 3120              		.loc 1 1732 22 view .LVU839
1733:Src/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].sName = sName;
 3121              		.loc 1 1733 5 view .LVU840
 3122              		.loc 1 1733 42 is_stmt 0 view .LVU841
 3123              		.thumb
 3124              		.syntax unified
 3125 0020 04EB4404 		add	r4, r4, r4, lsl #1
 3126              	.LVL285:
 3127              		.loc 1 1733 42 view .LVU842
 3128 0024 E200     		lsls	r2, r4, #3
 3129 0026 064B     		ldr	r3, .L207
 3130 0028 1344     		add	r3, r3, r2
 3131 002a 1D66     		str	r5, [r3, #96]
1734:Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3132              		.loc 1 1734 5 is_stmt 1 view .LVU843
 3133              		.syntax unified
 3134              	@ 1734 "Src/SEGGER_RTT.c" 1
 3135 002c 80F31188 		msr   basepri, r0  
 3136              		
 3137              	@ 0 "" 2
 3138              		.thumb
 3139              		.syntax unified
 3140              	.LBE17:
 3141              		.loc 1 1734 24 view .LVU844
1735:Src/SEGGER_RTT.c ****     r =  0;
 3142              		.loc 1 1735 5 view .LVU845
 3143              	.LVL286:
 3144              		.loc 1 1735 7 is_stmt 0 view .LVU846
 3145 0030 0020     		movs	r0, #0
 3146              	.LVL287:
 3147              	.L201:
1736:Src/SEGGER_RTT.c ****   } else {
1737:Src/SEGGER_RTT.c ****     r = -1;
1738:Src/SEGGER_RTT.c ****   }
1739:Src/SEGGER_RTT.c ****   return r;
1740:Src/SEGGER_RTT.c **** }
 3148              		.loc 1 1740 1 view .LVU847
 3149 0032 38BD     		pop	{r3, r4, r5, pc}
 3150              	.LVL288:
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 91


 3151              	.L206:
1730:Src/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 3152              		.loc 1 1730 3 is_stmt 1 discriminator 1 view .LVU848
 3153 0034 FFF7FEFF 		bl	_DoInit
 3154              	.LVL289:
1730:Src/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 3155              		.loc 1 1730 3 is_stmt 0 discriminator 1 view .LVU849
 3156 0038 E8E7     		b	.L202
 3157              	.L204:
1737:Src/SEGGER_RTT.c ****   }
 3158              		.loc 1 1737 7 view .LVU850
 3159 003a 4FF0FF30 		mov	r0, #-1
 3160              	.LVL290:
1739:Src/SEGGER_RTT.c **** }
 3161              		.loc 1 1739 3 is_stmt 1 view .LVU851
1739:Src/SEGGER_RTT.c **** }
 3162              		.loc 1 1739 10 is_stmt 0 view .LVU852
 3163 003e F8E7     		b	.L201
 3164              	.L208:
 3165              		.align	2
 3166              	.L207:
 3167 0040 00000000 		.word	_SEGGER_RTT
 3168              		.cfi_endproc
 3169              	.LFE28:
 3171              		.section	.text.SEGGER_RTT_SetFlagsUpBuffer,"ax",%progbits
 3172              		.align	1
 3173              		.global	SEGGER_RTT_SetFlagsUpBuffer
 3174              		.syntax unified
 3175              		.thumb
 3176              		.thumb_func
 3177              		.fpu fpv5-d16
 3179              	SEGGER_RTT_SetFlagsUpBuffer:
 3180              	.LVL291:
 3181              	.LFB29:
1741:Src/SEGGER_RTT.c **** 
1742:Src/SEGGER_RTT.c **** /*********************************************************************
1743:Src/SEGGER_RTT.c **** *
1744:Src/SEGGER_RTT.c **** *       SEGGER_RTT_SetFlagsUpBuffer
1745:Src/SEGGER_RTT.c **** *
1746:Src/SEGGER_RTT.c **** *  Function description
1747:Src/SEGGER_RTT.c **** *    Run-time configuration of specific up-buffer flags (T->H).
1748:Src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1749:Src/SEGGER_RTT.c **** *
1750:Src/SEGGER_RTT.c **** *  Parameters
1751:Src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer.
1752:Src/SEGGER_RTT.c **** *    Flags        Flags to set for the buffer.
1753:Src/SEGGER_RTT.c **** *
1754:Src/SEGGER_RTT.c **** *  Return value
1755:Src/SEGGER_RTT.c **** *    >= 0  O.K.
1756:Src/SEGGER_RTT.c **** *     < 0  Error
1757:Src/SEGGER_RTT.c **** */
1758:Src/SEGGER_RTT.c **** int SEGGER_RTT_SetFlagsUpBuffer(unsigned BufferIndex, unsigned Flags) {
 3182              		.loc 1 1758 71 is_stmt 1 view -0
 3183              		.cfi_startproc
 3184              		@ args = 0, pretend = 0, frame = 0
 3185              		@ frame_needed = 0, uses_anonymous_args = 0
 3186              		.loc 1 1758 71 is_stmt 0 view .LVU854
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 92


 3187 0000 38B5     		push	{r3, r4, r5, lr}
 3188              	.LCFI36:
 3189              		.cfi_def_cfa_offset 16
 3190              		.cfi_offset 3, -16
 3191              		.cfi_offset 4, -12
 3192              		.cfi_offset 5, -8
 3193              		.cfi_offset 14, -4
 3194 0002 0446     		mov	r4, r0
 3195 0004 0D46     		mov	r5, r1
1759:Src/SEGGER_RTT.c ****   int r;
 3196              		.loc 1 1759 3 is_stmt 1 view .LVU855
1760:Src/SEGGER_RTT.c **** 
1761:Src/SEGGER_RTT.c ****   INIT();
 3197              		.loc 1 1761 3 view .LVU856
 3198              		.loc 1 1761 3 view .LVU857
 3199 0006 0E4B     		ldr	r3, .L215
 3200 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3201 000a 9BB1     		cbz	r3, .L214
 3202              	.LVL292:
 3203              	.L210:
1762:Src/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 3204              		.loc 1 1762 3 view .LVU858
 3205              		.loc 1 1762 42 is_stmt 0 view .LVU859
 3206 000c 0C4B     		ldr	r3, .L215
 3207 000e 1B69     		ldr	r3, [r3, #16]
 3208              		.loc 1 1762 6 view .LVU860
 3209 0010 A342     		cmp	r3, r4
 3210 0012 12D9     		bls	.L212
 3211              	.LBB18:
1763:Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3212              		.loc 1 1763 5 is_stmt 1 view .LVU861
 3213              		.loc 1 1763 5 view .LVU862
 3214              		.syntax unified
 3215              	@ 1763 "Src/SEGGER_RTT.c" 1
 3216 0014 EFF31180 		mrs   r0, basepri  
 3217 0018 4FF02001 		mov   r1, #32       
 3218 001c 81F31188 		msr   basepri, r1  
 3219              		
 3220              	@ 0 "" 2
 3221              	.LVL293:
 3222              		.loc 1 1763 22 view .LVU863
1764:Src/SEGGER_RTT.c ****     _SEGGER_RTT.aUp[BufferIndex].Flags = Flags;
 3223              		.loc 1 1764 5 view .LVU864
 3224              		.loc 1 1764 40 is_stmt 0 view .LVU865
 3225              		.thumb
 3226              		.syntax unified
 3227 0020 04EB4404 		add	r4, r4, r4, lsl #1
 3228              	.LVL294:
 3229              		.loc 1 1764 40 view .LVU866
 3230 0024 E200     		lsls	r2, r4, #3
 3231 0026 064B     		ldr	r3, .L215
 3232 0028 1344     		add	r3, r3, r2
 3233 002a DD62     		str	r5, [r3, #44]
1765:Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3234              		.loc 1 1765 5 is_stmt 1 view .LVU867
 3235              		.syntax unified
 3236              	@ 1765 "Src/SEGGER_RTT.c" 1
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 93


 3237 002c 80F31188 		msr   basepri, r0  
 3238              		
 3239              	@ 0 "" 2
 3240              		.thumb
 3241              		.syntax unified
 3242              	.LBE18:
 3243              		.loc 1 1765 24 view .LVU868
1766:Src/SEGGER_RTT.c ****     r =  0;
 3244              		.loc 1 1766 5 view .LVU869
 3245              	.LVL295:
 3246              		.loc 1 1766 7 is_stmt 0 view .LVU870
 3247 0030 0020     		movs	r0, #0
 3248              	.LVL296:
 3249              	.L209:
1767:Src/SEGGER_RTT.c ****   } else {
1768:Src/SEGGER_RTT.c ****     r = -1;
1769:Src/SEGGER_RTT.c ****   }
1770:Src/SEGGER_RTT.c ****   return r;
1771:Src/SEGGER_RTT.c **** }
 3250              		.loc 1 1771 1 view .LVU871
 3251 0032 38BD     		pop	{r3, r4, r5, pc}
 3252              	.LVL297:
 3253              	.L214:
1761:Src/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 3254              		.loc 1 1761 3 is_stmt 1 discriminator 1 view .LVU872
 3255 0034 FFF7FEFF 		bl	_DoInit
 3256              	.LVL298:
1761:Src/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 3257              		.loc 1 1761 3 is_stmt 0 discriminator 1 view .LVU873
 3258 0038 E8E7     		b	.L210
 3259              	.L212:
1768:Src/SEGGER_RTT.c ****   }
 3260              		.loc 1 1768 7 view .LVU874
 3261 003a 4FF0FF30 		mov	r0, #-1
 3262              	.LVL299:
1770:Src/SEGGER_RTT.c **** }
 3263              		.loc 1 1770 3 is_stmt 1 view .LVU875
1770:Src/SEGGER_RTT.c **** }
 3264              		.loc 1 1770 10 is_stmt 0 view .LVU876
 3265 003e F8E7     		b	.L209
 3266              	.L216:
 3267              		.align	2
 3268              	.L215:
 3269 0040 00000000 		.word	_SEGGER_RTT
 3270              		.cfi_endproc
 3271              	.LFE29:
 3273              		.section	.text.SEGGER_RTT_SetFlagsDownBuffer,"ax",%progbits
 3274              		.align	1
 3275              		.global	SEGGER_RTT_SetFlagsDownBuffer
 3276              		.syntax unified
 3277              		.thumb
 3278              		.thumb_func
 3279              		.fpu fpv5-d16
 3281              	SEGGER_RTT_SetFlagsDownBuffer:
 3282              	.LVL300:
 3283              	.LFB30:
1772:Src/SEGGER_RTT.c **** 
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 94


1773:Src/SEGGER_RTT.c **** /*********************************************************************
1774:Src/SEGGER_RTT.c **** *
1775:Src/SEGGER_RTT.c **** *       SEGGER_RTT_SetFlagsDownBuffer
1776:Src/SEGGER_RTT.c **** *
1777:Src/SEGGER_RTT.c **** *  Function description
1778:Src/SEGGER_RTT.c **** *    Run-time configuration of specific Down-buffer flags (T->H).
1779:Src/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1780:Src/SEGGER_RTT.c **** *
1781:Src/SEGGER_RTT.c **** *  Parameters
1782:Src/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1783:Src/SEGGER_RTT.c **** *    Flags        Flags to set for the buffer.
1784:Src/SEGGER_RTT.c **** *
1785:Src/SEGGER_RTT.c **** *  Return value
1786:Src/SEGGER_RTT.c **** *    >= 0  O.K.
1787:Src/SEGGER_RTT.c **** *     < 0  Error
1788:Src/SEGGER_RTT.c **** */
1789:Src/SEGGER_RTT.c **** int SEGGER_RTT_SetFlagsDownBuffer(unsigned BufferIndex, unsigned Flags) {
 3284              		.loc 1 1789 73 is_stmt 1 view -0
 3285              		.cfi_startproc
 3286              		@ args = 0, pretend = 0, frame = 0
 3287              		@ frame_needed = 0, uses_anonymous_args = 0
 3288              		.loc 1 1789 73 is_stmt 0 view .LVU878
 3289 0000 38B5     		push	{r3, r4, r5, lr}
 3290              	.LCFI37:
 3291              		.cfi_def_cfa_offset 16
 3292              		.cfi_offset 3, -16
 3293              		.cfi_offset 4, -12
 3294              		.cfi_offset 5, -8
 3295              		.cfi_offset 14, -4
 3296 0002 0446     		mov	r4, r0
 3297 0004 0D46     		mov	r5, r1
1790:Src/SEGGER_RTT.c ****   int r;
 3298              		.loc 1 1790 3 is_stmt 1 view .LVU879
1791:Src/SEGGER_RTT.c **** 
1792:Src/SEGGER_RTT.c ****   INIT();
 3299              		.loc 1 1792 3 view .LVU880
 3300              		.loc 1 1792 3 view .LVU881
 3301 0006 0E4B     		ldr	r3, .L223
 3302 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3303 000a 9BB1     		cbz	r3, .L222
 3304              	.LVL301:
 3305              	.L218:
1793:Src/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 3306              		.loc 1 1793 3 view .LVU882
 3307              		.loc 1 1793 42 is_stmt 0 view .LVU883
 3308 000c 0C4B     		ldr	r3, .L223
 3309 000e 5B69     		ldr	r3, [r3, #20]
 3310              		.loc 1 1793 6 view .LVU884
 3311 0010 A342     		cmp	r3, r4
 3312 0012 12D9     		bls	.L220
 3313              	.LBB19:
1794:Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3314              		.loc 1 1794 5 is_stmt 1 view .LVU885
 3315              		.loc 1 1794 5 view .LVU886
 3316              		.syntax unified
 3317              	@ 1794 "Src/SEGGER_RTT.c" 1
 3318 0014 EFF31180 		mrs   r0, basepri  
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 95


 3319 0018 4FF02001 		mov   r1, #32       
 3320 001c 81F31188 		msr   basepri, r1  
 3321              		
 3322              	@ 0 "" 2
 3323              	.LVL302:
 3324              		.loc 1 1794 22 view .LVU887
1795:Src/SEGGER_RTT.c ****     _SEGGER_RTT.aDown[BufferIndex].Flags = Flags;
 3325              		.loc 1 1795 5 view .LVU888
 3326              		.loc 1 1795 42 is_stmt 0 view .LVU889
 3327              		.thumb
 3328              		.syntax unified
 3329 0020 04EB4404 		add	r4, r4, r4, lsl #1
 3330              	.LVL303:
 3331              		.loc 1 1795 42 view .LVU890
 3332 0024 E200     		lsls	r2, r4, #3
 3333 0026 064B     		ldr	r3, .L223
 3334 0028 1344     		add	r3, r3, r2
 3335 002a 5D67     		str	r5, [r3, #116]
1796:Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3336              		.loc 1 1796 5 is_stmt 1 view .LVU891
 3337              		.syntax unified
 3338              	@ 1796 "Src/SEGGER_RTT.c" 1
 3339 002c 80F31188 		msr   basepri, r0  
 3340              		
 3341              	@ 0 "" 2
 3342              		.thumb
 3343              		.syntax unified
 3344              	.LBE19:
 3345              		.loc 1 1796 24 view .LVU892
1797:Src/SEGGER_RTT.c ****     r =  0;
 3346              		.loc 1 1797 5 view .LVU893
 3347              	.LVL304:
 3348              		.loc 1 1797 7 is_stmt 0 view .LVU894
 3349 0030 0020     		movs	r0, #0
 3350              	.LVL305:
 3351              	.L217:
1798:Src/SEGGER_RTT.c ****   } else {
1799:Src/SEGGER_RTT.c ****     r = -1;
1800:Src/SEGGER_RTT.c ****   }
1801:Src/SEGGER_RTT.c ****   return r;
1802:Src/SEGGER_RTT.c **** }
 3352              		.loc 1 1802 1 view .LVU895
 3353 0032 38BD     		pop	{r3, r4, r5, pc}
 3354              	.LVL306:
 3355              	.L222:
1792:Src/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 3356              		.loc 1 1792 3 is_stmt 1 discriminator 1 view .LVU896
 3357 0034 FFF7FEFF 		bl	_DoInit
 3358              	.LVL307:
1792:Src/SEGGER_RTT.c ****   if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 3359              		.loc 1 1792 3 is_stmt 0 discriminator 1 view .LVU897
 3360 0038 E8E7     		b	.L218
 3361              	.L220:
1799:Src/SEGGER_RTT.c ****   }
 3362              		.loc 1 1799 7 view .LVU898
 3363 003a 4FF0FF30 		mov	r0, #-1
 3364              	.LVL308:
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 96


1801:Src/SEGGER_RTT.c **** }
 3365              		.loc 1 1801 3 is_stmt 1 view .LVU899
1801:Src/SEGGER_RTT.c **** }
 3366              		.loc 1 1801 10 is_stmt 0 view .LVU900
 3367 003e F8E7     		b	.L217
 3368              	.L224:
 3369              		.align	2
 3370              	.L223:
 3371 0040 00000000 		.word	_SEGGER_RTT
 3372              		.cfi_endproc
 3373              	.LFE30:
 3375              		.section	.text.SEGGER_RTT_Init,"ax",%progbits
 3376              		.align	1
 3377              		.global	SEGGER_RTT_Init
 3378              		.syntax unified
 3379              		.thumb
 3380              		.thumb_func
 3381              		.fpu fpv5-d16
 3383              	SEGGER_RTT_Init:
 3384              	.LFB31:
1803:Src/SEGGER_RTT.c **** 
1804:Src/SEGGER_RTT.c **** /*********************************************************************
1805:Src/SEGGER_RTT.c **** *
1806:Src/SEGGER_RTT.c **** *       SEGGER_RTT_Init
1807:Src/SEGGER_RTT.c **** *
1808:Src/SEGGER_RTT.c **** *  Function description
1809:Src/SEGGER_RTT.c **** *    Initializes the RTT Control Block.
1810:Src/SEGGER_RTT.c **** *    Should be used in RAM targets, at start of the application.
1811:Src/SEGGER_RTT.c **** *
1812:Src/SEGGER_RTT.c **** */
1813:Src/SEGGER_RTT.c **** void SEGGER_RTT_Init (void) {
 3385              		.loc 1 1813 29 is_stmt 1 view -0
 3386              		.cfi_startproc
 3387              		@ args = 0, pretend = 0, frame = 0
 3388              		@ frame_needed = 0, uses_anonymous_args = 0
 3389 0000 08B5     		push	{r3, lr}
 3390              	.LCFI38:
 3391              		.cfi_def_cfa_offset 8
 3392              		.cfi_offset 3, -8
 3393              		.cfi_offset 14, -4
1814:Src/SEGGER_RTT.c ****   _DoInit();
 3394              		.loc 1 1814 3 view .LVU902
 3395 0002 FFF7FEFF 		bl	_DoInit
 3396              	.LVL309:
1815:Src/SEGGER_RTT.c **** }
 3397              		.loc 1 1815 1 is_stmt 0 view .LVU903
 3398 0006 08BD     		pop	{r3, pc}
 3399              		.cfi_endproc
 3400              	.LFE31:
 3402              		.section	.text.SEGGER_RTT_SetTerminal,"ax",%progbits
 3403              		.align	1
 3404              		.global	SEGGER_RTT_SetTerminal
 3405              		.syntax unified
 3406              		.thumb
 3407              		.thumb_func
 3408              		.fpu fpv5-d16
 3410              	SEGGER_RTT_SetTerminal:
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 97


 3411              	.LVL310:
 3412              	.LFB32:
1816:Src/SEGGER_RTT.c **** 
1817:Src/SEGGER_RTT.c **** /*********************************************************************
1818:Src/SEGGER_RTT.c **** *
1819:Src/SEGGER_RTT.c **** *       SEGGER_RTT_SetTerminal
1820:Src/SEGGER_RTT.c **** *
1821:Src/SEGGER_RTT.c **** *  Function description
1822:Src/SEGGER_RTT.c **** *    Sets the terminal to be used for output on channel 0.
1823:Src/SEGGER_RTT.c **** *
1824:Src/SEGGER_RTT.c **** *  Parameters
1825:Src/SEGGER_RTT.c **** *    TerminalId  Index of the terminal.
1826:Src/SEGGER_RTT.c **** *
1827:Src/SEGGER_RTT.c **** *  Return value
1828:Src/SEGGER_RTT.c **** *    >= 0  O.K.
1829:Src/SEGGER_RTT.c **** *     < 0  Error (e.g. if RTT is configured for non-blocking mode and there was no space in the buf
1830:Src/SEGGER_RTT.c **** */
1831:Src/SEGGER_RTT.c **** int SEGGER_RTT_SetTerminal (unsigned char TerminalId) {
 3413              		.loc 1 1831 55 is_stmt 1 view -0
 3414              		.cfi_startproc
 3415              		@ args = 0, pretend = 0, frame = 8
 3416              		@ frame_needed = 0, uses_anonymous_args = 0
 3417              		.loc 1 1831 55 is_stmt 0 view .LVU905
 3418 0000 30B5     		push	{r4, r5, lr}
 3419              	.LCFI39:
 3420              		.cfi_def_cfa_offset 12
 3421              		.cfi_offset 4, -12
 3422              		.cfi_offset 5, -8
 3423              		.cfi_offset 14, -4
 3424 0002 83B0     		sub	sp, sp, #12
 3425              	.LCFI40:
 3426              		.cfi_def_cfa_offset 24
 3427 0004 0446     		mov	r4, r0
1832:Src/SEGGER_RTT.c ****   unsigned char         ac[2];
 3428              		.loc 1 1832 3 is_stmt 1 view .LVU906
1833:Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 3429              		.loc 1 1833 3 view .LVU907
1834:Src/SEGGER_RTT.c ****   unsigned Avail;
 3430              		.loc 1 1834 3 view .LVU908
1835:Src/SEGGER_RTT.c ****   int r;
 3431              		.loc 1 1835 3 view .LVU909
1836:Src/SEGGER_RTT.c ****   //
1837:Src/SEGGER_RTT.c ****   INIT();
 3432              		.loc 1 1837 3 view .LVU910
 3433              		.loc 1 1837 3 view .LVU911
 3434 0006 1D4B     		ldr	r3, .L238
 3435 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3436 000a FBB1     		cbz	r3, .L235
 3437              	.LVL311:
 3438              	.L228:
1838:Src/SEGGER_RTT.c ****   //
1839:Src/SEGGER_RTT.c ****   r = 0;
 3439              		.loc 1 1839 3 view .LVU912
1840:Src/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 3440              		.loc 1 1840 3 view .LVU913
 3441              		.loc 1 1840 9 is_stmt 0 view .LVU914
 3442 000c FF23     		movs	r3, #255
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 98


 3443 000e 8DF80430 		strb	r3, [sp, #4]
1841:Src/SEGGER_RTT.c ****   if (TerminalId < sizeof(_aTerminalId)) { // We only support a certain number of channels
 3444              		.loc 1 1841 3 is_stmt 1 view .LVU915
 3445              		.loc 1 1841 6 is_stmt 0 view .LVU916
 3446 0012 0F2C     		cmp	r4, #15
 3447 0014 2FD8     		bhi	.L232
1842:Src/SEGGER_RTT.c ****     ac[1] = _aTerminalId[TerminalId];
 3448              		.loc 1 1842 5 is_stmt 1 view .LVU917
 3449              		.loc 1 1842 25 is_stmt 0 view .LVU918
 3450 0016 1A4B     		ldr	r3, .L238+4
 3451 0018 1B5D     		ldrb	r3, [r3, r4]	@ zero_extendqisi2
 3452              		.loc 1 1842 11 view .LVU919
 3453 001a 8DF80530 		strb	r3, [sp, #5]
1843:Src/SEGGER_RTT.c ****     pRing = &_SEGGER_RTT.aUp[0];    // Buffer 0 is always reserved for terminal I/O, so we can use 
 3454              		.loc 1 1843 5 is_stmt 1 view .LVU920
 3455              	.LVL312:
 3456              	.LBB20:
1844:Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();    // Lock to make sure that no other task is writing into buffer, while we 
 3457              		.loc 1 1844 5 view .LVU921
 3458              		.loc 1 1844 5 view .LVU922
 3459              		.syntax unified
 3460              	@ 1844 "Src/SEGGER_RTT.c" 1
 3461 001e EFF31185 		mrs   r5, basepri  
 3462 0022 4FF02001 		mov   r1, #32       
 3463 0026 81F31188 		msr   basepri, r1  
 3464              		
 3465              	@ 0 "" 2
 3466              	.LVL313:
 3467              		.loc 1 1844 22 view .LVU923
1845:Src/SEGGER_RTT.c ****     if ((pRing->Flags & SEGGER_RTT_MODE_MASK) == SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL) {
 3468              		.loc 1 1845 5 view .LVU924
 3469              		.loc 1 1845 15 is_stmt 0 view .LVU925
 3470              		.thumb
 3471              		.syntax unified
 3472 002a 144B     		ldr	r3, .L238
 3473 002c DB6A     		ldr	r3, [r3, #44]
 3474              		.loc 1 1845 23 view .LVU926
 3475 002e 03F00303 		and	r3, r3, #3
 3476              		.loc 1 1845 8 view .LVU927
 3477 0032 022B     		cmp	r3, #2
 3478 0034 0DD0     		beq	.L236
1846:Src/SEGGER_RTT.c ****       _ActiveTerminal = TerminalId;
1847:Src/SEGGER_RTT.c ****       _WriteBlocking(pRing, (const char*)ac, 2u);
1848:Src/SEGGER_RTT.c ****     } else {                                                                            // Skipping
1849:Src/SEGGER_RTT.c ****       Avail = _GetAvailWriteSpace(pRing);
 3479              		.loc 1 1849 7 is_stmt 1 view .LVU928
 3480              		.loc 1 1849 15 is_stmt 0 view .LVU929
 3481 0036 1348     		ldr	r0, .L238+8
 3482              	.LVL314:
 3483              		.loc 1 1849 15 view .LVU930
 3484 0038 FFF7FEFF 		bl	_GetAvailWriteSpace
 3485              	.LVL315:
1850:Src/SEGGER_RTT.c ****       if (Avail >= 2) {
 3486              		.loc 1 1850 7 is_stmt 1 view .LVU931
 3487              		.loc 1 1850 10 is_stmt 0 view .LVU932
 3488 003c 0128     		cmp	r0, #1
 3489 003e 11D8     		bhi	.L237
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 99


1851:Src/SEGGER_RTT.c ****         _ActiveTerminal = TerminalId;    // Only change active terminal in case of success
1852:Src/SEGGER_RTT.c ****         _WriteNoCheck(pRing, (const char*)ac, 2u);
1853:Src/SEGGER_RTT.c ****       } else {
1854:Src/SEGGER_RTT.c ****         r = -1;
 3490              		.loc 1 1854 11 view .LVU933
 3491 0040 4FF0FF30 		mov	r0, #-1
 3492              	.LVL316:
 3493              	.L231:
1855:Src/SEGGER_RTT.c ****       }
1856:Src/SEGGER_RTT.c ****     }
1857:Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3494              		.loc 1 1857 5 is_stmt 1 view .LVU934
 3495              		.syntax unified
 3496              	@ 1857 "Src/SEGGER_RTT.c" 1
 3497 0044 85F31188 		msr   basepri, r5  
 3498              		
 3499              	@ 0 "" 2
 3500              		.thumb
 3501              		.syntax unified
 3502              	.LBE20:
 3503              		.loc 1 1857 24 view .LVU935
 3504              	.LVL317:
 3505              	.L227:
1858:Src/SEGGER_RTT.c ****   } else {
1859:Src/SEGGER_RTT.c ****     r = -1;
1860:Src/SEGGER_RTT.c ****   }
1861:Src/SEGGER_RTT.c ****   return r;
1862:Src/SEGGER_RTT.c **** }
 3506              		.loc 1 1862 1 is_stmt 0 view .LVU936
 3507 0048 03B0     		add	sp, sp, #12
 3508              	.LCFI41:
 3509              		.cfi_remember_state
 3510              		.cfi_def_cfa_offset 12
 3511              		@ sp needed
 3512 004a 30BD     		pop	{r4, r5, pc}
 3513              	.LVL318:
 3514              	.L235:
 3515              	.LCFI42:
 3516              		.cfi_restore_state
1837:Src/SEGGER_RTT.c ****   //
 3517              		.loc 1 1837 3 is_stmt 1 discriminator 1 view .LVU937
 3518 004c FFF7FEFF 		bl	_DoInit
 3519              	.LVL319:
1837:Src/SEGGER_RTT.c ****   //
 3520              		.loc 1 1837 3 is_stmt 0 discriminator 1 view .LVU938
 3521 0050 DCE7     		b	.L228
 3522              	.LVL320:
 3523              	.L236:
 3524              	.LBB21:
1846:Src/SEGGER_RTT.c ****       _WriteBlocking(pRing, (const char*)ac, 2u);
 3525              		.loc 1 1846 7 is_stmt 1 view .LVU939
1846:Src/SEGGER_RTT.c ****       _WriteBlocking(pRing, (const char*)ac, 2u);
 3526              		.loc 1 1846 23 is_stmt 0 view .LVU940
 3527 0052 0D4B     		ldr	r3, .L238+12
 3528 0054 1C70     		strb	r4, [r3]
1847:Src/SEGGER_RTT.c ****     } else {                                                                            // Skipping
 3529              		.loc 1 1847 7 is_stmt 1 view .LVU941
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 100


 3530 0056 0222     		movs	r2, #2
 3531 0058 01A9     		add	r1, sp, #4
 3532 005a 0A48     		ldr	r0, .L238+8
 3533              	.LVL321:
1847:Src/SEGGER_RTT.c ****     } else {                                                                            // Skipping
 3534              		.loc 1 1847 7 is_stmt 0 view .LVU942
 3535 005c FFF7FEFF 		bl	_WriteBlocking
 3536              	.LVL322:
1847:Src/SEGGER_RTT.c ****     } else {                                                                            // Skipping
 3537              		.loc 1 1847 7 view .LVU943
 3538              	.LBE21:
1839:Src/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 3539              		.loc 1 1839 5 view .LVU944
 3540 0060 0020     		movs	r0, #0
 3541              	.LBB22:
 3542 0062 EFE7     		b	.L231
 3543              	.LVL323:
 3544              	.L237:
1851:Src/SEGGER_RTT.c ****         _WriteNoCheck(pRing, (const char*)ac, 2u);
 3545              		.loc 1 1851 9 is_stmt 1 view .LVU945
1851:Src/SEGGER_RTT.c ****         _WriteNoCheck(pRing, (const char*)ac, 2u);
 3546              		.loc 1 1851 25 is_stmt 0 view .LVU946
 3547 0064 084B     		ldr	r3, .L238+12
 3548 0066 1C70     		strb	r4, [r3]
1852:Src/SEGGER_RTT.c ****       } else {
 3549              		.loc 1 1852 9 is_stmt 1 view .LVU947
 3550 0068 0222     		movs	r2, #2
 3551 006a 01A9     		add	r1, sp, #4
 3552 006c 0548     		ldr	r0, .L238+8
 3553              	.LVL324:
1852:Src/SEGGER_RTT.c ****       } else {
 3554              		.loc 1 1852 9 is_stmt 0 view .LVU948
 3555 006e FFF7FEFF 		bl	_WriteNoCheck
 3556              	.LVL325:
1852:Src/SEGGER_RTT.c ****       } else {
 3557              		.loc 1 1852 9 view .LVU949
 3558              	.LBE22:
1839:Src/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 3559              		.loc 1 1839 5 view .LVU950
 3560 0072 0020     		movs	r0, #0
 3561              	.LBB23:
 3562 0074 E6E7     		b	.L231
 3563              	.LVL326:
 3564              	.L232:
1839:Src/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 3565              		.loc 1 1839 5 view .LVU951
 3566              	.LBE23:
1859:Src/SEGGER_RTT.c ****   }
 3567              		.loc 1 1859 7 view .LVU952
 3568 0076 4FF0FF30 		mov	r0, #-1
 3569              	.LVL327:
1861:Src/SEGGER_RTT.c **** }
 3570              		.loc 1 1861 3 is_stmt 1 view .LVU953
1861:Src/SEGGER_RTT.c **** }
 3571              		.loc 1 1861 10 is_stmt 0 view .LVU954
 3572 007a E5E7     		b	.L227
 3573              	.L239:
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 101


 3574              		.align	2
 3575              	.L238:
 3576 007c 00000000 		.word	_SEGGER_RTT
 3577 0080 00000000 		.word	.LANCHOR0
 3578 0084 18000000 		.word	_SEGGER_RTT+24
 3579 0088 00000000 		.word	.LANCHOR3
 3580              		.cfi_endproc
 3581              	.LFE32:
 3583              		.section	.text.SEGGER_RTT_TerminalOut,"ax",%progbits
 3584              		.align	1
 3585              		.global	SEGGER_RTT_TerminalOut
 3586              		.syntax unified
 3587              		.thumb
 3588              		.thumb_func
 3589              		.fpu fpv5-d16
 3591              	SEGGER_RTT_TerminalOut:
 3592              	.LVL328:
 3593              	.LFB33:
1863:Src/SEGGER_RTT.c **** 
1864:Src/SEGGER_RTT.c **** /*********************************************************************
1865:Src/SEGGER_RTT.c **** *
1866:Src/SEGGER_RTT.c **** *       SEGGER_RTT_TerminalOut
1867:Src/SEGGER_RTT.c **** *
1868:Src/SEGGER_RTT.c **** *  Function description
1869:Src/SEGGER_RTT.c **** *    Writes a string to the given terminal
1870:Src/SEGGER_RTT.c **** *     without changing the terminal for channel 0.
1871:Src/SEGGER_RTT.c **** *
1872:Src/SEGGER_RTT.c **** *  Parameters
1873:Src/SEGGER_RTT.c **** *    TerminalId   Index of the terminal.
1874:Src/SEGGER_RTT.c **** *    s            String to be printed on the terminal.
1875:Src/SEGGER_RTT.c **** *
1876:Src/SEGGER_RTT.c **** *  Return value
1877:Src/SEGGER_RTT.c **** *    >= 0 - Number of bytes written.
1878:Src/SEGGER_RTT.c **** *     < 0 - Error.
1879:Src/SEGGER_RTT.c **** *
1880:Src/SEGGER_RTT.c **** */
1881:Src/SEGGER_RTT.c **** int SEGGER_RTT_TerminalOut (unsigned char TerminalId, const char* s) {
 3594              		.loc 1 1881 70 is_stmt 1 view -0
 3595              		.cfi_startproc
 3596              		@ args = 0, pretend = 0, frame = 0
 3597              		@ frame_needed = 0, uses_anonymous_args = 0
 3598              		.loc 1 1881 70 is_stmt 0 view .LVU956
 3599 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 3600              	.LCFI43:
 3601              		.cfi_def_cfa_offset 32
 3602              		.cfi_offset 4, -32
 3603              		.cfi_offset 5, -28
 3604              		.cfi_offset 6, -24
 3605              		.cfi_offset 7, -20
 3606              		.cfi_offset 8, -16
 3607              		.cfi_offset 9, -12
 3608              		.cfi_offset 10, -8
 3609              		.cfi_offset 14, -4
 3610 0004 0546     		mov	r5, r0
 3611 0006 0E46     		mov	r6, r1
1882:Src/SEGGER_RTT.c ****   int                   Status;
 3612              		.loc 1 1882 3 is_stmt 1 view .LVU957
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 102


1883:Src/SEGGER_RTT.c ****   unsigned              FragLen;
 3613              		.loc 1 1883 3 view .LVU958
1884:Src/SEGGER_RTT.c ****   unsigned              Avail;
 3614              		.loc 1 1884 3 view .LVU959
1885:Src/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 3615              		.loc 1 1885 3 view .LVU960
1886:Src/SEGGER_RTT.c ****   //
1887:Src/SEGGER_RTT.c ****   INIT();
 3616              		.loc 1 1887 3 view .LVU961
 3617              		.loc 1 1887 3 view .LVU962
 3618 0008 364B     		ldr	r3, .L254
 3619 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3620 000c FBB1     		cbz	r3, .L251
 3621              	.LVL329:
 3622              	.L241:
1888:Src/SEGGER_RTT.c ****   //
1889:Src/SEGGER_RTT.c ****   // Validate terminal ID.
1890:Src/SEGGER_RTT.c ****   //
1891:Src/SEGGER_RTT.c ****   if (TerminalId < (char)sizeof(_aTerminalId)) { // We only support a certain number of channels
 3623              		.loc 1 1891 3 view .LVU963
 3624              		.loc 1 1891 6 is_stmt 0 view .LVU964
 3625 000e 0F2D     		cmp	r5, #15
 3626 0010 65D8     		bhi	.L247
1892:Src/SEGGER_RTT.c ****     //
1893:Src/SEGGER_RTT.c ****     // Get "to-host" ring buffer.
1894:Src/SEGGER_RTT.c ****     //
1895:Src/SEGGER_RTT.c ****     pRing = &_SEGGER_RTT.aUp[0];
 3627              		.loc 1 1895 5 is_stmt 1 view .LVU965
 3628              	.LVL330:
1896:Src/SEGGER_RTT.c ****     //
1897:Src/SEGGER_RTT.c ****     // Need to be able to change terminal, write data, change back.
1898:Src/SEGGER_RTT.c ****     // Compute the fixed and variable sizes.
1899:Src/SEGGER_RTT.c ****     //
1900:Src/SEGGER_RTT.c ****     FragLen = STRLEN(s);
 3629              		.loc 1 1900 5 view .LVU966
 3630              		.loc 1 1900 15 is_stmt 0 view .LVU967
 3631 0012 3046     		mov	r0, r6
 3632 0014 FFF7FEFF 		bl	strlen
 3633              	.LVL331:
 3634 0018 8146     		mov	r9, r0
 3635              	.LVL332:
 3636              	.LBB24:
1901:Src/SEGGER_RTT.c ****     //
1902:Src/SEGGER_RTT.c ****     // How we output depends upon the mode...
1903:Src/SEGGER_RTT.c ****     //
1904:Src/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3637              		.loc 1 1904 5 is_stmt 1 view .LVU968
 3638              		.loc 1 1904 5 view .LVU969
 3639              		.syntax unified
 3640              	@ 1904 "Src/SEGGER_RTT.c" 1
 3641 001a EFF31187 		mrs   r7, basepri  
 3642 001e 4FF02001 		mov   r1, #32       
 3643 0022 81F31188 		msr   basepri, r1  
 3644              		
 3645              	@ 0 "" 2
 3646              	.LVL333:
 3647              		.loc 1 1904 22 view .LVU970
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 103


1905:Src/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
 3648              		.loc 1 1905 5 view .LVU971
 3649              		.loc 1 1905 13 is_stmt 0 view .LVU972
 3650              		.thumb
 3651              		.syntax unified
 3652 0026 304C     		ldr	r4, .L254+4
 3653              	.LVL334:
 3654              		.loc 1 1905 13 view .LVU973
 3655 0028 2046     		mov	r0, r4
 3656              	.LVL335:
 3657              		.loc 1 1905 13 view .LVU974
 3658 002a FFF7FEFF 		bl	_GetAvailWriteSpace
 3659              	.LVL336:
 3660 002e 8046     		mov	r8, r0
 3661              	.LVL337:
1906:Src/SEGGER_RTT.c ****     switch (pRing->Flags & SEGGER_RTT_MODE_MASK) {
 3662              		.loc 1 1906 5 is_stmt 1 view .LVU975
 3663              		.loc 1 1906 18 is_stmt 0 view .LVU976
 3664 0030 6369     		ldr	r3, [r4, #20]
 3665              		.loc 1 1906 26 view .LVU977
 3666 0032 03F00303 		and	r3, r3, #3
 3667              		.loc 1 1906 5 view .LVU978
 3668 0036 012B     		cmp	r3, #1
 3669 0038 24D0     		beq	.L243
 3670 003a 5BB1     		cbz	r3, .L244
 3671 003c 022B     		cmp	r3, #2
 3672 003e 3CD0     		beq	.L245
1907:Src/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
1908:Src/SEGGER_RTT.c ****       //
1909:Src/SEGGER_RTT.c ****       // If we are in skip mode and there is no space for the whole
1910:Src/SEGGER_RTT.c ****       // of this output, don't bother switching terminals at all.
1911:Src/SEGGER_RTT.c ****       //
1912:Src/SEGGER_RTT.c ****       if (Avail < (FragLen + 4u)) {
1913:Src/SEGGER_RTT.c ****         Status = 0;
1914:Src/SEGGER_RTT.c ****       } else {
1915:Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, TerminalId);
1916:Src/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, FragLen);
1917:Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
1918:Src/SEGGER_RTT.c ****       }
1919:Src/SEGGER_RTT.c ****       break;
1920:Src/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
1921:Src/SEGGER_RTT.c ****       //
1922:Src/SEGGER_RTT.c ****       // If we are in trim mode and there is not enough space for everything,
1923:Src/SEGGER_RTT.c ****       // trim the output but always include the terminal switch.  If no room
1924:Src/SEGGER_RTT.c ****       // for terminal switch, skip that totally.
1925:Src/SEGGER_RTT.c ****       //
1926:Src/SEGGER_RTT.c ****       if (Avail < 4u) {
1927:Src/SEGGER_RTT.c ****         Status = -1;
1928:Src/SEGGER_RTT.c ****       } else {
1929:Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, TerminalId);
1930:Src/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
1931:Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
1932:Src/SEGGER_RTT.c ****       }
1933:Src/SEGGER_RTT.c ****       break;
1934:Src/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
1935:Src/SEGGER_RTT.c ****       //
1936:Src/SEGGER_RTT.c ****       // If we are in blocking mode, output everything.
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 104


1937:Src/SEGGER_RTT.c ****       //
1938:Src/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, TerminalId);
1939:Src/SEGGER_RTT.c ****       Status = (int)_WriteBlocking(pRing, s, FragLen);
1940:Src/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, _ActiveTerminal);
1941:Src/SEGGER_RTT.c ****       break;
1942:Src/SEGGER_RTT.c ****     default:
1943:Src/SEGGER_RTT.c ****       Status = -1;
 3673              		.loc 1 1943 14 view .LVU979
 3674 0040 4FF0FF34 		mov	r4, #-1
 3675              	.LVL338:
 3676              	.L246:
1944:Src/SEGGER_RTT.c ****       break;
1945:Src/SEGGER_RTT.c ****     }
1946:Src/SEGGER_RTT.c ****     //
1947:Src/SEGGER_RTT.c ****     // Finish up.
1948:Src/SEGGER_RTT.c ****     //
1949:Src/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3677              		.loc 1 1949 5 is_stmt 1 view .LVU980
 3678              		.syntax unified
 3679              	@ 1949 "Src/SEGGER_RTT.c" 1
 3680 0044 87F31188 		msr   basepri, r7  
 3681              		
 3682              	@ 0 "" 2
 3683              		.thumb
 3684              		.syntax unified
 3685              	.LBE24:
 3686              		.loc 1 1949 24 view .LVU981
 3687              	.LVL339:
 3688              	.L240:
1950:Src/SEGGER_RTT.c ****   } else {
1951:Src/SEGGER_RTT.c ****     Status = -1;
1952:Src/SEGGER_RTT.c ****   }
1953:Src/SEGGER_RTT.c ****   return Status;
1954:Src/SEGGER_RTT.c **** }
 3689              		.loc 1 1954 1 is_stmt 0 view .LVU982
 3690 0048 2046     		mov	r0, r4
 3691 004a BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 3692              	.LVL340:
 3693              	.L251:
1887:Src/SEGGER_RTT.c ****   //
 3694              		.loc 1 1887 3 is_stmt 1 discriminator 1 view .LVU983
 3695 004e FFF7FEFF 		bl	_DoInit
 3696              	.LVL341:
1887:Src/SEGGER_RTT.c ****   //
 3697              		.loc 1 1887 3 is_stmt 0 discriminator 1 view .LVU984
 3698 0052 DCE7     		b	.L241
 3699              	.LVL342:
 3700              	.L244:
 3701              	.LBB25:
1912:Src/SEGGER_RTT.c ****         Status = 0;
 3702              		.loc 1 1912 7 is_stmt 1 view .LVU985
1912:Src/SEGGER_RTT.c ****         Status = 0;
 3703              		.loc 1 1912 28 is_stmt 0 view .LVU986
 3704 0054 09F10403 		add	r3, r9, #4
1912:Src/SEGGER_RTT.c ****         Status = 0;
 3705              		.loc 1 1912 10 view .LVU987
 3706 0058 8342     		cmp	r3, r0
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 105


 3707 005a 01D9     		bls	.L252
1913:Src/SEGGER_RTT.c ****       } else {
 3708              		.loc 1 1913 16 view .LVU988
 3709 005c 0024     		movs	r4, #0
 3710              	.LVL343:
1913:Src/SEGGER_RTT.c ****       } else {
 3711              		.loc 1 1913 16 view .LVU989
 3712 005e F1E7     		b	.L246
 3713              	.LVL344:
 3714              	.L252:
1915:Src/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, FragLen);
 3715              		.loc 1 1915 9 is_stmt 1 view .LVU990
 3716 0060 DFF88480 		ldr	r8, .L254+4
 3717 0064 2946     		mov	r1, r5
 3718 0066 4046     		mov	r0, r8
 3719              	.LVL345:
1915:Src/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, FragLen);
 3720              		.loc 1 1915 9 is_stmt 0 view .LVU991
 3721 0068 FFF7FEFF 		bl	_PostTerminalSwitch
 3722              	.LVL346:
1916:Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3723              		.loc 1 1916 9 is_stmt 1 view .LVU992
1916:Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3724              		.loc 1 1916 23 is_stmt 0 view .LVU993
 3725 006c 4A46     		mov	r2, r9
 3726 006e 3146     		mov	r1, r6
 3727 0070 4046     		mov	r0, r8
 3728 0072 FFF7FEFF 		bl	_WriteBlocking
 3729              	.LVL347:
 3730 0076 0446     		mov	r4, r0
 3731              	.LVL348:
1917:Src/SEGGER_RTT.c ****       }
 3732              		.loc 1 1917 9 is_stmt 1 view .LVU994
 3733 0078 1C4B     		ldr	r3, .L254+8
 3734 007a 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3735 007c 4046     		mov	r0, r8
 3736              	.LVL349:
1917:Src/SEGGER_RTT.c ****       }
 3737              		.loc 1 1917 9 is_stmt 0 view .LVU995
 3738 007e FFF7FEFF 		bl	_PostTerminalSwitch
 3739              	.LVL350:
 3740 0082 DFE7     		b	.L246
 3741              	.LVL351:
 3742              	.L243:
1926:Src/SEGGER_RTT.c ****         Status = -1;
 3743              		.loc 1 1926 7 is_stmt 1 view .LVU996
1926:Src/SEGGER_RTT.c ****         Status = -1;
 3744              		.loc 1 1926 10 is_stmt 0 view .LVU997
 3745 0084 0328     		cmp	r0, #3
 3746 0086 02D8     		bhi	.L253
1927:Src/SEGGER_RTT.c ****       } else {
 3747              		.loc 1 1927 16 view .LVU998
 3748 0088 4FF0FF34 		mov	r4, #-1
 3749              	.LVL352:
1927:Src/SEGGER_RTT.c ****       } else {
 3750              		.loc 1 1927 16 view .LVU999
 3751 008c DAE7     		b	.L246
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 106


 3752              	.LVL353:
 3753              	.L253:
1929:Src/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
 3754              		.loc 1 1929 9 is_stmt 1 view .LVU1000
 3755 008e DFF858A0 		ldr	r10, .L254+4
 3756 0092 2946     		mov	r1, r5
 3757 0094 5046     		mov	r0, r10
 3758              	.LVL354:
1929:Src/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
 3759              		.loc 1 1929 9 is_stmt 0 view .LVU1001
 3760 0096 FFF7FEFF 		bl	_PostTerminalSwitch
 3761              	.LVL355:
1930:Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3762              		.loc 1 1930 9 is_stmt 1 view .LVU1002
1930:Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3763              		.loc 1 1930 66 is_stmt 0 view .LVU1003
 3764 009a A8F10402 		sub	r2, r8, #4
1930:Src/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 3765              		.loc 1 1930 23 view .LVU1004
 3766 009e 4A45     		cmp	r2, r9
 3767 00a0 28BF     		it	cs
 3768 00a2 4A46     		movcs	r2, r9
 3769 00a4 3146     		mov	r1, r6
 3770 00a6 5046     		mov	r0, r10
 3771 00a8 FFF7FEFF 		bl	_WriteBlocking
 3772              	.LVL356:
 3773 00ac 0446     		mov	r4, r0
 3774              	.LVL357:
1931:Src/SEGGER_RTT.c ****       }
 3775              		.loc 1 1931 9 is_stmt 1 view .LVU1005
 3776 00ae 0F4B     		ldr	r3, .L254+8
 3777 00b0 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3778 00b2 5046     		mov	r0, r10
 3779              	.LVL358:
1931:Src/SEGGER_RTT.c ****       }
 3780              		.loc 1 1931 9 is_stmt 0 view .LVU1006
 3781 00b4 FFF7FEFF 		bl	_PostTerminalSwitch
 3782              	.LVL359:
 3783 00b8 C4E7     		b	.L246
 3784              	.LVL360:
 3785              	.L245:
1938:Src/SEGGER_RTT.c ****       Status = (int)_WriteBlocking(pRing, s, FragLen);
 3786              		.loc 1 1938 7 is_stmt 1 view .LVU1007
 3787 00ba DFF82C80 		ldr	r8, .L254+4
 3788 00be 2946     		mov	r1, r5
 3789 00c0 4046     		mov	r0, r8
 3790              	.LVL361:
1938:Src/SEGGER_RTT.c ****       Status = (int)_WriteBlocking(pRing, s, FragLen);
 3791              		.loc 1 1938 7 is_stmt 0 view .LVU1008
 3792 00c2 FFF7FEFF 		bl	_PostTerminalSwitch
 3793              	.LVL362:
1939:Src/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, _ActiveTerminal);
 3794              		.loc 1 1939 7 is_stmt 1 view .LVU1009
1939:Src/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, _ActiveTerminal);
 3795              		.loc 1 1939 21 is_stmt 0 view .LVU1010
 3796 00c6 4A46     		mov	r2, r9
 3797 00c8 3146     		mov	r1, r6
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 107


 3798 00ca 4046     		mov	r0, r8
 3799 00cc FFF7FEFF 		bl	_WriteBlocking
 3800              	.LVL363:
 3801 00d0 0446     		mov	r4, r0
 3802              	.LVL364:
1940:Src/SEGGER_RTT.c ****       break;
 3803              		.loc 1 1940 7 is_stmt 1 view .LVU1011
 3804 00d2 064B     		ldr	r3, .L254+8
 3805 00d4 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3806 00d6 4046     		mov	r0, r8
 3807              	.LVL365:
1940:Src/SEGGER_RTT.c ****       break;
 3808              		.loc 1 1940 7 is_stmt 0 view .LVU1012
 3809 00d8 FFF7FEFF 		bl	_PostTerminalSwitch
 3810              	.LVL366:
1941:Src/SEGGER_RTT.c ****     default:
 3811              		.loc 1 1941 7 is_stmt 1 view .LVU1013
 3812 00dc B2E7     		b	.L246
 3813              	.LVL367:
 3814              	.L247:
1941:Src/SEGGER_RTT.c ****     default:
 3815              		.loc 1 1941 7 is_stmt 0 view .LVU1014
 3816              	.LBE25:
1951:Src/SEGGER_RTT.c ****   }
 3817              		.loc 1 1951 12 view .LVU1015
 3818 00de 4FF0FF34 		mov	r4, #-1
 3819              	.LVL368:
1953:Src/SEGGER_RTT.c **** }
 3820              		.loc 1 1953 3 is_stmt 1 view .LVU1016
1953:Src/SEGGER_RTT.c **** }
 3821              		.loc 1 1953 10 is_stmt 0 view .LVU1017
 3822 00e2 B1E7     		b	.L240
 3823              	.L255:
 3824              		.align	2
 3825              	.L254:
 3826 00e4 00000000 		.word	_SEGGER_RTT
 3827 00e8 18000000 		.word	_SEGGER_RTT+24
 3828 00ec 00000000 		.word	.LANCHOR3
 3829              		.cfi_endproc
 3830              	.LFE33:
 3832              		.section	.text.SEGGER_RTT_GetAvailWriteSpace,"ax",%progbits
 3833              		.align	1
 3834              		.global	SEGGER_RTT_GetAvailWriteSpace
 3835              		.syntax unified
 3836              		.thumb
 3837              		.thumb_func
 3838              		.fpu fpv5-d16
 3840              	SEGGER_RTT_GetAvailWriteSpace:
 3841              	.LVL369:
 3842              	.LFB34:
1955:Src/SEGGER_RTT.c **** 
1956:Src/SEGGER_RTT.c **** /*********************************************************************
1957:Src/SEGGER_RTT.c **** *
1958:Src/SEGGER_RTT.c **** *       SEGGER_RTT_GetAvailWriteSpace
1959:Src/SEGGER_RTT.c **** *
1960:Src/SEGGER_RTT.c **** *  Function description
1961:Src/SEGGER_RTT.c **** *    Returns the number of bytes available in the ring buffer.
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 108


1962:Src/SEGGER_RTT.c **** *
1963:Src/SEGGER_RTT.c **** *  Parameters
1964:Src/SEGGER_RTT.c **** *    BufferIndex  Index of the up buffer.
1965:Src/SEGGER_RTT.c **** *
1966:Src/SEGGER_RTT.c **** *  Return value
1967:Src/SEGGER_RTT.c **** *    Number of bytes that are free in the selected up buffer.
1968:Src/SEGGER_RTT.c **** */
1969:Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_GetAvailWriteSpace (unsigned BufferIndex){
 3843              		.loc 1 1969 62 is_stmt 1 view -0
 3844              		.cfi_startproc
 3845              		@ args = 0, pretend = 0, frame = 0
 3846              		@ frame_needed = 0, uses_anonymous_args = 0
 3847              		.loc 1 1969 62 is_stmt 0 view .LVU1019
 3848 0000 08B5     		push	{r3, lr}
 3849              	.LCFI44:
 3850              		.cfi_def_cfa_offset 8
 3851              		.cfi_offset 3, -8
 3852              		.cfi_offset 14, -4
1970:Src/SEGGER_RTT.c ****   return _GetAvailWriteSpace(&_SEGGER_RTT.aUp[BufferIndex]);
 3853              		.loc 1 1970 3 is_stmt 1 view .LVU1020
 3854              		.loc 1 1970 10 is_stmt 0 view .LVU1021
 3855 0002 431C     		adds	r3, r0, #1
 3856 0004 03EB4303 		add	r3, r3, r3, lsl #1
 3857 0008 DA00     		lsls	r2, r3, #3
 3858 000a 0248     		ldr	r0, .L258
 3859              	.LVL370:
 3860              		.loc 1 1970 10 view .LVU1022
 3861 000c 1044     		add	r0, r0, r2
 3862 000e FFF7FEFF 		bl	_GetAvailWriteSpace
 3863              	.LVL371:
1971:Src/SEGGER_RTT.c **** }
 3864              		.loc 1 1971 1 view .LVU1023
 3865 0012 08BD     		pop	{r3, pc}
 3866              	.L259:
 3867              		.align	2
 3868              	.L258:
 3869 0014 00000000 		.word	_SEGGER_RTT
 3870              		.cfi_endproc
 3871              	.LFE34:
 3873              		.section	.text.SEGGER_RTT_GetBytesInBuffer,"ax",%progbits
 3874              		.align	1
 3875              		.global	SEGGER_RTT_GetBytesInBuffer
 3876              		.syntax unified
 3877              		.thumb
 3878              		.thumb_func
 3879              		.fpu fpv5-d16
 3881              	SEGGER_RTT_GetBytesInBuffer:
 3882              	.LVL372:
 3883              	.LFB35:
1972:Src/SEGGER_RTT.c **** 
1973:Src/SEGGER_RTT.c **** 
1974:Src/SEGGER_RTT.c **** /*********************************************************************
1975:Src/SEGGER_RTT.c **** *
1976:Src/SEGGER_RTT.c **** *       SEGGER_RTT_GetBytesInBuffer()
1977:Src/SEGGER_RTT.c **** *
1978:Src/SEGGER_RTT.c **** *  Function description
1979:Src/SEGGER_RTT.c **** *    Returns the number of bytes currently used in the up buffer.
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 109


1980:Src/SEGGER_RTT.c **** *
1981:Src/SEGGER_RTT.c **** *  Parameters
1982:Src/SEGGER_RTT.c **** *    BufferIndex  Index of the up buffer.
1983:Src/SEGGER_RTT.c **** *
1984:Src/SEGGER_RTT.c **** *  Return value
1985:Src/SEGGER_RTT.c **** *    Number of bytes that are used in the buffer.
1986:Src/SEGGER_RTT.c **** */
1987:Src/SEGGER_RTT.c **** unsigned SEGGER_RTT_GetBytesInBuffer(unsigned BufferIndex) {
 3884              		.loc 1 1987 60 is_stmt 1 view -0
 3885              		.cfi_startproc
 3886              		@ args = 0, pretend = 0, frame = 0
 3887              		@ frame_needed = 0, uses_anonymous_args = 0
 3888              		@ link register save eliminated.
1988:Src/SEGGER_RTT.c ****   unsigned RdOff;
 3889              		.loc 1 1988 3 view .LVU1025
1989:Src/SEGGER_RTT.c ****   unsigned WrOff;
 3890              		.loc 1 1989 3 view .LVU1026
1990:Src/SEGGER_RTT.c ****   unsigned r;
 3891              		.loc 1 1990 3 view .LVU1027
1991:Src/SEGGER_RTT.c ****   //
1992:Src/SEGGER_RTT.c ****   // Avoid warnings regarding volatile access order.  It's not a problem
1993:Src/SEGGER_RTT.c ****   // in this case, but dampen compiler enthusiasm.
1994:Src/SEGGER_RTT.c ****   //
1995:Src/SEGGER_RTT.c ****   RdOff = _SEGGER_RTT.aUp[BufferIndex].RdOff;
 3892              		.loc 1 1995 3 view .LVU1028
 3893              		.loc 1 1995 9 is_stmt 0 view .LVU1029
 3894 0000 4200     		lsls	r2, r0, #1
 3895 0002 0244     		add	r2, r2, r0
 3896 0004 D100     		lsls	r1, r2, #3
 3897 0006 0A4B     		ldr	r3, .L266
 3898 0008 0B44     		add	r3, r3, r1
 3899 000a 9A6A     		ldr	r2, [r3, #40]
 3900              	.LVL373:
1996:Src/SEGGER_RTT.c ****   WrOff = _SEGGER_RTT.aUp[BufferIndex].WrOff;
 3901              		.loc 1 1996 3 is_stmt 1 view .LVU1030
 3902              		.loc 1 1996 9 is_stmt 0 view .LVU1031
 3903 000c 5B6A     		ldr	r3, [r3, #36]
 3904              	.LVL374:
1997:Src/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
 3905              		.loc 1 1997 3 is_stmt 1 view .LVU1032
 3906              		.loc 1 1997 6 is_stmt 0 view .LVU1033
 3907 000e 9A42     		cmp	r2, r3
 3908 0010 01D8     		bhi	.L261
1998:Src/SEGGER_RTT.c ****     r = WrOff - RdOff;
 3909              		.loc 1 1998 5 is_stmt 1 view .LVU1034
 3910              		.loc 1 1998 7 is_stmt 0 view .LVU1035
 3911 0012 981A     		subs	r0, r3, r2
 3912              	.LVL375:
1999:Src/SEGGER_RTT.c ****   } else {
2000:Src/SEGGER_RTT.c ****     r = _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer - (WrOff - RdOff);
2001:Src/SEGGER_RTT.c ****   }
2002:Src/SEGGER_RTT.c ****   return r;
2003:Src/SEGGER_RTT.c **** }
 3913              		.loc 1 2003 1 view .LVU1036
 3914 0014 7047     		bx	lr
 3915              	.LVL376:
 3916              	.L261:
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 110


1987:Src/SEGGER_RTT.c ****   unsigned RdOff;
 3917              		.loc 1 1987 60 view .LVU1037
 3918 0016 10B4     		push	{r4}
 3919              	.LCFI45:
 3920              		.cfi_def_cfa_offset 4
 3921              		.cfi_offset 4, -4
2000:Src/SEGGER_RTT.c ****   }
 3922              		.loc 1 2000 5 is_stmt 1 view .LVU1038
2000:Src/SEGGER_RTT.c ****   }
 3923              		.loc 1 2000 37 is_stmt 0 view .LVU1039
 3924 0018 00EB4000 		add	r0, r0, r0, lsl #1
 3925              	.LVL377:
2000:Src/SEGGER_RTT.c ****   }
 3926              		.loc 1 2000 37 view .LVU1040
 3927 001c C400     		lsls	r4, r0, #3
 3928 001e 0449     		ldr	r1, .L266
 3929 0020 2144     		add	r1, r1, r4
 3930 0022 086A     		ldr	r0, [r1, #32]
2000:Src/SEGGER_RTT.c ****   }
 3931              		.loc 1 2000 51 view .LVU1041
 3932 0024 D21A     		subs	r2, r2, r3
 3933              	.LVL378:
2000:Src/SEGGER_RTT.c ****   }
 3934              		.loc 1 2000 7 view .LVU1042
 3935 0026 1044     		add	r0, r0, r2
 3936              	.LVL379:
2002:Src/SEGGER_RTT.c **** }
 3937              		.loc 1 2002 3 is_stmt 1 view .LVU1043
 3938              		.loc 1 2003 1 is_stmt 0 view .LVU1044
 3939 0028 5DF8044B 		ldr	r4, [sp], #4
 3940              	.LCFI46:
 3941              		.cfi_restore 4
 3942              		.cfi_def_cfa_offset 0
 3943 002c 7047     		bx	lr
 3944              	.L267:
 3945 002e 00BF     		.align	2
 3946              	.L266:
 3947 0030 00000000 		.word	_SEGGER_RTT
 3948              		.cfi_endproc
 3949              	.LFE35:
 3951              		.comm	_SEGGER_RTT,168,4
 3952              		.section	.bss._ActiveTerminal,"aw",%nobits
 3953              		.set	.LANCHOR3,. + 0
 3956              	_ActiveTerminal:
 3957 0000 00       		.space	1
 3958              		.section	.bss._acDownBuffer,"aw",%nobits
 3959              		.align	2
 3960              		.set	.LANCHOR2,. + 0
 3963              	_acDownBuffer:
 3964 0000 00000000 		.space	16
 3964      00000000 
 3964      00000000 
 3964      00000000 
 3965              		.section	.bss._acUpBuffer,"aw",%nobits
 3966              		.align	2
 3967              		.set	.LANCHOR1,. + 0
 3970              	_acUpBuffer:
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 111


 3971 0000 00000000 		.space	1024
 3971      00000000 
 3971      00000000 
 3971      00000000 
 3971      00000000 
 3972              		.section	.rodata._DoInit.str1.4,"aMS",%progbits,1
 3973              		.align	2
 3974              	.LC0:
 3975 0000 5465726D 		.ascii	"Terminal\000"
 3975      696E616C 
 3975      00
 3976 0009 000000   		.space	3
 3977              	.LC1:
 3978 000c 52545400 		.ascii	"RTT\000"
 3979              	.LC2:
 3980 0010 53454747 		.ascii	"SEGGER\000"
 3980      455200
 3981              		.section	.rodata._aTerminalId,"a"
 3982              		.align	2
 3983              		.set	.LANCHOR0,. + 0
 3986              	_aTerminalId:
 3987 0000 30       		.byte	48
 3988 0001 31       		.byte	49
 3989 0002 32       		.byte	50
 3990 0003 33       		.byte	51
 3991 0004 34       		.byte	52
 3992 0005 35       		.byte	53
 3993 0006 36       		.byte	54
 3994 0007 37       		.byte	55
 3995 0008 38       		.byte	56
 3996 0009 39       		.byte	57
 3997 000a 41       		.byte	65
 3998 000b 42       		.byte	66
 3999 000c 43       		.byte	67
 4000 000d 44       		.byte	68
 4001 000e 45       		.byte	69
 4002 000f 46       		.byte	70
 4003              		.text
 4004              	.Letext0:
 4005              		.file 2 "/Users/evan/mixr/software/gcc-arm-none-eabi-8-2019-q3-update/lib/gcc/arm-none-eabi/8.3.1/
 4006              		.file 3 "/Users/evan/mixr/software/gcc-arm-none-eabi-8-2019-q3-update/arm-none-eabi/include/sys/_t
 4007              		.file 4 "/Users/evan/mixr/software/gcc-arm-none-eabi-8-2019-q3-update/arm-none-eabi/include/sys/re
 4008              		.file 5 "/Users/evan/mixr/software/gcc-arm-none-eabi-8-2019-q3-update/arm-none-eabi/include/sys/lo
 4009              		.file 6 "/Users/evan/mixr/software/gcc-arm-none-eabi-8-2019-q3-update/arm-none-eabi/include/stdlib
 4010              		.file 7 "Inc/SEGGER_RTT.h"
 4011              		.file 8 "/Users/evan/mixr/software/gcc-arm-none-eabi-8-2019-q3-update/arm-none-eabi/include/string
 4012              		.file 9 "<built-in>"
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 112


DEFINED SYMBOLS
                            *ABS*:0000000000000000 SEGGER_RTT.c
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:17     .text._GetAvailWriteSpace:0000000000000000 $t
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:24     .text._GetAvailWriteSpace:0000000000000000 _GetAvailWriteSpace
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:78     .text._WriteNoCheck:0000000000000000 $t
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:84     .text._WriteNoCheck:0000000000000000 _WriteNoCheck
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:174    .text._WriteBlocking:0000000000000000 $t
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:180    .text._WriteBlocking:0000000000000000 _WriteBlocking
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:318    .text._PostTerminalSwitch:0000000000000000 $t
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:324    .text._PostTerminalSwitch:0000000000000000 _PostTerminalSwitch
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:366    .text._PostTerminalSwitch:0000000000000020 $d
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:371    .text._DoInit:0000000000000000 $t
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:377    .text._DoInit:0000000000000000 _DoInit
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:455    .text._DoInit:0000000000000048 $d
                            *COM*:00000000000000a8 _SEGGER_RTT
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:465    .text.SEGGER_RTT_ReadUpBufferNoLock:0000000000000000 $t
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:472    .text.SEGGER_RTT_ReadUpBufferNoLock:0000000000000000 SEGGER_RTT_ReadUpBufferNoLock
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:649    .text.SEGGER_RTT_ReadUpBufferNoLock:00000000000000a4 $d
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:654    .text.SEGGER_RTT_ReadNoLock:0000000000000000 $t
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:661    .text.SEGGER_RTT_ReadNoLock:0000000000000000 SEGGER_RTT_ReadNoLock
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:832    .text.SEGGER_RTT_ReadNoLock:0000000000000098 $d
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:837    .text.SEGGER_RTT_ReadUpBuffer:0000000000000000 $t
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:844    .text.SEGGER_RTT_ReadUpBuffer:0000000000000000 SEGGER_RTT_ReadUpBuffer
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:896    .text.SEGGER_RTT_Read:0000000000000000 $t
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:903    .text.SEGGER_RTT_Read:0000000000000000 SEGGER_RTT_Read
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:955    .text.SEGGER_RTT_WriteWithOverwriteNoLock:0000000000000000 $t
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:962    .text.SEGGER_RTT_WriteWithOverwriteNoLock:0000000000000000 SEGGER_RTT_WriteWithOverwriteNoLock
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:1203   .text.SEGGER_RTT_WriteWithOverwriteNoLock:0000000000000108 $d
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:1208   .text.SEGGER_RTT_WriteDownBufferNoLock:0000000000000000 $t
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:1215   .text.SEGGER_RTT_WriteDownBufferNoLock:0000000000000000 SEGGER_RTT_WriteDownBufferNoLock
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:1331   .text.SEGGER_RTT_WriteDownBufferNoLock:0000000000000060 $d
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:1336   .text.SEGGER_RTT_WriteNoLock:0000000000000000 $t
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:1343   .text.SEGGER_RTT_WriteNoLock:0000000000000000 SEGGER_RTT_WriteNoLock
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:1465   .text.SEGGER_RTT_WriteNoLock:000000000000006c $d
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:1470   .text.SEGGER_RTT_WriteDownBuffer:0000000000000000 $t
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:1477   .text.SEGGER_RTT_WriteDownBuffer:0000000000000000 SEGGER_RTT_WriteDownBuffer
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:1549   .text.SEGGER_RTT_WriteDownBuffer:0000000000000030 $d
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:1554   .text.SEGGER_RTT_Write:0000000000000000 $t
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:1561   .text.SEGGER_RTT_Write:0000000000000000 SEGGER_RTT_Write
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:1633   .text.SEGGER_RTT_Write:0000000000000030 $d
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:1638   .text.SEGGER_RTT_WriteString:0000000000000000 $t
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:1645   .text.SEGGER_RTT_WriteString:0000000000000000 SEGGER_RTT_WriteString
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:1686   .text.SEGGER_RTT_PutCharSkipNoLock:0000000000000000 $t
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:1693   .text.SEGGER_RTT_PutCharSkipNoLock:0000000000000000 SEGGER_RTT_PutCharSkipNoLock
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:1795   .text.SEGGER_RTT_PutCharSkipNoLock:0000000000000050 $d
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:1800   .text.SEGGER_RTT_PutCharSkip:0000000000000000 $t
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:1807   .text.SEGGER_RTT_PutCharSkip:0000000000000000 SEGGER_RTT_PutCharSkip
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:1940   .text.SEGGER_RTT_PutCharSkip:000000000000006c $d
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:1946   .text.SEGGER_RTT_PutChar:0000000000000000 $t
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:1953   .text.SEGGER_RTT_PutChar:0000000000000000 SEGGER_RTT_PutChar
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:2109   .text.SEGGER_RTT_PutChar:0000000000000090 $d
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:2115   .text.SEGGER_RTT_GetKey:0000000000000000 $t
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:2122   .text.SEGGER_RTT_GetKey:0000000000000000 SEGGER_RTT_GetKey
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:2174   .text.SEGGER_RTT_WaitKey:0000000000000000 $t
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:2181   .text.SEGGER_RTT_WaitKey:0000000000000000 SEGGER_RTT_WaitKey
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:2209   .text.SEGGER_RTT_HasKey:0000000000000000 $t
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:2216   .text.SEGGER_RTT_HasKey:0000000000000000 SEGGER_RTT_HasKey
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 113


/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:2268   .text.SEGGER_RTT_HasKey:0000000000000020 $d
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:2273   .text.SEGGER_RTT_HasData:0000000000000000 $t
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:2280   .text.SEGGER_RTT_HasData:0000000000000000 SEGGER_RTT_HasData
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:2325   .text.SEGGER_RTT_HasData:0000000000000020 $d
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:2330   .text.SEGGER_RTT_HasDataUp:0000000000000000 $t
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:2337   .text.SEGGER_RTT_HasDataUp:0000000000000000 SEGGER_RTT_HasDataUp
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:2382   .text.SEGGER_RTT_HasDataUp:0000000000000020 $d
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:2387   .text.SEGGER_RTT_AllocDownBuffer:0000000000000000 $t
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:2394   .text.SEGGER_RTT_AllocDownBuffer:0000000000000000 SEGGER_RTT_AllocDownBuffer
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:2529   .text.SEGGER_RTT_AllocDownBuffer:0000000000000068 $d
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:2535   .text.SEGGER_RTT_AllocUpBuffer:0000000000000000 $t
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:2542   .text.SEGGER_RTT_AllocUpBuffer:0000000000000000 SEGGER_RTT_AllocUpBuffer
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:2685   .text.SEGGER_RTT_AllocUpBuffer:0000000000000084 $d
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:2691   .text.SEGGER_RTT_ConfigUpBuffer:0000000000000000 $t
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:2698   .text.SEGGER_RTT_ConfigUpBuffer:0000000000000000 SEGGER_RTT_ConfigUpBuffer
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:2827   .text.SEGGER_RTT_ConfigUpBuffer:0000000000000074 $d
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:2832   .text.SEGGER_RTT_ConfigDownBuffer:0000000000000000 $t
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:2839   .text.SEGGER_RTT_ConfigDownBuffer:0000000000000000 SEGGER_RTT_ConfigDownBuffer
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:2961   .text.SEGGER_RTT_ConfigDownBuffer:0000000000000060 $d
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:2966   .text.SEGGER_RTT_SetNameUpBuffer:0000000000000000 $t
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:2973   .text.SEGGER_RTT_SetNameUpBuffer:0000000000000000 SEGGER_RTT_SetNameUpBuffer
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:3065   .text.SEGGER_RTT_SetNameUpBuffer:0000000000000040 $d
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:3070   .text.SEGGER_RTT_SetNameDownBuffer:0000000000000000 $t
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:3077   .text.SEGGER_RTT_SetNameDownBuffer:0000000000000000 SEGGER_RTT_SetNameDownBuffer
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:3167   .text.SEGGER_RTT_SetNameDownBuffer:0000000000000040 $d
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:3172   .text.SEGGER_RTT_SetFlagsUpBuffer:0000000000000000 $t
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:3179   .text.SEGGER_RTT_SetFlagsUpBuffer:0000000000000000 SEGGER_RTT_SetFlagsUpBuffer
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:3269   .text.SEGGER_RTT_SetFlagsUpBuffer:0000000000000040 $d
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:3274   .text.SEGGER_RTT_SetFlagsDownBuffer:0000000000000000 $t
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:3281   .text.SEGGER_RTT_SetFlagsDownBuffer:0000000000000000 SEGGER_RTT_SetFlagsDownBuffer
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:3371   .text.SEGGER_RTT_SetFlagsDownBuffer:0000000000000040 $d
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:3376   .text.SEGGER_RTT_Init:0000000000000000 $t
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:3383   .text.SEGGER_RTT_Init:0000000000000000 SEGGER_RTT_Init
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:3403   .text.SEGGER_RTT_SetTerminal:0000000000000000 $t
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:3410   .text.SEGGER_RTT_SetTerminal:0000000000000000 SEGGER_RTT_SetTerminal
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:3576   .text.SEGGER_RTT_SetTerminal:000000000000007c $d
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:3584   .text.SEGGER_RTT_TerminalOut:0000000000000000 $t
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:3591   .text.SEGGER_RTT_TerminalOut:0000000000000000 SEGGER_RTT_TerminalOut
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:3826   .text.SEGGER_RTT_TerminalOut:00000000000000e4 $d
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:3833   .text.SEGGER_RTT_GetAvailWriteSpace:0000000000000000 $t
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:3840   .text.SEGGER_RTT_GetAvailWriteSpace:0000000000000000 SEGGER_RTT_GetAvailWriteSpace
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:3869   .text.SEGGER_RTT_GetAvailWriteSpace:0000000000000014 $d
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:3874   .text.SEGGER_RTT_GetBytesInBuffer:0000000000000000 $t
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:3881   .text.SEGGER_RTT_GetBytesInBuffer:0000000000000000 SEGGER_RTT_GetBytesInBuffer
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:3947   .text.SEGGER_RTT_GetBytesInBuffer:0000000000000030 $d
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:3956   .bss._ActiveTerminal:0000000000000000 _ActiveTerminal
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:3957   .bss._ActiveTerminal:0000000000000000 $d
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:3959   .bss._acDownBuffer:0000000000000000 $d
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:3963   .bss._acDownBuffer:0000000000000000 _acDownBuffer
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:3966   .bss._acUpBuffer:0000000000000000 $d
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:3970   .bss._acUpBuffer:0000000000000000 _acUpBuffer
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:3973   .rodata._DoInit.str1.4:0000000000000000 $d
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:3982   .rodata._aTerminalId:0000000000000000 $d
/var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s:3986   .rodata._aTerminalId:0000000000000000 _aTerminalId

UNDEFINED SYMBOLS
memcpy
ARM GAS  /var/folders/4f/bvl6__ys6qq7h5n0wwljfc200000gn/T//ccDAe0Df.s 			page 114


strlen
